#!/bin/sh

set -e

# Set environment variables.
if [ "$(uname)" = "Darwin" ]; then

    PRINTF="printf"

else

    PRINTF=$(which -a printf | gawk '/bin/ {print}' | head -n1)

fi

ARCH=$(uname -m)
OS=$(uname)
IS64=$($PRINTF "%s\n" "$ARCH" | gawk 'match($0, /64/) {print substr($0, RSTART, RLENGTH)}')

if [ "$OS" = "Darwin" ]; then

    SRB2BLDROOT="$HOME/Library/srb2bld"

elif [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]; then

    SRB2BLDROOT="$HOME/AppData/Roaming/srb2bld"

else

    SRB2BLDROOT="$HOME/.local/share/srb2bld"

fi

if [ -x "$(which doas 2> /dev/null)" ]; then

    SUDO="doas"

else

    SUDO="sudo"

fi

BUILDPATH="$SRB2BLDROOT/builds"
DEBVER="jessie"
UBUVER="18.04"
#SRB2PERSONAFILEID="5neoderzan6mbh3"
SRB2PERSONAFILEID="vjartyfqu3mdmjj"
SRB2VER="SRB2_release_2.2.9"
SRB2PERSONAVER="1.3.3"
SRB2KARTVER="v1.3"
MINGWVER="gcc-10-win32"
MINGWOLDVER="gcc-4.9-win32"

if [ "$(ldd --version 2>&1 | gawk 'match($0, /musl/) {print substr($0, RSTART, RLENGTH)}' | gawk '!a[$0]++ {print}')" = "musl" ]; then

    GCCVER="gcc"
    GCCOLDVER="gcc-6"

else

    GCCVER="gcc-10"
    GCCOLDVER="gcc-4.9"

fi

LNXFMODVER="fmodapi375linux"
LNXPNG12VER="libpng12"
LNXSDL2MIXERXVER="master"
LNXOPENMPTVER="master"
LNXGMEVER="0.6.2"
LNXDISCORDRPCVER="master"
LNXOPENVRVER="1.10.30"

if [ "$OS" = "Darwin" ]; then

    MACOSVER="10.9"
    MACOSPNGVER="1.6.37"
    MACOSOGGVER="1.3.5"
    MACOSVORBISVER="1.3.7"
    MACOSMPG123VER="master"
    MACOSMODPLUGVER="master"
    MACOSSDL2VER="2.0.18"
    MACOSSDL2MIXERVER="2.0.4"
    MACOSSDL2MIXERXVER="2.5.0"
    MACOSOPENMPTVER="0.5.14"
    MACOSGMEVER="0.6.2"
    MACOSDISCORDRPCVER="master"
    MACOSOPENVRVER="1.10.30"
    HOMEBREWPREFIX="$(brew --prefix)"
    MACPORTPREFIX="/opt/local"

fi

COMPTABLEURL="https://gist.githubusercontent.com/Bijman/dae1e123800af25ef28689bd644a4516/raw"
FAILURE="\e[1;91m"
SUCCESS="\e[1;92m"
NOTICE="\e[1;93m"
MESSAGE="\e[1;94m"
PROMPT="\e[1;97m"

appbundle() {
    clear

    # Blocking access to this option for users that uses OS other than macOS since App Bundles are macOS exclusive.
    if [ "$OS" != "Darwin" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "Currently building App Bundles is only available for macOS. Exiting."
        exit

    fi

    choosebuild

    # We have to set this in order to make App Bundle in installtomacos function.
    APPBUNDLE=1

    # Set current working directory.
    MACOSPWD="$(pwd)"

    installtomacos

    # Set name of App Bundle in message.
    APPBUNDLENAME=$(find "$BUILD" -name "*.dmg" 2> /dev/null | gawk -F'/' '{print $NF}' | sort | uniq -d)

    # Rename App Bundle and move it to working directory.
    if [ -d "$BUILD/build/package" ]; then

        mv "$BUILD/build/package/$APPBUNDLENAME" "$MACOSPWD/$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","_");print}')-$COMREV.dmg"

    else

        mv "$BUILD/build/$APPBUNDLENAME" "$MACOSPWD/$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","_");print}')-$COMREV.dmg"

    fi

    cleansource

    $PRINTF "$SUCCESS\n%s\n\e[0m\a" "App Bundle for $BUILDNAME is done. Look for $($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","_");print}')-$COMREV.dmg in $MACOSPWD path."
}

appimage() {
    clear

    # Blocking access to this option for users that have OS other than Linux since AppImages are Linux exclusive.
    if [ "$OS" != "Linux" ] || [ -z "$(ldd --version 2>&1 | gawk '/Free Software Foundation/ {print}')" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "Currently building AppImages is only available for Linux with glibc. Exiting."
        exit

    fi

    choosebuild

    # We have to set this in order to make AppImage in Docker container.
    APPIMAGE=1

    # Set current working directory.
    LNXPWD="$(pwd)"

    dockerentry

    dockerrun

    # Export commit revision name before creating AppImage.
    export VERSION=$(git -C "$BUILD" rev-parse --short HEAD)

    # Create AppImage from prepared AppDir.
    cd "$BUILD" || exit
    "$BUILD/appimagetool" -n "$BUILD/build/AppDir" 2> /dev/null

    # Set name of AppImage in message.
    APPIMAGENAME=$(find "$BUILD" -name "*.AppImage" 2> /dev/null | gawk -F'/' '{print $NF}')

    # Move created AppImage to working directory.
    mv "$BUILD/"*.AppImage "$LNXPWD" 2> /dev/null

    cleansource

    $PRINTF "$SUCCESS\n%s\n\e[0m\a" "AppImage for $BUILDNAME is done. Look for $APPIMAGENAME in $LNXPWD path."
}

buildname() {
    # Setting names for fancy display in messages.
    if [ "$BUILD" = "$BUILDPATH/srb2" ]; then

        export BUILDNAME="Sonic Robo Blast 2"

    elif [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ]; then

        export BUILDNAME="Sonic Robo Blast 2 Uncapped PLUS"

    elif [ "$BUILD" = "$BUILDPATH/srb2-netplus" ]; then

        export BUILDNAME="Sonic Robo Blast 2 NetPlus"

    elif [ "$BUILD" = "$BUILDPATH/srb2-vr" ]; then

        export BUILDNAME="Sonic Robo Blast 2 VR"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        export BUILDNAME="Sonic Robo Blast 2 v2.1 Legacy"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        export BUILDNAME="Sonic Robo Blast 2 v2.0"

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        export BUILDNAME="Sonic Robo Blast 2 Final Demo"

    elif [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        export BUILDNAME="Sonic Robo Blast 2 Persona"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ]; then

        export BUILDNAME="Sonic Robo Blast 2 Kart"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ]; then

        export BUILDNAME="Sonic Robo Blast 2 Kart Moe Mansion"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        export BUILDNAME="Sonic Robo Blast 2 Kart VR"

    fi
}

choosebranch() {
    # Download or update game's source code.
    if [ ! -d "$BUILD/.git" ]; then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading $BUILDNAME's source code. Please wait..."
        $GIT "$BUILD"

    else

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating $BUILDNAME's source code. Please wait..."
        cleansource
        GITCURVER=$(git -C "$BUILD" branch --show-current)
        git -C "$BUILD" checkout -q "$GITVER"
        git -C "$BUILD" pull --recurse-submodules --rebase --autostash
        git -C "$BUILD" checkout -q "$GITCURVER"

    fi

    # Choose Git branch.
    $PRINTF "$MESSAGE\n%s\n\e[0m" "Please choose branch by typing number and then pressing enter, or just press enter to continue with default branch, which is \"$GITVER\". To quit, press ctrl+c."
    $PRINTF "$NOTICE%s\n\e[0m" "Warning! By choosing different branch other than default, compilation or running compiled build may fail."
    array=$(git -C "$BUILD" branch -a | gawk -F'/' '!/->/ {print $NF}' | sort -u | gawk '!/^ / {gsub("^* ",""); print}')
    arrayname=$($PRINTF "$(git -C "$BUILD" branch -a | gawk -F'/' '!/->/ {print $NF}' | sort -u | gawk '!/^ / {gsub("^* ","\\e[1;92m* \\e[0m"); print}')\n")
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            GITVER=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
            if [ -d "$BUILD/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Switching to branch \"$GITVER\"."
                git -C "$BUILD" checkout -q "$GITVER"

            fi
            break

        else

            if [ -d "$BUILD/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Switching to branch \"$GITVER\"."
                git -C "$BUILD" checkout -q "$GITVER"

            fi
            break

        fi

    done
}

choosebuild() {
    clear

    # Choose and download build.
    while

        $PRINTF "$MESSAGE%s\n\e[0m" "Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."
        for loop in "Build SRB2" "Build SRB2 Uncapped Plus" "Build SRB2 NetPlus" "Build SRB2 VR" "Build SRB2 v2.1 Legacy" "Build SRB2 v2.0" "Build SRB2 Final Demo" "Build SRB2 Persona" "Build SRB2 Kart" "Build SRB2 Kart Moe Mansion" "Build SRB2 Kart VR"; do $PRINTF "%s\n" "$((i += 1))) $loop"; done
        $PRINTF "#? "
        read -r choose
    do

        unset i
        case "$choose" in

            "1")

                BUILD="$BUILDPATH/srb2"
                GITVER="master"
                GIT="git clone https://git.do.srb2.org/STJr/SRB2.git --recursive --branch $GITVER"
                break

                ;;

            "2")

                BUILD="$BUILDPATH/srb2-uncapped-plus"
                GITVER="uncapped-plus"
                GIT="git clone https://git.do.srb2.org/Fafabis/SRB2.git --recursive --branch $GITVER"
                break

                ;;

            "3")

                BUILD="$BUILDPATH/srb2-netplus"
                GITVER="master"
                GIT="git clone https://git.netplus.friskyfox.art/NetPlus/netplus.git --recursive --branch $GITVER"
                break

                ;;

            "4")

                BUILD="$BUILDPATH/srb2-vr"
                GITVER="openvr"
                GIT="git clone https://git.do.srb2.org/chreas/SRB2.git --recursive --branch $GITVER"
                break

                ;;

            "5")

                BUILD="$BUILDPATH/srb2-2.1-legacy"
                GITVER="master"
                GIT="git clone https://github.com/PandaSRC/srb2-legacy.git --recursive --branch $GITVER"
                break

                ;;

            "6")

                BUILD="$BUILDPATH/srb2-2.0"
                GITVER="master"
                GIT="git clone https://github.com/STJr/SRB2-Public.git --recursive --branch $GITVER"
                break

                ;;

            "7")

                BUILD="$BUILDPATH/srb2-final-demo"
                GITVER="master"
                GIT="git clone https://git.do.srb2.org/SteelT/SRB2-OLD.git --recursive --branch $GITVER"
                break

                ;;

            "8")

                BUILD="$BUILDPATH/srb2-persona"
                GITVER="srb2p_22"
                GIT="git clone https://git.do.srb2.org/SinnamonLat/SRB2.git --recursive --branch $GITVER"
                break

                ;;

            "9")

                BUILD="$BUILDPATH/srb2-kart"
                GITVER="master"
                GIT="git clone https://git.do.srb2.org/KartKrew/Kart-Public.git --recursive --branch $GITVER"
                break

                ;;

            "10")

                BUILD="$BUILDPATH/srb2-kart-moe-mansion"
                GITVER="moe-mansion"
                GIT="git clone https://gitlab.com/himie/kart-public.git --recursive --branch $GITVER"
                break

                ;;

            "11")

                BUILD="$BUILDPATH/srb2-kart-vr"
                GITVER="very-cool-renderer"
                GIT="git clone https://gitlab.com/cschoenig/kart-public.git --recursive --branch $GITVER"
                break

                ;;

            *)

                $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                exit

                ;;

        esac

    done

    buildname

    choosebranch

}

chooseinstall() {
    clear

    # Install build.
    if [ "$OS" != "Linux" ] && [ "$OS" != "Darwin" ] && [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" != "MINGW64" ] && [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" != "MINGW" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "Currently building and installing is only available for Linux, macOS and Windows. Exiting."
        exit

    fi

    # Check whether SDKROOT environment variable is set or not.
    if [ "$OS" = "Darwin" ]; then

        if [ -z "$SDKROOT" ]; then

            $PRINTF "$FAILURE%s\n\e[0m" "Set SDKROOT environment variable to macOS SDK full path. Usually macOS .sdk file is located in /Library/Developer/CommandLineTools/SDKs path, if you installed Homebrew. Exiting."
            exit

        fi

        choosebuild

        installtomacos

        cleansource

        installtolist

    elif ([ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]); then

        choosebuild

        dockerentry

        dockerrun

        if [ -d "$BUILD/build/AppDir" ]; then

            installtowindows

            cleansource

            installtolist

        fi

    elif [ "$OS" = "Linux" ]; then

        choosebuild

        dockerentry

        dockerrun

        if [ -d "$BUILD/build/AppDir" ]; then

            installtolinux

            cleansource

            installtolist

        fi

    fi

}

chooseremoveasset() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/assets" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "Can't find assets."
        exit

    fi

    # Remove asset.
    $PRINTF "$MESSAGE%s\n\e[0m" "Please choose asset by typing number and then pressing enter. Press enter or ctrl+c to quit."
    array=$(find "$SRB2BLDROOT/assets" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)
    arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Are you sure you want to remove this asset? Enter \"yes/Yes\" or \"no/No\" (\"y/Y\" or \"n/N\")."
            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r CONFIRM

            if [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

                SRB2ASSETLNXPATH=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
                SRB2ASSETLNXNAME=$($PRINTF "%s\n" "$arrayname" | gawk NR=="${n}")
                rm -fv "$SRB2ASSETLNXPATH"
                $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Removing $SRB2ASSETLNXNAME is successful."

            fi
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

chooseremovebuild() {
    clear

    if [ -z "$(find "$BUILDPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "Can't find builds."
        exit

    fi

    # Remove build.
    $PRINTF "$MESSAGE%s\n\e[0m" "Please choose build by typing number and then pressing enter. Press enter or ctrl+c to quit."
    array=$(find "$BUILDPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | sort)
    arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Are you sure you want to remove this build's directory? Enter \"yes/Yes\" or \"no/No\" (\"y/Y\" or \"n/N\")."
            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r CONFIRM

            if [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

                BUILDPATH=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
                BUILDNAME=$($PRINTF "%s\n" "$arrayname" | gawk NR=="${n}")
                rm -rfv "$BUILDPATH"
                $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Removing $BUILDNAME is successful."

            fi
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

chooseuninstall() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "Can't find installed builds."
        exit

    fi

    # Uninstall build from the system.
    $PRINTF "$MESSAGE%s\n\e[0m" "Please choose installed package by typing number and then pressing enter. Press enter or ctrl+c to quit."
    array=$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)
    arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            BUILDINSTALLED=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
            INSTALLEDFILES=$(gawk '/\/usr\/local/ {print}' "$BUILDINSTALLED")
            $PRINTF "$PROMPT\n%s\n\e[0m" "$INSTALLEDFILES"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Above files will be uninstalled. Are you sure you want to that? Enter \"yes/Yes\" or \"no/No\" (\"y/Y\" or \"n/N\")."
            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r CONFIRM

            if [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ] && ([ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]); then

                gawk -i inplace -v RS= '{gsub("---------------\n[A-Z]*=1|---------------","");print}' "$BUILDINSTALLED"

                while read -r FILE; do
                    rm -rfv "$FILE"
                done < "$BUILDINSTALLED"

                rm -f "$BUILDINSTALLED"

                if [ -z "$(find "$HOME/SRB2 Games" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

                    rm -rfv "$HOME/SRB2 Games"

                fi

                $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Uninstallation of $($PRINTF "%s\n" "$BUILDINSTALLED" | gawk -F'/' '{print $NF}') is successful."

            elif [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

                gawk -i inplace -v RS= '{gsub("---------------\n[A-Z]*=1|---------------","");print}' "$BUILDINSTALLED"

                while read -r FILE; do
                    $SUDO rm -rfv "$FILE"
                done < "$BUILDINSTALLED"

                rm -f "$BUILDINSTALLED"

                if [ -z "$(find /usr/local/opt/srb2-apps -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

                    $SUDO rm -rfv /usr/local/opt/srb2-apps

                fi

                # Refreshing menu icons.
                if [ -x "$(which gtk-update-icon-cache 2> /dev/null)" ]; then

                    $SUDO gtk-update-icon-cache -qft /usr/local/share/icons/hicolor

                elif [ -x "$(find /usr/bin -name "kbuildsycoca*" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

                    $SUDO "$(find /usr/bin -name "kbuildsycoca*" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" --noincremental

                fi

                $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Uninstallation of $($PRINTF "%s\n" "$BUILDINSTALLED" | gawk -F'/' '{print $NF}') is successful."

            fi
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

cleansource() {
    # Clean build's directory after compiling.
    git -C "$BUILD" clean -qdfx -e .comrev
    git -C "$BUILD" reset -q --hard
}

compatibility() {
    clear

    # Show compatibility table for compiling SRB2 builds for each OS.
    curl -sL "$COMPTABLEURL"
}

defaultmessage() {
    $PRINTF "$NOTICE%s\n\e[0m" "Use srb2bld --help to check usage of this shell script."
}

dockerentry() {
    # Prepare containers path.
    if [ ! -d "$SRB2BLDROOT/containers/srb2-linux-glibc-docker" ]; then

        mkdir -p "$SRB2BLDROOT/containers/srb2-linux-glibc-docker"

    fi

    # Create entrypoint shell script for Docker container.
    cat > "$SRB2BLDROOT/containers/srb2-linux-glibc-docker/Entrypoint" << ENTRYPOINT
#!/bin/bash

    set -e

    export PRINTF=\$(which printf | gawk '/bin/ {print}')
    export ARCH="$ARCH"
    export OS="$OS"
    export IS64="$IS64"
    export SRB2BLDROOT="$SRB2BLDROOT"
    export BUILDPATH="$BUILDPATH"
    export BUILD="$BUILD"
    export GIT="$GIT"
    export GITVER="$GITVER"
    export APPIMAGE="$APPIMAGE"
    export UPGRADE="$UPGRADE"
    export STOW_DIR=/usr/local/stow

    # Some old Docker images don't have up-to-date SSL certifications, so this is workaround.
    # export GIT_SSL_NO_VERIFY=1

    cleansource() {
        # Clean build's directory after compiling.
        git -C "\$BUILD" clean -qdfx -e .comrev
        git -C "\$BUILD" reset -q --hard
    }

    sudo_ping() {
        # Extend password timeout for sudo.
        if [ -n "$SUDO_PID" ]; then

            if [ "$1" = stop ]; then

                kill "$SUDO_PID"
                return

            else

                return

            fi

        fi

        sudo -v
        if [ $? -eq 1 ]; then

            return

        fi

        while true; do

            sudo -v
            sleep 1

        done &
        SUDO_PID=$!

        trap 'sudo_ping stop ; exit' 0

    }

    # Clean the game's source code and exit shell script in case of error or cancelling script
    trap '\$PRINTF "$SUCCESS\n\n%s\n\e[0m" "Cleaning up source code and exiting shell script. Please wait..." ; cleansource ; exit' 1 2 3 6 15 ERR

    # Update Docker container.
    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker container. Please wait..."

    if [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

        sudo apk update && sudo apk upgrade

    else

        sudo apt update && sudo apt full-upgrade -y

    fi

    # Make directories for storing essential files.
    mkdir -p "\$SRB2BLDROOT/builds" "\$SRB2BLDROOT/assets" "\$SRB2BLDROOT/libraries" "\$BUILD/build/AppDir/usr/"{bin,games,lib,share/applications}
    cd "\$BUILD" || exit

    if [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        mkdir -p "\$BUILD/build/AppDir/usr/games/SRB2Kart"

    else

        mkdir -p "\$BUILD/build/AppDir/usr/games/SRB2"

    fi

    # Download and extract assets.
    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading and extracting $BUILDNAME's assets. Please wait..."
    if [ "\$BUILD" = "\$BUILDPATH/srb2" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

        if [ "\$(gawk -F'"' '/SRB2VERSION/ {print \$2}' "\$BUILD/src/version.h")" != "\$(printf "$SRB2VER" | gawk -F'_' '{print \$NF}')" ]; then

            SRB2ASSETURL=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases | gawk -F'"' '/$SRB2VER.*Full.zip/ {print \$4}')
            if [ "\$(curl -sLI "\$SRB2ASSETURL" | gawk -F'Last-Modified: ' '{IGNORECASE=1} /Last-Modified/ {gsub("\r","");print \$NF}')" != "\$(date -u -r "\$SRB2BLDROOT/assets/SRB2-Older.zip" +"%a, %d %b %Y %H:%M:%S GMT" 2> /dev/null)" ]; then

                rm -f "\$SRB2BLDROOT/assets/SRB2-Older.zip"
                curl -RL "\$SRB2ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-Older.zip"

            fi

            7z x -y "\$SRB2BLDROOT/assets/SRB2-Older.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"\$BUILD/build/AppDir/usr/games/SRB2"

        else

            SRB2ASSETURL=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print \$4}')
            if [ "\$(curl -sLI "\$SRB2ASSETURL" | gawk -F'Last-Modified: ' '{IGNORECASE=1} /Last-Modified/ {gsub("\r","");print \$NF}')" != "\$(date -u -r "\$SRB2BLDROOT/assets/SRB2-Latest.zip" +"%a, %d %b %Y %H:%M:%S GMT" 2> /dev/null)" ]; then

                rm -f "\$SRB2BLDROOT/assets/SRB2-Latest.zip"
                curl -RL "\$SRB2ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-Latest.zip"

            fi

            7z x -y "\$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"\$BUILD/build/AppDir/usr/games/SRB2"

        fi

        find "\$BUILD/build/AppDir/usr/games/SRB2/models" -type d -exec chmod 755 {} \;

        if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

            if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

                cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/libopenmpt/bin/x86/mingw"
                cp -f "\$BUILD/libs/libopenmpt/bin/x86/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDLMixerX/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/openvr/openvr_api.dll" "\$BUILD/build/AppDir/usr/lib"

            elif [ "\$IS64" = "64" ]; then

                cp -f "\$BUILD/libs/curl/lib64/libcurl-x64.dll" "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/dll-binaries/x86_64/Old"
                cp -f "\$BUILD/libs/dll-binaries/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/libopenmpt/bin/x86_64/mingw"
                cp -f "\$BUILD/libs/libopenmpt/bin/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/x86_64-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDLMixerX/x86_64-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

            else

                cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/libopenmpt/bin/x86/mingw"
                cp -f "\$BUILD/libs/libopenmpt/bin/x86/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDLMixerX/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

            fi

        fi

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

#        curl -RLC - "https://www.dropbox.com/s/$SRB2PERSONAFILEID" -o "\$SRB2BLDROOT/assets/SRB2P_MP.exe"
#        7z e -y "\$SRB2BLDROOT/assets/SRB2P_MP.exe" "*/*.pk3" "*/*.wad" -o"\$BUILD/build/AppDir/usr/games/SRB2"

        curl -RLC - "https://www.dropbox.com/s/$SRB2PERSONAFILEID" -o "\$SRB2BLDROOT/assets/SRB2P_MP.rar"
        7z x -y "\$SRB2BLDROOT/assets/SRB2P_MP.rar" "*.pk3" "*.wad" -o"\$BUILD/build/AppDir/usr/games/SRB2"

        if [ "\$(gawk -F'"' '/SRB2VERSION/ {print \$2}' "\$BUILD/src/version.h")" != "$SRB2PERSONAVER" ]; then

            SRB2ASSETURL=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases | gawk -F'"' '/$SRB2VER.*Full.zip/ {print \$4}')
            if [ "\$(curl -sLI "\$SRB2ASSETURL" | gawk -F'Last-Modified: ' '{IGNORECASE=1} /Last-Modified/ {gsub("\r","");print \$NF}')" != "\$(date -u -r "\$SRB2BLDROOT/assets/SRB2-Older.zip" +"%a, %d %b %Y %H:%M:%S GMT" 2> /dev/null)" ]; then

                rm -f "\$SRB2BLDROOT/assets/SRB2-Older.zip"
                curl -RL "\$SRB2ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-Older.zip"

            fi

            7z x -y "\$SRB2BLDROOT/assets/SRB2-Older.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"\$BUILD/build/AppDir/usr/games/SRB2"

        else

            SRB2ASSETURL=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print \$4}')
            if [ "\$(curl -sLI "\$SRB2ASSETURL" | gawk -F'Last-Modified: ' '{IGNORECASE=1} /Last-Modified/ {gsub("\r","");print \$NF}')" != "\$(date -u -r "\$SRB2BLDROOT/assets/SRB2-Latest.zip" +"%a, %d %b %Y %H:%M:%S GMT" 2> /dev/null)" ]; then

                rm -f "\$SRB2BLDROOT/assets/SRB2-Latest.zip"
                curl -RL "\$SRB2ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-Latest.zip"

            fi

            7z x -y "\$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"\$BUILD/build/AppDir/usr/games/SRB2"

        fi

        find "\$BUILD/build/AppDir/usr/games/SRB2/models" -type d -exec chmod 755 {} \;

        if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

            if [ "\$IS64" = "64" ]; then

                cp -f "\$BUILD/libs/curl/lib64/libcurl-x64.dll" "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/dll-binaries/x86_64/Old"
                cp -f "\$BUILD/libs/dll-binaries/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/libopenmpt/bin/x86_64/mingw"
                cp -f "\$BUILD/libs/libopenmpt/bin/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/x86_64-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDLMixerX/x86_64-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

            else

                cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/libopenmpt/bin/x86/mingw"
                cp -f "\$BUILD/libs/libopenmpt/bin/x86/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDLMixerX/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

            fi

        fi

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

        curl -RLC - https://github.com/STJr/SRB2/releases/download/SRB2_release_2.1.25/SRB2-v2125-Installer.exe -o "\$SRB2BLDROOT/assets/SRB2-2.1.exe"
        7z x -y "\$SRB2BLDROOT/assets/SRB2-2.1.exe" "*.srb" "*.dta" "*.dat" -o"\$BUILD/build/AppDir/usr/games/SRB2"

        if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

            if [ "\$IS64" = "64" ]; then

                rm -rf "\$BUILD/libs/dll-binaries/x86_64/Old"
                cp -f "\$BUILD/libs/dll-binaries/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/x86_64-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2_mixer/x86_64-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

            else

                rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2_mixer/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

            fi

        fi

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        curl -RLC - https://archive.org/download/srb20ya-v20/SRB2_v206.exe -o "\$SRB2BLDROOT/assets/SRB2-2.0.exe"
        7z x -y "\$SRB2BLDROOT/assets/SRB2-2.0.exe" "*.plr" "*.dta" "*.wpn" "*.srb" -o"\$BUILD/build/AppDir/usr/games/SRB2"

        if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

            7z x -y "\$SRB2BLDROOT/assets/SRB2-2.0.exe" "*.dll" -o"\$BUILD/build/AppDir/usr/lib"

        fi

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        curl -RLC - https://archive.org/download/srb20ya-finaldemo/FinalDemo1094-2008.exe -o "\$SRB2BLDROOT/assets/SRB2FinalDemo.exe"
        7z x -y "\$SRB2BLDROOT/assets/SRB2FinalDemo.exe" "*.plr" "*.dta" "*.wpn" "*.srb" -o"\$BUILD/build/AppDir/usr/games/SRB2"

        if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

            SRB2ASSETURL=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print \$4}')
            if [ "\$(curl -sLI "\$SRB2ASSETURL" | gawk -F'Last-Modified: ' '{IGNORECASE=1} /Last-Modified/ {gsub("\r","");print \$NF}')" != "\$(date -u -r "\$SRB2BLDROOT/assets/SRB2-Latest.zip" +"%a, %d %b %Y %H:%M:%S GMT" 2> /dev/null)" ]; then

                rm -f "\$SRB2BLDROOT/assets/SRB2-Latest.zip"
                curl -RL "\$SRB2ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-Latest.zip"

            fi

            7z x -y "\$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.dll" -o"\$BUILD/build/AppDir/usr/lib"
            mv "\$BUILD/build/AppDir/usr/lib/SDL2_mixer_ext.dll" "\$BUILD/build/AppDir/usr/lib/SDL2_mixer.dll"

        fi


    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        if [ "\$(gawk -F'"|\\\(' '/VERSIONSTRING/ && /v[0-9]/ {gsub(" ","");print \$2}' "\$BUILD/src/doomdef.h" | gawk '!a[\$0]++')" != "$SRB2KARTVER" ]; then

            SRB2KARTASSETURL=\$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases | gawk -F'"' '/$SRB2KARTVER\/.*Installer.exe/ {print \$4}')
            if [ "\$(curl -sLI "\$SRB2KARTASSETURL" | gawk -F'Last-Modified: ' '{IGNORECASE=1} /Last-Modified/ {gsub("\r","");print \$NF}')" != "\$(date -u -r "\$SRB2BLDROOT/assets/SRB2Kart-Older.exe" +"%a, %d %b %Y %H:%M:%S GMT" 2> /dev/null)" ]; then

                rm -f "\$SRB2BLDROOT/assets/SRB2Kart-Older.exe"
                curl -RL "\$SRB2KARTASSETURL" -o "\$SRB2BLDROOT/assets/SRB2Kart-Older.exe"

            fi

            7z x -y "\$SRB2BLDROOT/assets/SRB2Kart-Older.exe" "*.kart" "*.srb" "*.dat" "mdls/*" -o"\$BUILD/build/AppDir/usr/games/SRB2Kart"

        else

            SRB2KARTASSETURL=\$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases/latest | gawk -F'"' '/browser_download_url.*Installer.exe/ {print \$4}')
            if [ "\$(curl -sLI "\$SRB2KARTASSETURL" | gawk -F'Last-Modified: ' '{IGNORECASE=1} /Last-Modified/ {gsub("\r","");print \$NF}')" != "\$(date -u -r "\$SRB2BLDROOT/assets/SRB2Kart-Latest.exe" +"%a, %d %b %Y %H:%M:%S GMT" 2> /dev/null)" ]; then

                rm -f "\$SRB2BLDROOT/assets/SRB2Kart-Latest.exe"
                curl -RL "\$SRB2KARTASSETURL" -o "\$SRB2BLDROOT/assets/SRB2Kart-Latest.exe"

            fi

            7z x -y "\$SRB2BLDROOT/assets/SRB2Kart-Latest.exe" "*.kart" "*.srb" "*.dat" "mdls/*" -o"\$BUILD/build/AppDir/usr/games/SRB2Kart"

        fi

        find "\$BUILD/build/AppDir/usr/games/SRB2Kart/mdls" -type d -exec chmod 755 {} \;

        if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

            if [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

                cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2_mixer/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/openvr/openvr_api.dll" "\$BUILD/build/AppDir/usr/lib"

            elif [ "\$IS64" = "64" ]; then

                cp -f "\$BUILD/libs/curl/lib64/libcurl-x64.dll" "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/dll-binaries/x86_64/Old"
                cp -f "\$BUILD/libs/dll-binaries/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/x86_64-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2_mixer/x86_64-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

            else

                cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2_mixer/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

            fi

        fi

    fi

    # Add -lexecinfo to LDFLAGS for musl based Linux OS to make building successful.
    if [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

#        cat > "\$BUILD/srb2-musl.patch" << MUSL
#--- /src/sdl/i_system.c
#+++ /src/sdl/i_system.c
#@@ -137,11 +137,11 @@ typedef LPVOID (WINAPI *p_MapViewOfFile) (HANDLE, DWORD, DWORD, DWORD, SIZE_T);
# #include <errno.h>
# #endif

#-#if defined (__unix__) || defined(__APPLE__) || defined (UNIXCOMMON)
#-#include <execinfo.h>
#-#include <time.h>
#-#define UNIXBACKTRACE
#-#endif
#+//#if definer (__unix__) || defined(__APPLE__) || defined (UNIXCOMMON)
#+//#include <execinfo.h>
#+//#include <time.h>
#+//#define UNIXBACKTRACE
#+//#endif3

# // Locations for searching the srb2.pk3
# #if defined (__unix__) || defined(__APPLE__) || defined (UNIXCOMMON)
#MUSL
#        patch -t -p1 < "\$BUILD/srb2-musl.patch"
        export LDFLAGS="\$LDFLAGS -lexecinfo"

    fi

    # Patching headers, source code to avoid compilation failure for builds on Windows.
    if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

         sudo sed -i '/#if !defined(_WIN32) && !defined(__CYGWIN__)/,/#endif/d' "/usr/share/mingw-w64/include/_mingw.h"
         sudo sed -i '/#ifndef _WIN32/,/#endif/d' "/usr/share/mingw-w64/include/_mingw_stdarg.h"
         sudo sed -i '/#ifndef _WIN32/,/#endif/d' "/usr/share/mingw-w64/include/sys/types.h"
         sudo sed -i '/#ifndef _WIN32/,/#endif/d' "/usr/share/mingw-w64/include/sys/stat.h"
         sed -i '/#include "exchndl.h"/d' "$BUILD/src/sdl/i_main.c"
         sed -i '/ExcHndlInit()/d' "$BUILD/src/sdl/i_main.c"

         # Linking windres and dllwrap for compiling specific builds.
         if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

             sudo ln -sf /usr/bin/i686-w64-mingw32-windres /usr/bin/windres
             sudo ln -sf /usr/bin/i686-w64-mingw32-dllwrap /usr/bin/dllwrap

         else

             sudo ln -sf "/usr/bin/\$ARCH-w64-mingw32-windres" /usr/bin/windres
             sudo ln -sf "/usr/bin/\$ARCH-w64-mingw32-dllwrap" /usr/bin/dllwrap

         fi

    fi

    # Modify the game's configuration and assets directory names to avoid conflicts between installed builds.
    if [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ]; then

         sed -i 's|/usr/local/share/games/SRB2|/usr/local/share/games/SRB2UncappedPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2|/usr/local/games/SRB2UncappedPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2|/usr/share/games/SRB2UncappedPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2|/usr/games/SRB2UncappedPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\srb2|c:\\\\\\\srb2uncappedplus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\games\\\\\\\srb2|c:\\\\\\\games\\\\\\\srb2uncappedplus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|\\\\\\\games\\\\\\\srb2|\\\\\\\games\\\\\\\srb2uncappedplus|' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ]; then

         sed -i 's|/usr/local/share/games/SRB2|/usr/local/share/games/SRB2NetPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2|/usr/local/games/SRB2NetPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2|/usr/share/games/SRB2NetPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2|/usr/games/SRB2NetPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\srb2|c:\\\\\\\srb2netplus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\games\\\\\\\srb2|c:\\\\\\\games\\\\\\\srb2netplus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|\\\\\\\games\\\\\\\srb2|\\\\\\\games\\\\\\\srb2netplus|' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

         sed -i 's|/usr/local/share/games/SRB2|/usr/local/share/games/SRB2VR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2|/usr/local/games/SRB2VR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2|/usr/share/games/SRB2VR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2|/usr/games/SRB2VR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\srb2|c:\\\\\\\srb2vr|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\games\\\\\\\srb2|c:\\\\\\\games\\\\\\\srb2vr|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|\\\\\\\games\\\\\\\srb2|\\\\\\\games\\\\\\\srb2vr|' "\$BUILD/src/sdl/i_system.c"
         gawk -i inplace '{gsub("../libs/openvr/libopenvr_api.so","\$(shell find /usr/lib64 /usr/lib /usr/local/lib64 /usr/local/lib -name libopenvr_api.so 2> /dev/null | head -n1)");print}' "\$BUILD/src/Makefile.d/nix.mk"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2_21"/#define DEFAULTDIR ".srb2_2.1"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2_21"/#define DEFAULTDIR "srb2_2.1"/' "\$BUILD/src/doomdef.h"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2"/#define DEFAULTDIR ".srb2_2.0"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2"/#define DEFAULTDIR "srb2_2.0"/' "\$BUILD/src/doomdef.h"
         sed -i 's|/usr/local/share/games/srb2|/usr/local/share/games/SRB2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/srb2|/usr/local/games/SRB2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/srb2|/usr/share/games/SRB2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/srb2|/usr/games/SRB2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\srb2|c:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|d:\\\\\\\srb2|d:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|e:\\\\\\\srb2|e:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|f:\\\\\\\srb2|f:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|g:\\\\\\\srb2|g:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|h:\\\\\\\srb2|h:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|i:\\\\\\\srb2|i:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\games\\\\\\\srb2|c:\\\\\\\games\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|\\\\\\\games\\\\\\\srb2|\\\\\\\games\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         gawk -i inplace '{gsub("\\\\$\\\(CC\\\) \\\\$\\\(CFLAGS\\\) -MM \\\*.c","\\\$(CC) \\\$(CFLAGS) -MM \\\$(wildcard *.c)");print}' "\$BUILD/src/Makefile"
         gawk -i inplace '{gsub("\\\\$\\\(INTERFACE\\\)/\\\*.c","\\\$(wildcard \\\$(INTERFACE)/*.c)");print}' "\$BUILD/src/Makefile"
         gawk -i inplace '{gsub("hardware/\\\*.c","\\\$(wildcard hardware/*.c)");print}' "\$BUILD/src/Makefile"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

         sed -i 's/#define DEFAULTDIR ".srb21094"/#define DEFAULTDIR ".srb2fd"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb21094"/#define DEFAULTDIR "srb2fd"/' "\$BUILD/src/doomdef.h"
         sed -i 's|/usr/local/games/SRB2|/usr/local/share/games/SRB2FinalDemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2|/usr/games/SRB2FinalDemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\srb2|c:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|d:\\\\\\\srb2|d:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|e:\\\\\\\srb2|e:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|f:\\\\\\\srb2|f:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|g:\\\\\\\srb2|g:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|h:\\\\\\\srb2|h:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|i:\\\\\\\srb2|i:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\games\\\\\\\srb2|c:\\\\\\\games\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|\\\\\\\games\\\\\\\srb2|\\\\\\\games\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         gawk -i inplace '{gsub("\\\\$\\\(CC\\\) \\\\$\\\(CFLAGS\\\) -MM \\\*.c","\\\$(CC) \\\$(CFLAGS) -MM \\\$(wildcard *.c)");print}' "\$BUILD/src/makefile"
         gawk -i inplace '{gsub("\\\\$\\\(INTERFACE\\\)/\\\*.c","\\\$(wildcard \\\$(INTERFACE)/*.c)");print}' "\$BUILD/src/makefile"
         gawk -i inplace '{gsub("hardware/\\\*.c","\\\$(wildcard hardware/*.c)");print}' "\$BUILD/src/makefile"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2"/#define DEFAULTDIR ".srb2persona"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2"/#define DEFAULTDIR "srb2persona"/' "\$BUILD/src/doomdef.h"
         sed -i 's|/usr/local/share/games/SRB2|/usr/local/share/games/SRB2Persona|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2|/usr/local/games/SRB2Persona|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2|/usr/share/games/SRB2Persona|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2|/usr/games/SRB2Persona|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\srb2|c:\\\\\\\srb2persona|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\games\\\\\\\srb2|c:\\\\\\\games\\\\\\\srb2persona|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|\\\\\\\games\\\\\\\srb2|\\\\\\\games\\\\\\\srb2persona|' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

         sed -i 's|/usr/local/share/games/SRB2Kart|/usr/local/share/games/SRB2KartMoeMansion|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2Kart|/usr/local/games/SRB2KartMoeMansion|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2Kart|/usr/share/games/SRB2KartMoeMansion|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2Kart|/usr/games/SRB2KartMoeMansion|' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

         sed -i 's|/usr/local/share/games/SRB2Kart|/usr/local/share/games/SRB2KartVR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2Kart|/usr/local/games/SRB2KartVR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2Kart|/usr/share/games/SRB2KartVR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2Kart|/usr/games/SRB2KartVR|' "\$BUILD/src/sdl/i_system.c"
         gawk -i inplace '{gsub("../libs/openvr/libopenvr_api.so","\$(shell find /usr/lib64 /usr/lib /usr/local/lib64 /usr/local/lib -name libopenvr_api.so 2> /dev/null | head -n1)");print}' "\$BUILD/src/sdl/Makefile.cfg"

    fi

if [ "\$APPIMAGE" = 1 ]; then

    # Display content of Makefile for a good view of available compilation flags.
    if [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        gawk '/^#/,/ / {print}' "\$BUILD/src/makefile"

    else

        gawk '/^#/,/ / {print}' "\$BUILD/src/"*akefile

    fi

    # Add compilation flags.
    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Please enter $BUILDNAME's space separated compilation flags and then press enter, or just press enter to begin compiling. Default command and flags for compilation:"

        if [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 NONX86=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        else

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        fi

    \$PRINTF "$PROMPT\n%s\e[0m" "> "
    read -r CONF

    if [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /LINUX=1|LINUX64=1|MINGW=1|MINGW64=1|NONX86=1|UNIX=1|UNIXCOMMON=1|FREEBSD=1|CYGWIN32=1|SOLARIS=1|WATTCP=1/) {print substr(\$0, RSTART, RLENGTH)}')" ]; then

        CONF=\$(\$PRINTF "%s\n" "\$CONF" | gawk '{gsub("LINUX=1|LINUX64=1|MINGW=1|MINGW64=1|NONX86=1|UNIX=1|UNIXCOMMON=1|FREEBSD=1|CYGWIN32=1|SOLARIS=1|WATTCP=1","");print}')
        \$PRINTF "$FAILURE\n%s\n\e[0m" "Entering OS flags like LINUX64=1, MINGW=1 or FREEBSD=1 is not supported on this script. Exiting."
        exit

    fi

    # Download libSDL2_mixerX's source code, build and install it.
    if [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /HAVE_MIXERX=1/) {print substr(\$0, RSTART, RLENGTH)}')" ]; then

        if [ ! -d "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libSDL2_mixerX's source code. Please wait..."
            git clone https://github.com/WohlSoft/SDL-Mixer-X.git --recursive --branch "$LNXSDL2MIXERXVER" "\$SRB2BLDROOT/libraries/libsdl2-mixerx"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libSDL2_mixerX's source code. Please wait..."
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q "$LNXSDL2MIXERXVER"

        fi

        \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libSDL2_mixerX. Please wait..."
        mkdir -p "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
        cd "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build" || exit
        cmake .. -DDOWNLOAD_AUDIO_CODECS_DEPENDENCY=OFF -DAUDIO_CODECS_BUILD_LOCAL_SDL2=OFF -DUSE_SYSTEM_SDL2=ON -DSDL_MIXER_X_STATIC=OFF -DUSE_FLAC=OFF -DUSE_MP3_MAD=OFF -DUSE_MP3_MPG123=OFF -DCMAKE_INSTALL_PREFIX=/usr
        CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
        sudo make -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build" install
        cd "\$BUILD" || exit

    fi

    # Download DiscordRPC source code, build and install it.
    if [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /HAVE_DISCORDRPC=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && ([ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]); then

        if [ ! -d "\$SRB2BLDROOT/libraries/discord-rpc/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading DiscordRPC's source code. Please wait..."
            git clone https://github.com/discord/discord-rpc.git --recursive --branch "$LNXDISCORDRPCVER" "\$SRB2BLDROOT/libraries/discord-rpc"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up DiscordRPC's source code. Please wait..."
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" checkout -q "$LNXDISCORDRPCVER"
        fi

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing DiscordRPC. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/discord-rpc/build"
            cd "\$SRB2BLDROOT/libraries/discord-rpc/build" || exit
            cmake .. -DBUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/discord-rpc/build"
            sudo make -C "\$SRB2BLDROOT/libraries/discord-rpc/build" install
            cd "\$BUILD" || exit

    fi

    # Download libopenvr's source code, build and install it.
    if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        if [ ! -d "\$SRB2BLDROOT/libraries/libopenvr/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libopenvr's source code. Please wait..."
            git clone https://github.com/ValveSoftware/openvr.git --recursive --branch "v$LNXOPENVRVER" "\$SRB2BLDROOT/libraries/libopenvr"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libopenvr. Please wait..."
            git -C "\$SRB2BLDROOT/libraries/libopenvr" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libopenvr" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libopenvr" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libopenvr" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/libopenvr" checkout -q "v$LNXOPENVRVER"

        fi

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libopenvr. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/libopenvr/build"
            cp -rf "\$SRB2BLDROOT/libraries/libopenvr/src/vrcommon" "\$SRB2BLDROOT/libraries/libopenvr/src/vrcore"
            cd "\$SRB2BLDROOT/libraries/libopenvr/build" || exit
            cmake .. -DBUILD_UNIVERSAL=OFF -DBUILD_SHARED=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libopenvr/build"
            sudo make -C "\$SRB2BLDROOT/libraries/libopenvr/build" install
            cd "\$BUILD" || exit

    fi

    # Temporarily disabling libpng12 to avoid compiling errors for SRB2 Final Demo.
    if [ -f /usr/local/lib/libpng12.so ] && [ "\$BUILD" != "\$BUILDPATH/srb2-2.0" ]; then

        sudo -E stow -D --adopt libpng12-lib32

    fi

    # Compile the game's source code.
    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building $BUILDNAME's source code. Please wait..."
    if [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

            CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

        else

            CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

        fi

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        mkdir -p "\$BUILD/objs/Linux/SDL/Release"

        if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

            CC="$GCCVER" C_INCLUDE_PATH="/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 \$CONF

        else

            CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 NONX86=1 \$CONF

        fi

    else

        # Running comptime.sh before compiling to avoid errors.
        cd "\$BUILD/src" || exit
        gawk -i inplace '{gsub("\r","");print}' ../comptime.sh
        bash ../comptime.sh

        if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

            CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

        else

            CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

        fi

        cd "\$BUILD" || exit

    fi

    # Renabling libpng12.
    if [ -d /usr/local/stow/libpng12-lib32 ]; then

        sudo -E stow --adopt libpng12-lib32

    fi

    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Copying $BUILDNAME's binary, libraries, icons, desktop file and AppRun to AppDir. Please wait..."

    # Copy compiled binary to AppDir.
    if [ -f "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/lsdl2srb2" ]; then

        cp -rf "\$BUILD/bin/lsdl2srb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux\$IS64/Release/srb2legacy" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/srb2legacy" "\$BUILD/build/AppDir/usr/bin/lsdl2srb2"

    elif [ -f "\$BUILD/bin/srb2legacy" ]; then

        cp -rf "\$BUILD/bin/srb2legacy" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux\$IS64/Release/lsdlsrb2" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/lsdlsrb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/lsdlsrb2" ]; then

        cp -rf "\$BUILD/bin/lsdlsrb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux/Release/lsdl2srb2" ]; then

        cp -rf "\$BUILD/bin/Linux/Release/lsdl2srb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2kart" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2kart" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/lsdl2srb2kart" ]; then

        cp -rf "\$BUILD/bin/lsdl2srb2kart" "\$BUILD/build/AppDir/usr/bin"

    fi

    # Create desktop file.
    COMREV=\$(git -C "\$BUILD" rev-parse --short HEAD)

    if [ "\$BUILD" = "\$BUILDPATH/srb2" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Uncapped PLUS
Comment=Modified open source 3D Sonic platformer with improved framerate and additional features
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2UncappedPlus
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 NetPlus
Comment=Modified open source 3D Sonic platformer with rollback netcode
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2NetPlus
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 VR
Comment=Modified open source 3D Sonic VR platformer with improved framerate and additional features
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;OpenVR;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRBVR
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software

[Desktop Action OpenVR]
Name=OpenVR runtime
Exec=AppRun -openvr -win
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 v2.1 Legacy
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2-2.1-Legacy
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 v2.0
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2-2.0
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Final Demo
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2FinalDemo
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Persona
Comment=Modified open source 3D Sonic game with Persona gameplay
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;rpg;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2Persona
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Kart
Comment=Modified open source 3D Sonic game with kart racing gameplay
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2Kart
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Kart Moe Mansion
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2KartMoeMansion
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Kart VR
Comment=Modified open source 3D Sonic game with VR kart racing gameplay, improved framerate and additional features
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;
Actions=OpenGL;Software;OpenVR;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2KartVR
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software

[Desktop Action OpenVR]
Name=OpenVR runtime
Exec=AppRun -openvr -win
DESKTOP

    fi

    # Get app icon.
    convert "\$BUILD/src/win32/Srb2win.ico" -resize 64x64\! -filter lanczos -alpha on -background none -flatten "\$BUILD/build/icon.png"
    ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
    mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"
    cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"

    # Create game entrypoint and copy libraries to AppDir.
#DEPS="
#libFLAC.so.[0-9]
#libSDL2-2.0.so.[0-9]
#libSDL2_mixer-2.0.so.[0-9]
#libSDL_mixer-1.2.so.[0-9]
#libSDL2_mixer_ext.so.[0-9]
#libdiscord-rpc.so
#libfluidsynth.so.[0-9]
#libgme.so.[0-9]
#libjack.so.[0-9]
#libmad.so.[0-9]
#libmodplug.so.[0-9]
#libmpg123.so.[0-9]
#libogg.so.[0-9]
#libopenmpt.so.[0-9]
#libopenvr_api.so
#libopus.so.[0-9]
#libopusfile.so.[0-9]
#libpng.so.[0-9]
#libpng12.so.[0-9]
#libpulse-simple.so.[0-9]
#libpulse.so.[0-9]
#libpulsecommon-[0-9].[0-9].so.[0-9]
#libreadline.so.[0-9]
#libsndio.so.[0-9]
#libsndfile.so.[0-9]
#libtinfo.so.[0-9]
#libvorbis.so.[0-9]
#libvorbisenc.so.[0-9]
#libvorbisfile.so.[0-9]
#libwrap.so.[0-9]
#"

    cat > "\$BUILD/build/AppDir/AppRun" << 'APPRUN'
#!/bin/sh

export HERE="\$(dirname "\$(readlink -f "\$0")")"

export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:\$HERE/usr/lib"

APPRUN

    if [ "\$BUILD" = "\$BUILDPATH/srb2" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export SRB2WADDIR="\$HERE/usr/games/SRB2"

exec "\$HERE/usr/bin/lsdl2srb2" "\$@"
APPRUNBIN

        cp -Lf \$(ldd "\$BUILD/build/AppDir/usr/bin/lsdl2srb2" | gawk '{print \$3}' | gawk '!/libc.so|libdl.so|ld-|libstdc++|libgcc_s.so|libm.so|libpthread.so|libresolv.so|librt.so|libz.so|libcom_err.so/ {print}') "\$BUILD/build/AppDir/usr/lib"

#        cp -Lf \$(for l in \$DEPS; do find /lib* /usr/lib* -name \$l; done) "\$BUILD/build/AppDir/usr/lib"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export SRB2WADDIR="\$HERE/usr/games/SRB2"

exec "\$HERE/usr/bin/lsdlsrb2" "\$@"
APPRUNBIN

        cp -Lf \$(ldd "\$BUILD/build/AppDir/usr/bin/lsdlsrb2" | gawk '{print \$3}' | gawk '!/libc.so|libdl.so|ld-|libstdc++|libgcc_s.so|libm.so|libpthread.so|libresolv.so|librt.so|libz.so|libcom_err.so/ {print}') "\$BUILD/build/AppDir/usr/lib"

#        cp -Lf \$(for l in \$DEPS; do find /lib* /usr/lib* -name \$l; done) "\$BUILD/build/AppDir/usr/lib"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export SRB2WADDIR="\$HERE/usr/games/SRB2Kart"

exec "\$HERE/usr/bin/lsdl2srb2kart" "\$@"
APPRUNBIN

        cp -Lf \$(ldd "\$BUILD/build/AppDir/usr/bin/lsdl2srb2kart" | gawk '{print \$3}' | gawk '!/libc.so|libdl.so|ld-|libstdc++|libgcc_s.so|libm.so|libpthread.so|libresolv.so|librt.so|libz.so|libcom_err.so/ {print}') "\$BUILD/build/AppDir/usr/lib"

#        cp -Lf \$(for l in \$DEPS; do find /lib* /usr/lib* -name \$l; done) "\$BUILD/build/AppDir/usr/lib"

    fi

    chmod +x "\$BUILD/build/AppDir/AppRun"

    # Download appimagetool.
    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building $BUILDNAME's AppImage. Please wait..."
    ISARM=\$(\$PRINTF "%s\n" "\$ARCH" | gawk 'match(\$0, /arm/) {print substr(\$0, RSTART, RLENGTH)}')
    IS64=\$(getconf LONG_BIT)

    if [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        if [ "\$ARCH" = "x86_64" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-i686.AppImage" -o "\$BUILD/appimagetool"

        elif [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-i686.AppImage" -o "\$BUILD/appimagetool"

        elif ([ -n "\$ISARM" ] && [ "\$IS64" = "64" ]) || [ "\$ARCH" = "aarch64" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-armhf.AppImage" -o "\$BUILD/appimagetool"

        elif [ -n "\$ISARM" ] && [ "\$IS64" = "32" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-armhf.AppImage" -o "\$BUILD/appimagetool"

        fi

    else

        if [ "\$ARCH" = "x86_64" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" -o "\$BUILD/appimagetool"

        elif [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-i686.AppImage" -o "\$BUILD/appimagetool"

        elif ([ -n "\$ISARM" ] && [ "\$IS64" = "64" ]) || [ "\$ARCH" = "aarch64" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage" -o "\$BUILD/appimagetool"

        elif [ -n "\$ISARM" ] && [ "\$IS64" = "32" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-armhf.AppImage" -o "\$BUILD/appimagetool"

        fi

    fi

    # Preparing appimagetool and removing libraries in AppDir that can throw errors when running AppImage.
    chmod +x "\$BUILD/appimagetool"

    cd "\$BUILD/build/AppDir" || exit

    # Create symlinks that are specific for AppDir's structure.
    ln -sf "icon.png" ".DirIcon"
    ln -sf "usr/share/icons/hicolor/\$ICONSIZE/apps/icon.png" "icon.png"
    ln -sf "usr/share/applications/app.desktop" "app.desktop"
    cd "\$BUILD/build/AppDir/usr" || exit
    ln -sf "lib" "lib32"
    cd "\$BUILD" || exit

else

    sudo_ping

# Upgrade build. Making sure, that there are only used compilation flags.
if [ -n "\$UPGRADE" ]; then

    export CONF="\$(gawk '/---------------/ {gsub("---------------","");getline;print}' "\$SRB2BLDROOT/installed/\$UPGRADE")"

# Otherwise set compilation flags, build and install as usual.
else

    # Display content of Makefile for a good view of available compilation flags.
    if [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        gawk '/^#/,/ / {print}' "\$BUILD/src/makefile"

    else

        gawk '/^#/,/ / {print}' "\$BUILD/src/"*akefile

    fi

    # Add compilation flags.
    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Please enter $BUILDNAME's space separated compilation flags and then press enter, or just press enter to begin compiling. Default command and flags for compilation:"

    if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then
        if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="i686-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="\$ARCH-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="i686-w64-mingw32-$MINGWOLDVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="\$ARCH-w64-mingw32-$MINGWOLDVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="i686-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="\$ARCH-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="i686-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="\$ARCH-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        else

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="\$ARCH-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="\$ARCH-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        fi

    elif [ "\$OS" = "Linux" ]; then

        if [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 NONX86=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        else

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        fi

    fi

     \$PRINTF "$PROMPT\n%s\e[0m" "> "
     read -r CONF

fi

    if [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /LINUX=1|LINUX64=1|MINGW=1|MINGW64=1|NONX86=1|UNIX=1|UNIXCOMMON=1|FREEBSD=1|CYGWIN32=1|SOLARIS=1|WATTCP=1/) {print substr(\$0, RSTART, RLENGTH)}')" ]; then

        CONF=\$(\$PRINTF "%s\n" "\$CONF" | gawk '{gsub("LINUX=1|LINUX64=1|MINGW=1|MINGW64=1|NONX86=1|UNIX=1|UNIXCOMMON=1|FREEBSD=1|CYGWIN32=1|SOLARIS=1|WATTCP=1","");print}')
        \$PRINTF "$FAILURE\n%s\n\e[0m" "Entering OS flags like LINUX64=1, MINGW=1 or FREEBSD=1 is not supported on this script. Exiting."
        exit

    fi

    # Download libpng12's source code, build and install it.
    if [ "\$OS" = "Linux" ] && [ -z "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /NOPNG=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        if [ ! -d "\$SRB2BLDROOT/libraries/libpng12/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libpng12's source code. Please wait..."
            git clone git://git.code.sf.net/p/libpng/code.git --recursive --branch "$LNXPNG12VER" "\$SRB2BLDROOT/libraries/libpng12"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libpng12. Please wait..."
            git -C "\$SRB2BLDROOT/libraries/libpng12" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libpng12" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libpng12" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libpng12" pull --recurse-submodules --rebase
            git -C "\$SRB2BLDROOT/libraries/libpng12" checkout -q "$LNXPNG12VER"

        fi

        if [ ! -f /usr/local/lib/libpng12.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libpng12/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libpng12" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libpng12/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libpng12. Please wait..."
            cd "\$SRB2BLDROOT/libraries/libpng12" || exit
            ./configure --prefix=/usr/local/stow/libpng12-lib32
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libpng12"
            sudo make -C "\$SRB2BLDROOT/libraries/libpng12" install
            sudo -E stow -v --adopt libpng12-lib32
            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libpng12" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libpng12/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download libSDL2_mixerX's source code, build and install it.
    if [ "\$OS" = "Linux" ] && [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /HAVE_MIXERX=1/) {print substr(\$0, RSTART, RLENGTH)}')" ]; then

        if [ ! -d "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libSDL2_mixerX's source code. Please wait..."
            git clone https://github.com/WohlSoft/SDL-Mixer-X.git --recursive --branch "$LNXSDL2MIXERXVER" "\$SRB2BLDROOT/libraries/libsdl2-mixerx"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libSDL2_mixerX's source code. Please wait..."
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q "$LNXSDL2MIXERXVER"

        fi

        if [ ! -f /usr/local/lib/libSDL2_mixer_ext.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libSDL2_mixerX. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
            cd "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
            cmake .. -DDOWNLOAD_AUDIO_CODECS_DEPENDENCY=OFF -DAUDIO_CODECS_BUILD_LOCAL_SDL2=OFF -DUSE_SYSTEM_SDL2=ON -DSDL_MIXER_X_STATIC=OFF -DUSE_FLAC=OFF -DUSE_MP3_MAD=OFF -DUSE_MP3_MPG123=OFF -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libsdl2-mixerx
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
            sudo make -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build" install
            sudo -E stow -v --adopt libsdl2-mixerx
            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download libopenmpt's source code, build and install it for musl based Linux OS.
    if [ -z "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /NOOPENMPT=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

        if [ ! -d "\$SRB2BLDROOT/libraries/libopenmpt/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libopenmpt's source code. Please wait..."
            git clone https://github.com/OpenMPT/openmpt.git --recursive --branch "$LNXOPENMPTVER" "\$SRB2BLDROOT/libraries/libopenmpt"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libopenmpt's source code. Please wait..."
            git -C "\$SRB2BLDROOT/libraries/libopenmpt" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libopenmpt" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libopenmpt" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libopenmpt" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/libopenmpt" checkout -q "$LNXOPENMPTVER"

        fi

        if [ ! -f /usr/local/lib/libopenmpt.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libopenmpt/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libopenmpt" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libopenmpt/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libopenmpt. Please wait..."
            gawk -i inplace '{gsub("DYNLINK=1","DYNLINK=0") gsub("STATIC_LIB=1","STATIC_LIB=0") gsub("EXAMPLES=1","EXAMPLES=0") gsub("OPENMPT123=1","OPENMPT123=0") gsub("TEST=1","TEST=0");print}' "\$SRB2BLDROOT/libraries/libopenmpt/Makefile"
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libopenmpt" NO_PORTAUDIO=1 NO_PORTAUDIOCPP=1 NO_SNDFILE=1 NO_FLAC=1
            sudo make -C "\$SRB2BLDROOT/libraries/libopenmpt" PREFIX=/usr/local/stow/libopenmpt install
            sudo -E stow -v --adopt libopenmpt
            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libopenmpt" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libopenmpt/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download libgme's source code, build and install it.
    if [ -z "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /NOGME=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

        if [ ! -d "\$SRB2BLDROOT/libraries/libgme/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libgme's source code. Please wait..."
            git clone https://bitbucket.org/mpyne/game-music-emu.git --recursive --branch "$LNXGMEVER" "\$SRB2BLDROOT/libraries/libgme"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libgme's source code. Please wait..."
            git -C "\$SRB2BLDROOT/libraries/libgme" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libgme" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libgme" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libgme" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/libgme" checkout -q "$LNXGMEVER"

        fi

        if [ ! -f /usr/local/lib/libgme.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libgme/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libgme" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libgme/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libgme. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/libgme/build"
            cd "\$SRB2BLDROOT/libraries/libgme/build"
            gawk -i inplace 'BEGIN { del=0 } /4.1 had poor support for symbol visibility/ { del=2 } del<=0 { print } /endif()/ { del -= 1 }' "\$SRB2BLDROOT/libraries/libgme/CMakeLists.txt"
            cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libgme
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libgme/build"
            sudo make -C "\$SRB2BLDROOT/libraries/libgme/build" install
            sudo -E stow -v --adopt libgme
            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libgme" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libgme/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download DiscordRPC source code, build and install it.
    if [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /HAVE_DISCORDRPC=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && ([ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]); then

        if [ ! -d "\$SRB2BLDROOT/libraries/discord-rpc/.git" ]; then

              \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading DiscordRPC's source code. Please wait..."
              git clone https://github.com/discord/discord-rpc.git --recursive --branch "$LNXDISCORDRPCVER" "\$SRB2BLDROOT/libraries/discord-rpc"

        else

              \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up DiscordRPC's source code. Please wait..."
              git -C "\$SRB2BLDROOT/libraries/discord-rpc" clean -qdfx -e .comrev
              git -C "\$SRB2BLDROOT/libraries/discord-rpc" reset -q --hard
              git -C "\$SRB2BLDROOT/libraries/discord-rpc" checkout -q master
              git -C "\$SRB2BLDROOT/libraries/discord-rpc" pull --recurse-submodules --rebase --autostash
              git -C "\$SRB2BLDROOT/libraries/discord-rpc" checkout -q "$LNXDISCORDRPCVER"

        fi

        \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing DiscordRPC. Please wait..."
        mkdir -p "\$SRB2BLDROOT/libraries/discord-rpc/build"
        cd "\$SRB2BLDROOT/libraries/discord-rpc/build" || exit

        if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

            DISCORDRPCURL="\$(curl -s https://api.github.com/repos/discord/discord-rpc/releases/latest | gawk -F'"' '/browser_download_url.*discord-rpc-win.zip/ {print \$4}')"
            curl -RL "\$DISCORDRPCURL" > "\$SRB2BLDROOT/libraries/discord-rpc/discord-rpc-win.zip"

            if ([ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ]) || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

                7z e -y "\$SRB2BLDROOT/libraries/discord-rpc/discord-rpc-win.zip" "discord-rpc/win32-dynamic/bin/discord-rpc.dll" -o"\$BUILD/build/AppDir/usr/lib"

            else

                7z e -y "\$SRB2BLDROOT/libraries/discord-rpc/discord-rpc-win.zip" "discord-rpc/win64-dynamic/bin/discord-rpc.dll" -o"\$BUILD/build/AppDir/usr/lib"

            fi

        elif [ "\$OS" = "Linux" ] && ([ ! -f /usr/local/lib/libdiscord-rpc.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/discord-rpc/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/discord-rpc" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/discord-rpc/.comrev" 2> /dev/null)" ])); then

            cmake .. -DBUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local/stow/discord-rpc
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/discord-rpc/build"
            sudo make -C "\$SRB2BLDROOT/libraries/discord-rpc/build" install
            sudo -E stow -v --adopt discord-rpc
            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/discord-rpc" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/discord-rpc/.comrev"

        fi

        cd "\$BUILD" || exit

    fi

    # Download libopenvr's source code, build and install it.
    if [ "\$OS" = "Linux" ] && ([ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]); then

        if [ ! -d "\$SRB2BLDROOT/libraries/libopenvr/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libopenvr's source code. Please wait..."
            git clone https://github.com/ValveSoftware/openvr.git --recursive --branch "v$LNXOPENVRVER" "\$SRB2BLDROOT/libraries/libopenvr"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libopenvr. Please wait..."
            git -C "\$SRB2BLDROOT/libraries/libopenvr" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libopenvr" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libopenvr" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libopenvr" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/libopenvr" checkout -q "v$LNXOPENVRVER"

        fi

        if [ ! -f /usr/local/lib/libopenvr_api.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libopenvr/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libopenvr" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libopenvr/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libopenvr. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/libopenvr/build"
            cp -rf "\$SRB2BLDROOT/libraries/libopenvr/src/vrcommon" "\$SRB2BLDROOT/libraries/libopenvr/src/vrcore"
            cd "\$SRB2BLDROOT/libraries/libopenvr/build" || exit
            cmake .. -DBUILD_UNIVERSAL=OFF -DBUILD_SHARED=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libopenvr
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libopenvr/build"
            sudo make -C "\$SRB2BLDROOT/libraries/libopenvr/build" install
            sudo -E stow -v --adopt libopenvr
            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libopenvr" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libopenvr/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download and install FMOD for compiling old SRB2 versions on Windows.
    if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ] && ([ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]); then

        \$PRINTF "$MESSAGE\n%s\n\e[0m" "Installing FMOD to build $BUILDNAME. Please wait..."
        sudo mkdir -p "/usr/include/FMOD"
        curl -kRLOC - "https://zdoom.org/files/fmod/$LNXFMODVER.tar.gz"
        sudo tar xvf "$LNXFMODVER.tar.gz" --wildcards --strip-components=3 -C "/usr/lib" "$LNXFMODVER/api/libfmod-"*.so
        sudo tar xvf "$LNXFMODVER.tar.gz" --strip-components=3 -C "/usr/include/FMOD" "$LNXFMODVER/api/inc"

    fi

    # Compile the game's source code.
    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building $BUILDNAME's source code. Please wait..."

if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

        if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

            # Running comptime.sh before compiling to avoid errors.
            cd "\$BUILD/src" || exit
            gawk -i inplace '{gsub("\r","");print}' ../comptime.sh
            bash ../comptime.sh

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="i686-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF
                i686-w64-mingw32-objdump -x "\$BUILD/bin/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            else

                CC="\$ARCH-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF
                \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/srb2win\$IS64.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            fi

            cd "\$BUILD" || exit

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="i686-w64-mingw32-$MINGWOLDVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF
                i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            else

                CC="\$ARCH-w64-mingw32-$MINGWOLDVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF
                \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            mkdir -p "\$BUILD/objs/Mingw/SDL/Release"
            mkdir -p "\$BUILD/objs/Mingw/Release"

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="i686-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 \$CONF
                i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2sdl.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            else

                CC="\$ARCH-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 \$CONF
                \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="i686-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF
                i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            else

                CC="\$ARCH-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF
                \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            fi

        else

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                # Running comptime.sh before compiling to avoid errors.
                cd "\$BUILD/src" || exit
                gawk -i inplace '{gsub("\r","");print}' ../comptime.sh
                bash ../comptime.sh

                if [ "\$IS64" = "64" ]; then

                    CC="x86_64-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/x86_64-w64-mingw32/include/.:/usr/include/x86_64-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW64=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

                else

                    CC="i686-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

                fi

                # Making list of game's dependencies to copy them to game directory on Windows later.
                if [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

                    if [ "\$IS64" = "64" ]; then

                        x86_64-w64-mingw32-objdump -x "\$BUILD/bin/Mingw64/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    else

                        i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    fi

                elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

                    if [ "\$IS64" = "64" ]; then

                        x86_64-w64-mingw32-objdump -x "\$BUILD/bin/Mingw64/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    else

                        i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    fi

                else

                    if [ "\$IS64" = "64" ]; then

                        x86_64-w64-mingw32-objdump -x "\$BUILD/bin/srb2win64.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    else

                        i686-w64-mingw32-objdump -x "\$BUILD/bin/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    fi

                fi

                cd "\$BUILD" || exit

            else

                # Running comptime.sh before compiling to avoid errors.
                cd "\$BUILD/src" || exit
                gawk -i inplace '{gsub("\r","");print}' ../comptime.sh
                bash ../comptime.sh

                CC="\$ARCH-w64-mingw32-$MINGWVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 SDL=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

                # Making list of game's dependencies to copy them to game directory on Windows later.
                if [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

                    \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

                    \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                else

                    \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/srb2win\$IS64.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                fi

                cd "\$BUILD" || exit

            fi

        fi

     elif [ "\$OS" = "Linux" ]; then

        # Temporarily disabling libpng12 to avoid compiling errors for SRB2 Final Demo.
        if [ -f /usr/local/lib/libpng12.so ] && [ "\$BUILD" != "\$BUILDPATH/srb2-2.0" ]; then

            sudo -E stow -D --adopt libpng12-lib32

        fi

        if [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

            else

                CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            mkdir -p "\$BUILD/objs/Linux/SDL/Release"

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="$GCCVER" C_INCLUDE_PATH="/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 \$CONF

            else

                CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 NONX86=1 \$CONF

            fi

        else

            # Running comptime.sh before compiling to avoid errors.
            cd "\$BUILD/src" || exit
            gawk -i inplace '{gsub("\r","");print}' ../comptime.sh
            bash ../comptime.sh

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

            else

                CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

            fi

            cd "\$BUILD" || exit

        fi

        # Renabling libpng12.
        if [ -d /usr/local/stow/libpng12-lib32 ]; then

            sudo -E stow --adopt libpng12-lib32

        fi

    fi

    # Saving configuration flags for future upgrades.
    \$PRINTF "%s\n" "\$CONF" > "\$BUILD/conf"

    # Create desktop file.
    COMREV=\$(git -C "\$BUILD" rev-parse --short HEAD)

    if [ "\$BUILD" = "\$BUILDPATH/srb2" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 (Software)
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=srb2
Exec=srb2 -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 \\\(Software\\\)","Name=Sonic Robo Blast 2 (OpenGL)") || gsub("Exec=srb2 -software","Exec=srb2 -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2uncappedplus-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Uncapped PLUS (Software)
Comment=Modified open source 3D Sonic platformer with improved framerate and additional features
Icon=srb2uncappedplus
Exec=srb2ucp -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2uncappedplus-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2uncappedplus-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Uncapped PLUS \\\(Software\\\)","Name=Sonic Robo Blast 2 Uncapped PLUS (OpenGL)") || gsub("Exec=srb2ucp -software","Exec=srb2ucp -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2uncappedplus-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2netplus-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 NetPlus (Software)
Comment=Modified open source 3D Sonic platformer with rollback netcode
Icon=srb2netplus
Exec=srb2np -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2netplus-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2netplus-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 NetPlus \\\(Software\\\)","Name=Sonic Robo Blast 2 NetPlus (OpenGL)") || gsub("Exec=srb2np -software","Exec=srb2np -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2netplus-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2vr-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 VR (Software)
Comment=Modified open source 3D Sonic VR platformer with improved framerate and additional features
Icon=srb2vr
Exec=srb2vr -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2vr-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2vr-opengl.desktop"
    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2vr-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2vr-openvr.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 VR \\\(Software\\\)","Name=Sonic Robo Blast 2 VR (OpenGL)") || gsub("Exec=srb2vr -software","Exec=srb2vr -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2vr-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 VR \\\(Software\\\)","Name=Sonic Robo Blast 2 VR (OpenVR)") || gsub("Exec=srb2vr -software","Exec=srb2vr -openvr -win");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2vr-openvr.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2legacy-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 v2.1 Legacy (Software)
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=srb2legacy
Exec=srb2legacy -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2legacy-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2legacy-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 v2.1 Legacy \\\(Software\\\)","Name=Sonic Robo Blast 2 v2.1 Legacy (OpenGL)") || gsub("Exec=srb2legacy -software","Exec=srb2legacy -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2legacy-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2_2.0-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 v2.0 (Software)
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=srb2_2.0
Exec=srb2_2.0 -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2_2.0-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2_2.0-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 v2.0 \\\(Software\\\)","Name=Sonic Robo Blast 2 v2.0 (OpenGL)") || gsub("Exec=srb2_2.0 -software","Exec=srb2_2.0 -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2_2.0-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2finaldemo-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Final Demo (Software)
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=srb2finaldemo
Exec=srb2fd -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2finaldemo-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2finaldemo-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Final Demo \\\(Software\\\)","Name=Sonic Robo Blast 2 Final Demo (OpenGL)") || gsub("Exec=srb2fd -software","Exec=srb2fd -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2finaldemo-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2persona-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Persona (Software)
Comment=Modified open source 3D Sonic game with Persona gameplay
Icon=srb2persona
Exec=srb2p -software
Categories=Game;
Keywords=sonic;rpg;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2persona-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2persona-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Persona \\\(Software\\\)","Name=Sonic Robo Blast 2 Persona (OpenGL)") || gsub("Exec=srb2p -software","Exec=srb2p -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2persona-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2kart-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Kart (Software)
Comment=Modified open source 3D Sonic game with kart racing gameplay
Icon=srb2kart
Exec=srb2kart -software
Categories=Game;
Keywords=sonic;kart;racing;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2kart-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2kart-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart (OpenGL)") || gsub("Exec=srb2kart -software","Exec=srb2kart -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2kart-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2kartmoemansion-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Kart Moe Mansion (Software)
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features
Icon=srb2kartmoe
Exec=srb2kartmoe -software
Categories=Game;
Keywords=sonic;kart;racing;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2kartmoemansion-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2kartmoemansion-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart Moe Mansion \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart Moe Mansion (OpenGL)") || gsub("Exec=srb2kartmoe -software","Exec=srb2kartmoe -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2kartmoemansion-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2kartvr-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Kart VR (Software)
Comment=Modified open source 3D Sonic game with VR kart racing gameplay, improved framerate and additional features
Icon=srb2kartvr
Exec=srb2kartvr -software
Categories=Game;
Keywords=sonic;kart;racing;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2kartvr-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2kartvr-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart VR \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart VR (OpenGL)") || gsub("Exec=srb2kartvr -software","Exec=srb2kartvr -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2kartvr-opengl.desktop"

    fi

    # Get app icon.
    convert "\$BUILD/src/win32/Srb2win.ico" -resize 64x64\! -filter lanczos -alpha on -background none -flatten "\$BUILD/build/icon.png"
    ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
    mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"

    if [ "\$BUILD" = "\$BUILDPATH/srb2" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2uncappedplus.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2netplus.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2vr.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2legacy.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2_2.0.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2finaldemo.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2persona.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2kart.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2kartmoe.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2kartvr.png"

    fi

fi

ENTRYPOINT
    chmod +x "$SRB2BLDROOT/containers/srb2-linux-glibc-docker/Entrypoint"

    # Prepare Docker images.
    rm -rf "$SRB2BLDROOT/containers/srb2-old-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-old-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-musl-docker" "$SRB2BLDROOT/containers/srb2-old-musl-docker" "$SRB2BLDROOT/containers/srb2-windows-docker" "$SRB2BLDROOT/containers/srb2-old-windows-docker"
    cp -rf "$SRB2BLDROOT/containers/srb2-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-old-linux-glibc-docker"
    cp -rf "$SRB2BLDROOT/containers/srb2-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-musl-docker"
    cp -rf "$SRB2BLDROOT/containers/srb2-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-old-musl-docker"
    cp -rf "$SRB2BLDROOT/containers/srb2-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-windows-docker"
    cp -rf "$SRB2BLDROOT/containers/srb2-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-old-windows-docker"

    # Set CPU architecture for Docker images in case of building old SRB2 versions.
    if ([ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]) && ([ "$ARCH" = "i386" ] || [ "$ARCH" = "i486" ] || [ "$ARCH" = "i686" ] || [ "$ARCH" = "x86_64" ]) && [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        ISARM="i386/"

    elif ([ "$ARCH" = "i386" ] || [ "$ARCH" = "i486" ] || [ "$ARCH" = "i686" ] || [ "$ARCH" = "x86_64" ]) && [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        ISARM="i386/"

    elif ([ "$ARCH" = "armhf" ] || [ "$ARCH" = "aarch64" ]) && [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        ISARM="armhf/"

    fi

    # Create Dockerfiles.
    cat > "$SRB2BLDROOT/containers/srb2-linux-glibc-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"ubuntu:"$UBUVER"

ENV container docker \
DEBIAN_FRONTEND noninteractive

RUN printf 'Acquire::Check-Valid-Until "false";\n' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";\n' > /etc/apt/apt.conf.d/01norecommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates gawk && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main\ndeb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu bionic main" >> /etc/apt/sources.list && \
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B 60C317803A41BA51845E371A1E9377A2BA9EF27F

RUN apt-get update && \
apt-get upgrade -y && \
apt-get install -y apt-fast && \
apt-fast install -y libsdl2-dev libsdl2-mixer-dev libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libgme-dev libopenmpt-dev libfluidsynth-dev libmodplug-dev libjack-dev libfuse-dev libcurl4-openssl-dev libupnp-dev zlib1g-dev rapidjson-dev fuse imagemagick nasm build-essential gcc-10 cmake file sudo dash curl git stow p7zip-full p7zip-rar

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /bin/bash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-old-linux-glibc-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"debian:"$DEBVER"

ENV container docker \
DEBIAN_FRONTEND noninteractive

RUN printf 'Acquire::Check-Valid-Until "false";\n' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";\n' > /etc/apt/apt.conf.d/01norecommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates gawk && \
gawk -i inplace '{gsub("main","main contrib non-free");print}' /etc/apt/sources.list && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main" >> /etc/apt/sources.list && \
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B

RUN apt-get update && \
apt-get upgrade -y && \
apt-get install -y apt-fast && \
apt-fast install -y libsdl2-dev libsdl2-mixer-dev libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libgme-dev libfluidsynth-dev libmodplug-dev libjack-dev libfuse-dev libcurl4-openssl-dev libupnp-dev zlib1g-dev fuse imagemagick nasm build-essential cmake file sudo dash curl git stow p7zip-full p7zip-rar

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /bin/dash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-musl-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"alpine:latest

ENV container docker

RUN apk update && \
apk upgrade && \
apk add sdl2-dev sdl2_mixer-dev sdl-dev sdl_mixer-dev glu-dev fluidsynth-dev libmodplug-dev mpg123-dev jack-dev libpng-dev curl-dev libupnp-dev zlib-dev libexecinfo-dev imagemagick nasm build-base cmake sudo bash dash gawk curl git p7zip shadow stow rapidjson-dev

RUN printf "%s\n" "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G wheel -s /usr/bin/dash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-old-musl-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"alpine:latest

ENV container docker

RUN apk update && \
apk upgrade && \
apk add sdl2-dev sdl2_mixer-dev sdl-dev sdl_mixer-dev glu-dev fluidsynth-dev libmodplug-dev mpg123-dev jack-dev curl-dev libupnp-dev zlib-dev libexecinfo-dev imagemagick nasm build-base gcc6 cmake sudo bash dash gawk curl git p7zip shadow stow

RUN printf "%s\n" "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G wheel -s /usr/bin/dash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-windows-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"debian:latest

ENV container docker \
DEBIAN_FRONTEND noninteractive

RUN printf 'Acquire::Check-Valid-Until "false";\n' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";\n' > /etc/apt/apt.conf.d/01norecommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates gawk && \
gawk -i inplace '{gsub("main","main contrib non-free");print}' /etc/apt/sources.list && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main" >> /etc/apt/sources.list && \
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B

RUN apt-get update && \
apt-get upgrade -y && \
apt-get install -y apt-fast && \
apt-fast install -y libsdl2-dev libsdl2-mixer-dev libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libgme-dev libopenmpt-dev libfluidsynth-dev libmodplug-dev libjack-dev libfuse-dev libcurl4-openssl-dev libupnp-dev zlib1g-dev fuse imagemagick nasm build-essential mingw-w64 cmake file sudo dash curl git stow p7zip-full p7zip-rar rapidjson-dev

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /bin/dash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-old-windows-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"debian:"$DEBVER"

ENV container docker \
DEBIAN_FRONTEND noninteractive

RUN printf 'Acquire::Check-Valid-Until "false";\n' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";\n' > /etc/apt/apt.conf.d/01norecommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates gawk && \
gawk -i inplace '{gsub("main","main contrib non-free");print}' /etc/apt/sources.list && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main" >> /etc/apt/sources.list && \
apt-key adv --keyserver keyserver.ubuntu.com --recv-keys A2166B8DE8BDC3367D1901C11EE2FF37CA8DA16B

RUN apt-get update && \
apt-get upgrade -y && \
apt-get install -y apt-fast && \
apt-fast install -y libsdl2-dev libsdl2-mixer-dev libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libgme-dev libfluidsynth-dev libmodplug-dev libjack-dev libfuse-dev libcurl4-openssl-dev libupnp-dev zlib1g-dev fuse imagemagick nasm build-essential mingw-w64 cmake file sudo dash curl git p7zip-full p7zip-rar stow

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /bin/dash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE
}

dockerrun() {
    # Restarting Docker daemon in order to avoid connection to be refused by Docker image repository. One time check after every reboot/shutdown of system.
    if [ ! -f /tmp/srb2bld-docker ]; then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Restarting Docker daemon. Please wait..."

        if [ -x "$(which systemctl 2> /dev/null)" ]; then

            $SUDO systemctl restart docker

        elif [ -x "$(which rc-service 2> /dev/null)" ]; then

            $SUDO rc-service docker restart

        elif [ -x "$(which sv 2> /dev/null)" ]; then

            $SUDO sv restart docker

        fi

        touch /tmp/srb2bld-docker
        sleep 1

    fi

    # Running Docker container.
    if [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        if [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for Windows SRB2 builds. Please wait..."
            docker pull "$ISARM"debian:"$DEBVER"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for Windows SRB2 builds. Please wait..."
            docker build --rm -t srb2-old-windows-docker "$SRB2BLDROOT/containers/srb2-old-windows-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            winpty docker run -it -u srb2 --net="host" --cap-add="SYS_ADMIN" --volume="C:\\Users\\$(whoami)\\AppData\\Roaming\\srb2bld:$SRB2BLDROOT:rw" srb2-old-windows-docker

        elif [ "$(ldd --version 2>&1 | gawk 'match($0, /musl/) {print substr($0, RSTART, RLENGTH)}' | gawk '!a[$0]++ {print}')" = "musl" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for musl based Linux SRB2 builds. Please wait..."
            docker pull "$ISARM"alpine:latest
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for musl based Linux SRB2 builds. Please wait..."
            docker build --rm -t srb2-old-musl-docker "$SRB2BLDROOT/containers/srb2-old-musl-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            docker run -it -u srb2 --net="host" --cap-add="SYS_ADMIN" --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="/usr/local:/usr/local:rw" srb2-old-musl-docker

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for glibc based Linux SRB2 builds. Please wait..."
            docker pull "$ISARM"debian:"$DEBVER"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for glibc based Linux SRB2 builds. Please wait..."
            docker build --rm -t srb2-old-linux-glibc-docker "$SRB2BLDROOT/containers/srb2-old-linux-glibc-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            docker run -it -u srb2 --net="host" --cap-add="SYS_ADMIN" --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="/usr/local:/usr/local:rw" srb2-old-linux-glibc-docker

        fi

    else

        if [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for Windows SRB2 builds. Please wait..."
            docker pull "$ISARM"debian:latest
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for Windows SRB2 builds. Please wait..."
            docker build --rm -t srb2-windows-docker "$SRB2BLDROOT/containers/srb2-windows-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            winpty docker run -it -u srb2 --net="host" --cap-add="SYS_ADMIN" --volume="C:\\Users\\$(whoami)\\AppData\\Roaming\\srb2bld:$SRB2BLDROOT:rw" srb2-windows-docker

        elif [ "$(ldd --version 2>&1 | gawk 'match($0, /musl/) {print substr($0, RSTART, RLENGTH)}' | gawk '!a[$0]++ {print}')" = "musl" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for musl based Linux SRB2 builds. Please wait..."
            docker pull "$ISARM"alpine:latest
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for musl based Linux SRB2 builds. Please wait..."
            docker build --rm -t srb2-musl-docker "$SRB2BLDROOT/containers/srb2-musl-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            docker run -it -u srb2 --net="host" --cap-add="SYS_ADMIN" --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="/usr/local:/usr/local:rw" srb2-musl-docker

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for glibc based Linux SRB2 builds. Please wait..."
            docker pull "$ISARM"ubuntu:"$UBUVER"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for glibc based Linux SRB2 builds. Please wait..."
            docker build --rm -t srb2-linux-glibc-docker "$SRB2BLDROOT/containers/srb2-linux-glibc-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            docker run -it -u srb2 --net="host" --cap-add="SYS_ADMIN" --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="/usr/local:/usr/local:rw" srb2-linux-glibc-docker

        fi

    fi

    CONTAINER_ID=$(docker ps -alq)
    docker stop "$CONTAINER_ID" > /dev/null
    docker container rm "$CONTAINER_ID" > /dev/null
}

installtolinux() {
    # Saving configuration flags to variable.
    if [ -n "$(cat "$BUILD/conf")" ]; then

        CONF=$(cat "$BUILD/conf")

    fi

    # Adding path to commit revision file.
    COMREVFILEPATH="$BUILD/.comrev"

    # Making missing directory path.
    if [ ! -d "/usr/local/bin" ]; then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Creating /usr/local/bin and /usr/local/games directory paths"
        $SUDO install -d "/usr/local/bin"

    fi

    # Installing build.
    if [ "$BUILD" = "$BUILDPATH/srb2" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2 binary, assets, libraries, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/bin/lsdl2srb2" "/usr/local/bin/srb2"
        $SUDO install -d "/usr/local/share/games/SRB2"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "/usr/local/share/games/SRB2"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2UncappedPlus"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2ucp"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2uncappedplus-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2uncappedplus-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2uncappedplus.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2ucp binary, assets, libraries, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/bin/lsdl2srb2" "/usr/local/bin/srb2ucp"
        $SUDO install -d "/usr/local/share/games/SRB2UncappedPlus"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "/usr/local/share/games/SRB2UncappedPlus"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-netplus" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2NetPlus"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2np"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2netplus-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2netplus-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2netplus.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2np binary, assets, libraries, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/bin/lsdl2srb2" "/usr/local/bin/srb2np"
        $SUDO install -d "/usr/local/share/games/SRB2NetPlus"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "/usr/local/share/games/SRB2NetPlus"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-vr" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2VR"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2vr"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2vr-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2vr-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2vr.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2vr binary, assets, libraries, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/bin/lsdl2srb2" "/usr/local/bin/srb2vr"
        $SUDO install -d "/usr/local/share/games/SRB2VR"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "/usr/local/share/games/SRB2VR"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2legacy"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2legacy"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2legacy-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2legacy-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2legacy.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2legacy binary, assets, libraries, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/bin/Linux$IS64/Release/srb2legacy" "/usr/local/bin/srb2legacy"
        $SUDO install -d "/usr/local/share/games/SRB2legacy"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "/usr/local/share/games/SRB2legacy"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2-2.0"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2_2.0"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2_2.0-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2_2.0-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2_2.0.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2_2.0 binary, assets, libraries, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/bin/Linux$IS64/Release/lsdlsrb2" "/usr/local/bin/srb2_2.0"
        $SUDO install -d "/usr/local/share/games/SRB2-2.0"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "/usr/local/share/games/SRB2-2.0"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2FinalDemo"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2fd"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2finaldemo-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2finaldemo-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2finaldemo.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2fd binary, assets, libraries, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/bin/Linux/Release/lsdl2srb2" "/usr/local/bin/srb2fd"
        $SUDO install -d "/usr/local/share/games/SRB2FinalDemo"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "/usr/local/share/games/SRB2FinalDemo"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2Persona"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2p"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2persona-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2persona-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2persona.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2p binary, assets, libraries, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/bin/Linux$IS64/Release/lsdl2srb2" "/usr/local/bin/srb2p"
        $SUDO install -d "/usr/local/share/games/SRB2Persona"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "/usr/local/share/games/SRB2Persona"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2Kart"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2kart"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2kart-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2kart-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2kart.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2kart binary, assets, libraries, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/bin/Linux$IS64/Release/lsdl2srb2kart" "/usr/local/bin/srb2kart"
        $SUDO install -d "/usr/local/share/games/SRB2Kart"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart"/* "/usr/local/share/games/SRB2Kart"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2KartMoeMansion"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2kartmoe"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2kartmoemansion-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2kartmoemansion-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2kartmoemansion.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2kartmoe binary, assets, libraries, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/bin/Linux$IS64/Release/lsdl2srb2kart" "/usr/local/bin/srb2kartmoe"
        $SUDO install -d "/usr/local/share/games/SRB2KartMoeMansion"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart"/* "/usr/local/share/games/SRB2KartMoeMansion"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2KartVR"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2kartvr"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2kartvr-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2kartvr-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2kartvr.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2kartvr binary, assets, libraries, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/bin/Linux$IS64/Release/lsdl2srb2kart" "/usr/local/bin/srb2kartvr"
        $SUDO install -d "/usr/local/share/games/SRB2KartVR"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart"/* "/usr/local/share/games/SRB2KartVR"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    fi

    # Refreshing menu icons.
    if [ -x "$(which gtk-update-icon-cache 2> /dev/null)" ]; then

        $SUDO gtk-update-icon-cache -qft /usr/local/share/icons/hicolor

    elif [ -x "$(find /usr/bin -name "kbuildsycoca*" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

        $SUDO "$(find /usr/bin -name "kbuildsycoca*" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" --noincremental

    fi

    if [ -n "$(ldd $SRB2BINARYLNXPATH | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ {print $1}' | sort -u)" ]; then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing missing dependencies for $BUILDNAME to the system. Please wait..."
        PACKAGE=$(for l in $(ldd "$SRB2BINARYLNXPATH" | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ {print $1}' | sort -u); do

            if [ -x "$(which emerge 2> /dev/null)" ]; then

                if [ ! -x "$(which e-file 2> /dev/null)" ]; then

                    $SUDO emerge pfl > /dev/null

                fi

                e-file "/usr/lib/$l" | col | gawk -F' ' '/1;32m/ && gsub(/1;29m|0m/,"") {print $NF}'

            elif [ -x "$(which pacman 2> /dev/null)" ]; then

                $SUDO pacman -Fy > /dev/null

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

                    pacman -Fq "$l" | gawk '{print}'

                else

                    pacman -Fq "$l" | gawk '!/lib32-/ {print}'

                fi

            elif [ -x "$(which apt-get 2> /dev/null)" ]; then

                if [ ! -x "$(which apt-file 2> /dev/null)" ]; then

                    $SUDO apt-get install -y apt-file > /dev/null

                fi

                $SUDO apt-file update > /dev/null
                apt-file -l find "$l" | gawk 'NF{print}'

            elif [ -x "$(which zypper 2> /dev/null)" ]; then

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

                    zypper search --provides --match-exact "$l" | gawk -F'|' '!/Name/ && /32bit/ {print $2}' | gawk 'NF{print}'

                else

                    zypper search --provides --match-exact "$l" | gawk -F'|' '!/Name|32bit/ {print $2}' | gawk 'NF{print}'

                fi

            elif [ -x "$(which dnf 2> /dev/null)" ]; then

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

                    dnf provides -q "/usr/lib/$l" | gawk '/.fc[0-9]./ {print $1}'

                else

                    dnf provides -q "/usr/lib$IS64/$l" | gawk '/.fc[0-9]./ {print $1}'

                fi

            elif [ -x "$(which xbps-install 2> /dev/null)" ]; then

                if [ ! -x "$(which xlocate 2> /dev/null)" ]; then

                    $SUDO xbps-install -Sy xtools > /dev/null

                fi

                xlocate -S > /dev/null

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

                    xlocate "$l" | gawk '!/-devel-/ && /-32bit-/ {print $1}' | gawk '!a[$0]++'

                else

                    xlocate "$l" | gawk '!/-devel-|-32bit-/ {print $1}' | gawk '!a[$0]++'

                fi

            fi

        done)

        if [ -x "$(which emerge 2> /dev/null)" ]; then

            $SUDO emerge $PACKAGE

        elif [ -x "$(which pacman 2> /dev/null)" ]; then

            $SUDO pacman -S --needed --noconfirm $PACKAGE

        elif [ -x "$(which apt-get 2> /dev/null)" ]; then

            if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

                ISARM=$(printf "%s\n" "$ISARM" | gawk -F'/' '{print $1}')
                PACKAGE=$(printf "%s\n" "$PACKAGE" | gawk '!/nvidia|primus|virtualbox/ {gsub("$","':$ISARM'");print}')

            fi

            $SUDO apt-get install -y $PACKAGE

        elif [ -x "$(which zypper 2> /dev/null)" ]; then

            $SUDO zypper install -y $PACKAGE

        elif [ -x "$(which dnf 2> /dev/null)" ]; then

            $SUDO dnf install --best --skip-broken -y $PACKAGE

        elif [ -x "$(which xbps-install 2> /dev/null)" ]; then

            $SUDO xbps-install -Sy $PACKAGE

        else

            ldd "$SRB2BINARYLNXPATH" | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ {print $1}' | sort -u
            $PRINTF "$NOTICE\n%s\n\e[0m" "Script can't detect package manager. Please install manually these above missing libraries."

        fi

    fi

    if [ -n "$(ldd $SRB2BINARYLNXPATH 2>&1 | gawk -F':' '/No such file or directory/ && !/symbol not found/ {print $1}' | gawk '{print $NF}' | sort -u)" ]; then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing missing dependencies for $BUILDNAME to the system. Please wait..."
        PACKAGE=$(for l in $(ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':' '/No such file or directory/ && !/symbol not found/ {print $1}' | gawk '{print $NF}' | sort -u); do

            if [ -x "$(which apk 2> /dev/null)" ]; then

                if [ ! -x "$(which apk-file 2> /dev/null)" ]; then

                    $SUDO apk add apk-file > /dev/null

                fi

                apk-file "$l" | gawk '!/PACKAGE/ {print $2}' | sort -u

            elif [ -x "$(which xbps-install 2> /dev/null)" ]; then

                if [ ! -x "$(which xlocate 2> /dev/null)" ]; then

                    $SUDO xbps-install -Sy xtools > /dev/null

                fi

                xlocate -S > /dev/null

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

                    xlocate "$l" | gawk '!/-devel-/ && /-32bit-/ {print $1}' | gawk '!a[$0]++'

                else

                    xlocate "$l" | gawk '!/-devel-|-32bit-/ {print $1}' | gawk '!a[$0]++'

                fi

            fi

        done)

        if [ -x "$(which apk 2> /dev/null)" ]; then

            $SUDO apk add --force-broken-world $PACKAGE

        elif [ -x "$(which xbps-install 2> /dev/null)" ]; then

            $SUDO xbps-install -Sy $PACKAGE

        else

            ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':' '/No such file or directory/ && !/symbol not found/ {print $1}' | gawk '{print $NF}' | sort -u
            $PRINTF "$NOTICE\n%s\n\e[0m" "Script can't detect package manager. Please install manually these above missing libraries."

        fi

    fi
}

installtolist() {
    # Making list of installed files.
    mkdir -p "$SRB2BLDROOT/installed"
    cat > "$SRB2BLDROOT/installed/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')" << INSTALL
$SRB2ASSETLNXPATH
$SRB2BINARYLNXPATH
$SRB2DESKTOPLNXPATH
$SRB2DESKTOPOPENGLLNXPATH
$SRB2ICONLNXPATH
$SRB2WINPATH
$SRB2WINMENUPATH
$SRB2MACPATH
$SRB2MACLINK
$COMREVFILEPATH
---------------
$CONF
INSTALL

    gawk -i inplace 'NF{print}' "$SRB2BLDROOT/installed/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')"

    COMREV=$(git -C "$BUILD" rev-parse --short HEAD)
    $PRINTF "%s\n" "$COMREV" > "$BUILD/.comrev"

    if [ -n "$SRB2BINARYLNXPATH" ]; then

        SRB2PATH="$SRB2BINARYLNXPATH"

    elif [ -n "$SRB2MACPATH" ]; then

        SRB2PATH="$SRB2MACPATH and $SRB2MACLINK"

    elif [ -n "$SRB2WINPATH" ]; then

        SRB2PATH="$SRB2WINPATH"

    fi

    $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Installation of $BUILDNAME is successful and is located at $SRB2PATH ."
}

installtomacos() {
    # Exporting environment variables for compiling, installing game and libraries on macOS.
    export MACOSX_DEPLOYMENT_TARGET="$MACOSVER"
    export SDKROOT="$SDKROOT"
    export MACPORTPREFIX="$MACPORTPREFIX"
    export LIBRARY_PATH="/usr/lib:/usr/local/lib:$HOMEBREWPREFIX/lib:$MACPORTPREFIX/lib:$LIBRARY_PATH"
    export C_INCLUDE_PATH="/usr/include:/usr/local/include:$HOMEBREWPREFIX/include:$MACPORTPREFIX/include:$C_INCLUDE_PATH"
    export CPLUS_INCLUDE_PATH="$C_INCLUDE_PATH"
    export PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/local/lib/pkgconfig:$HOMEBREWPREFIX/lib/pkgconfig:$MACPORTPREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
    export STOW_DIR="/usr/local/stow"

    # Have commit revision as part of name for App Bundle.
    COMREV=$(git -C "$BUILD" rev-parse --short HEAD)

    # Change prefix depending on, if library is in $HOMEBREWPREFIX/lib or $MACPORTPREFIX/lib or /usr/local/lib.

    if [ -f "$HOMEBREWPREFIX/lib/libSDL2.dylib" ]; then

        LIBSDL2PREFIX="$HOMEBREWPREFIX"

    elif [ -f "$MACPORTPREFIX/lib/libSDL2.dylib" ]; then

        LIBSDL2PREFIX="$MACPORTPREFIX"

    else

        LIBSDL2PREFIX="/usr/local"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libgme.dylib" ]; then

        LIBGMEPREFIX="$HOMEBREWPREFIX"

    elif [ -f "$MACPORTPREFIX/lib/libgme.dylib" ]; then

        LIBGMEPREFIX="$MACPORTPREFIX"

    else

        LIBGMEPREFIX="/usr/local"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libopenmpt.dylib" ]; then

        LIBOPENMPTPREFIX="$HOMEBREWPREFIX"

    elif [ -f "$MACPORTPREFIX/lib/libopenmpt.dylib" ]; then

        LIBOPENMPTPREFIX="$MACPORTPREFIX"

    else

        LIBOPENMPTPREFIX="/usr/local"

    fi

    mkdir -p "$BUILD/build"

    # Upgrade build. Making sure, that there are only used compilation flags.
    if [ -n "$UPGRADE" ]; then

        export CONF="$(gawk '/---------------/ {gsub("---------------","");getline;print}' "$SRB2BLDROOT/installed/$UPGRADE")"

    # Otherwise set compilation flags, build and install as usual.
    else

        # Warning for MacOS users.
        $PRINTF "$NOTICE\n%s\n\e[0m" "WARNING for macOS users! This script makes changes from rpath to absolute paths within some libraries installed from Homebrew, MacPorts or compiled (mostly should affects libraries compiled by user), that are associated with SRB2 binary, so installing or making App Bundles would be successful. In the future this could make unexpected results with apps or SRB2 builds, that depend on those libraries. Possible changes that would be applied. Save those below commands to text file and revert those changes after process:

        sudo ln -sf /Library/Developer/CommandLineTools/usr/lib/clang/*/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib /usr/local/lib/libclang_rt.ubsan_osx_dynamic.dylib
        sudo install_name_tool -change "@rpath/libclang_rt.ubsan_osx_dynamic.dylib" "/usr/local/lib/libclang_rt.ubsan_osx_dynamic.dylib" /usr/local/lib/libgme.dylib

        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "/usr/local/lib/libbrotlicommon.dylib" /usr/local/lib/libbrotlidec.dylib
        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "/usr/local/lib/libbrotlicommon.dylib" /usr/local/lib/libbrotlienc.dylib

        sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "/usr/local/lib/libSDL2.dylib" /usr/local/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libSDL2-2.0.dylib" "/usr/local/lib/libSDL2.dylib" /usr/local/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libmodplug.dylib" "/usr/local/lib/libmodplug.dylib" /usr/local/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libmodplug.dylib" "/usr/local/lib/libmodplug.dylib" /usr/local/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbis.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbisfile.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libopenmpt.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbis.dylib
        sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbisfile.dylib
        sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libopenmpt.dylib
        sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" $HOMEBREWPREFIX/lib/libbrotlidec.dylib
        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" $HOMEBREWPREFIX/lib/libbrotlienc.dylib

        sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$MACPORTPREFIX/lib/libbrotlicommon.dylib" $MACPORTPREFIX/lib/libbrotlidec.dylib
        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$MACPORTPREFIX/lib/libbrotlicommon.dylib" $MACPORTPREFIX/lib/libbrotlienc.dylib

        sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib

Press y/yes to continue, or n/no or ctrl+c to quit."

        read -r CONFIRM

        if [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

            # Display content of CMakeLists for a good view of available compilation flags.
            cmake -LAH -S "$BUILD" -B "$BUILD/build" 2>&1 | gawk '{if(f)print} /-- Cache values/{f=1}' 2> /dev/null

            # Add compilation flags.
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Please enter $BUILDNAME's space separated compilation flags and then press enter, or just press enter to begin compiling. Default command and flags for compilation:"
            $PRINTF "$NOTICE%s\n\e[0m" "cmake -S $BUILD -B $BUILD/build -DCMAKE_OSX_SYSROOT=$SDKROOT -DCMAKE_OSX_DEPLOYMENT_TARGET=$MACOSVER -DCPACK_PACKAGE_DESCRIPTION_SUMMARY=$BUILDNAME -DCPACK_PACKAGE_FILE_NAME=$BUILDNAME-$COMREV -DCMAKE_BUILD_TYPE=Release -DSRB2_CPACK_GENERATOR=DragNDrop -DCMAKE_INSTALL_PREFIX=/usr/local/opt/srb2-apps -DSDL2_INCLUDE_DIR=$LIBSDL2PREFIX/include/SDL2 -DSDL2_LIBRARY=$LIBSDL2PREFIX/lib/libSDL2.dylib -DGME_INCLUDE_DIR=$LIBGMEPREFIX/include/gme -DGME_LIBRARY=$LIBGMEPREFIX/lib/libgme.dylib -DOPENMPT_INCLUDE_DIR=$LIBOPENMPTPREFIX/include/libopenmpt -DOPENMPT_LIBRARY=$LIBOPENMPTPREFIX/lib/libopenmpt.dylib -DCMAKE_SKIP_RPATH=ON -DCMAKE_SKIP_INSTALL_RPATH=ON YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r CONF

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "Exiting."
            exit

        fi

        # Some checks, if the game's certain compilation flags were entered.
        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_PNG=OFF/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_PNG:BOOL=OFF/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISPNG=

        else

            ISPNG=libpng

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_GME=OFF/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_GME:BOOL=OFF/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISGME=

        else

            ISGME=libgme

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_OPENMPT=OFF/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_OPENMPT:BOOL=OFF/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISOPENMPT=

        else

            ISOPENMPT=libopenmpt

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_SDL2_USEMIXER=OFF/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_SDL2_USEMIXER:BOOL=OFF/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISSDL2MIXER=

        else

            ISSDL2MIXER=libsdl2_mixer

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_MIXERX=ON/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_MIXERX:BOOL=ON/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISSDL2MIXERX=libsdl2_mixerx

        else

            ISSDL2MIXERX=

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_DISCORDRPC=ON/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_DISCORDRPC:BOOL=ON/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISDISCORDRPC=libdiscord-rpc

        else

            ISDISCORDRPC=

        fi

    fi

    # Make directories for storing essential files.
    mkdir -p "$SRB2BLDROOT/builds" "$SRB2BLDROOT/assets" "$SRB2BLDROOT/libraries" "$BUILD/assets/installer"
    cd "$BUILD" || exit

    # Download and extract assets.
    $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading and extracting $BUILDNAME's assets. Please wait..."
    if [ "$BUILD" = "$BUILDPATH/srb2" ] || [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ] || [ "$BUILD" = "$BUILDPATH/srb2-netplus" ] || [ "$BUILD" = "$BUILDPATH/srb2-vr" ]; then

        if [ "$(gawk -F'"' '/SRB2VERSION/ {print $2}' "$BUILD/src/version.h")" != "$(printf "$SRB2VER" | gawk -F'_' '{print $NF}')" ]; then

            SRB2ASSETURL=$(curl -s https://api.github.com/repos/STJr/SRB2/releases | gawk -F'"' '/$SRB2VER.*Full.zip/ {print $4}')
            if [ "$(curl -sLI "$SRB2ASSETURL" | gawk -F'Last-Modified: ' '{IGNORECASE=1} /Last-Modified/ {gsub("\r","");print $NF}')" != "$(date -u -r "$SRB2BLDROOT/assets/SRB2-Older.zip" +"%a, %d %b %Y %H:%M:%S GMT" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2-Older.zip"
                curl -RL "$SRB2ASSETURL" -o "$SRB2BLDROOT/assets/SRB2-Older.zip"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2-Older.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"$BUILD/assets/installer"

        else

            SRB2ASSETURL=$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print $4}')
            if [ "$(curl -sLI "$SRB2ASSETURL" | gawk -F'Last-Modified: ' '{IGNORECASE=1} /Last-Modified/ {gsub("\r","");print $NF}')" != "$(date -u -r "$SRB2BLDROOT/assets/SRB2-Latest.zip" +"%a, %d %b %Y %H:%M:%S GMT" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2-Latest.zip"
                curl -RL "$SRB2ASSETURL" -o "$SRB2BLDROOT/assets/SRB2-Latest.zip"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"$BUILD/assets/installer"

        fi

        find "$BUILD/assets/installer/models" -type d -exec chmod 755 {} \;

    fi

    if [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        #        curl -RLC - "https://www.dropbox.com/s/$SRB2PERSONAFILEID" -o "$SRB2BLDROOT/assets/SRB2P_MP.exe"
        #        7z e -y "$SRB2BLDROOT/assets/SRB2P_MP.exe" "*/*.pk3" "*/*.wad" -o"$BUILD/assets/installer"

        curl -RLC - "https://www.dropbox.com/s/$SRB2PERSONAFILEID" -o "$SRB2BLDROOT/assets/SRB2P_MP.rar"
        unrar x -y "$SRB2BLDROOT/assets/SRB2P_MP.rar" "*.pk3" "*.wad" "$BUILD/assets/installer"

        if [ "$(gawk -F'"' '/SRB2VERSION/ {print $2}' "$BUILD/src/version.h")" != "$SRB2PERSONAVER" ]; then

            SRB2ASSETURL=$(curl -s https://api.github.com/repos/STJr/SRB2/releases | gawk -F'"' '/$SRB2VER.*Full.zip/ {print $4}')
            if [ "$(curl -sLI "$SRB2ASSETURL" | gawk -F'Last-Modified: ' '{IGNORECASE=1} /Last-Modified/ {gsub("\r","");print $NF}')" != "$(date -u -r "$SRB2BLDROOT/assets/SRB2-Older.zip" +"%a, %d %b %Y %H:%M:%S GMT" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2-Older.zip"
                curl -RL "$SRB2ASSETURL" -o "$SRB2BLDROOT/assets/SRB2-Older.zip"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2-Older.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"$BUILD/assets/installer"

        else

            SRB2ASSETURL=$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print $4}')
            if [ "$(curl -sLI "$SRB2ASSETURL" | gawk -F'Last-Modified: ' '{IGNORECASE=1} /Last-Modified/ {gsub("\r","");print $NF}')" != "$(date -u -r "$SRB2BLDROOT/assets/SRB2-Latest.zip" +"%a, %d %b %Y %H:%M:%S GMT" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2-Latest.zip"
                curl -RL "$SRB2ASSETURL" -o "$SRB2BLDROOT/assets/SRB2-Latest.zip"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"$BUILD/assets/installer"

        fi

        find "$BUILD/assets/installer/models" -type d -exec chmod 755 {} \;

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        curl -RLC - https://github.com/STJr/SRB2/releases/download/SRB2_release_2.1.25/SRB2-v2125-Installer.exe -o "$SRB2BLDROOT/assets/SRB2-2.1.exe"
        7z x -y "$SRB2BLDROOT/assets/SRB2-2.1.exe" "*.srb" "*.dta" "*.dat" -o"$BUILD/assets/installer"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        curl -RLC - https://archive.org/download/srb20ya-v20/SRB2_v206.exe -o "$SRB2BLDROOT/assets/SRB2-2.0.exe"
        7z x -y "$SRB2BLDROOT/assets/SRB2-2.0.exe" "*.plr" "*.dta" "*.wpn" "*.srb" -o"$BUILD/assets/installer"

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        curl -RLC - https://archive.org/download/srb20ya-finaldemo/FinalDemo1094-2008.exe -o "$SRB2BLDROOT/assets/SRB2FinalDemo.exe"
        7z x -y "$SRB2BLDROOT/assets/SRB2FinalDemo.exe" "*.plr" "*.dta" "*.wpn" "*.srb" -o"$BUILD/assets/installer"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        if [ "$(gawk -F'"|\\(' '/VERSIONSTRING/ && /v[0-9]/ {gsub(" ","");print $2}' "$BUILD/src/doomdef.h" | gawk '!a[$0]++')" = "$SRB2KARTVER" ]; then

            SRB2KARTASSETURL=$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases | gawk -F'"' '/$SRB2KARTVER\/.*Installer.exe/ {print $4}')
            if [ "$(curl -sLI "$SRB2KARTASSETURL" | gawk -F'Last-Modified: ' '{IGNORECASE=1} /Last-Modified/ {gsub("\r","");print $NF}')" != "$(date -u -r "$SRB2BLDROOT/assets/SRB2Kart-Older.exe" +"%a, %d %b %Y %H:%M:%S GMT" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2Kart-Older.exe"
                curl -RL "$SRB2KARTASSETURL" -o "$SRB2BLDROOT/assets/SRB2Kart-Older.exe"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2Kart-Older.exe" "*.kart" "*.srb" "*.dat" "mdls/*" -o"$BUILD/assets/installer"

        else

            SRB2KARTASSETURL=$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases/latest | gawk -F'"' '/browser_download_url.*Installer.exe/ {print $4}')
            if [ "$(curl -sLI "$SRB2KARTASSETURL" | gawk -F'Last-Modified: ' '{IGNORECASE=1} /Last-Modified/ {gsub("\r","");print $NF}')" != "$(date -u -r "$SRB2BLDROOT/assets/SRB2Kart-Latest.exe" +"%a, %d %b %Y %H:%M:%S GMT" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2Kart-Latest.exe"
                curl -RL "$SRB2KARTASSETURL" -o "$SRB2BLDROOT/assets/SRB2Kart-Latest.exe"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2Kart-Latest.exe" "*.kart" "*.srb" "*.dat" "mdls/*" -o"$BUILD/assets/installer"

        fi

        find "$BUILD/assets/installer/mdls" -type d -exec chmod 755 {} \;

    fi

    $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing dependencies. Please wait..."

    sudo_ping

    # Download libpng's source code, build and install it.
    if [ "$ISPNG" = "libpng" ]; then

        if [ ! -d "$SRB2BLDROOT/libraries/libpng/.git" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libpng's source code. Please wait..."
            git clone git://git.code.sf.net/p/libpng/code.git --recursive --branch "v$MACOSPNGVER" "$SRB2BLDROOT/libraries/libpng"

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libpng's source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libpng" clean -qdfx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libpng" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/libpng" checkout -q master
            git -C "$SRB2BLDROOT/libraries/libpng" pull --recurse-submodules --rebase --autostash
            git -C "$SRB2BLDROOT/libraries/libpng" checkout -q "v$MACOSPNGVER"

        fi

        if ([ ! -f "/usr/local/lib/libpng.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libpng.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libpng.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libpng/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libpng" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libpng/.comrev" 2> /dev/null)" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libpng. Please wait..."
            mkdir -p "$SRB2BLDROOT/libraries/libpng/build"
            cmake -S "$SRB2BLDROOT/libraries/libpng" -B "$SRB2BLDROOT/libraries/libpng/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libpng -DCMAKE_MACOSX_RPATH=OFF
            cmake --build "$SRB2BLDROOT/libraries/libpng/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
            sudo -E cmake --install "$SRB2BLDROOT/libraries/libpng/build"
            sudo -E stow -v --adopt libpng
            COMREV=$(git -C "$SRB2BLDROOT/libraries/libpng" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libpng/.comrev"

        fi

    fi

    # Download libogg's source code, build and install it.
    if [ "$ISOPENMPT" = "libopenmpt" ] || [ "$ISSDL2MIXER" = "libsdl2_mixer" ] || [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

        if [ ! -d "$SRB2BLDROOT/libraries/libogg/.git" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libogg's source code. Please wait..."
            git clone https://gitlab.xiph.org/xiph/ogg.git --recursive --branch "v$MACOSOGGVER" "$SRB2BLDROOT/libraries/libogg"

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libogg's source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libogg" clean -qdfx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libogg" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/libogg" checkout -q master
            git -C "$SRB2BLDROOT/libraries/libogg" pull --recurse-submodules --rebase --autostash
            git -C "$SRB2BLDROOT/libraries/libogg" checkout -q "v$MACOSOGGVER"

        fi

        if ([ ! -f "/usr/local/lib/libogg.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libogg.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libogg.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libogg/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libogg" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libogg/.comrev" 2> /dev/null)" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libogg. Please wait..."
            mkdir -p "$SRB2BLDROOT/libraries/libogg/build"
            cmake -S "$SRB2BLDROOT/libraries/libogg" -B "$SRB2BLDROOT/libraries/libogg/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=true -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libogg -DCMAKE_MACOSX_RPATH=OFF
            cmake --build "$SRB2BLDROOT/libraries/libogg/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
            sudo -E cmake --install "$SRB2BLDROOT/libraries/libogg/build"
            sudo -E stow -v --adopt libogg
            COMREV=$(git -C "$SRB2BLDROOT/libraries/libogg" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libogg/.comrev"

        fi

    fi

    # Download libvorbis' source code, build and install it.
    if [ "$ISOPENMPT" = "libopenmpt" ] || [ "$ISSDL2MIXER" = "libsdl2_mixer" ] || [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

        if [ ! -d "$SRB2BLDROOT/libraries/libvorbis/.git" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libvorbis' source code. Please wait..."
            git clone https://gitlab.xiph.org/xiph/vorbis.git --recursive --branch "v$MACOSVORBISVER" "$SRB2BLDROOT/libraries/libvorbis"

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libvorbis' source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libvorbis" clean -qdfx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libvorbis" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/libvorbis" checkout -q master
            git -C "$SRB2BLDROOT/libraries/libvorbis" pull --recurse-submodules --rebase --autostash
            git -C "$SRB2BLDROOT/libraries/libvorbis" checkout -q "v$MACOSVORBISVER"

        fi

        if ([ ! -f "/usr/local/lib/libvorbis.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libvorbis.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libvorbis.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libvorbis/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libvorbis" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libvorbis/.comrev" 2> /dev/null)" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libvorbis. Please wait..."
            cd "$SRB2BLDROOT/libraries/libvorbis" || exit
            ./autogen.sh
            ./configure --prefix=/usr/local/stow/libvorbis
            make -k -j$(($(sysctl -n hw.logicalcpu) + 1))
            sudo -E make install
            sudo -E stow -v --adopt libvorbis
            COMREV=$(git -C "$SRB2BLDROOT/libraries/libvorbis" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libvorbis/.comrev"
            cd "$BUILD" || exit

        fi

    fi

    # Download libmpg123's source code, build and install it.
    if [ "$ISOPENMPT" = "libopenmpt" ] || [ "$ISSDL2MIXER" = "libsdl2_mixer" ] || [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

        if [ ! -d "$SRB2BLDROOT/libraries/libmpg123/.git" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libmpg123's source code. Please wait..."
            git clone https://github.com/madebr/mpg123.git --recursive --branch "$MACOSMPG123VER" "$SRB2BLDROOT/libraries/libmpg123"

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libmpg123's source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libmpg123" clean -qdfx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libmpg123" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/libmpg123" checkout -q master
            git -C "$SRB2BLDROOT/libraries/libmpg123" pull --recurse-submodules --rebase --autostash
            git -C "$SRB2BLDROOT/libraries/libmpg123" checkout -q "$MACOSMPG123VER"

        fi

        if ([ ! -f "/usr/local/lib/libmpg123.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libmpg123.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libmpg123.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libmpg123/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libmpg123" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libmpg123/.comrev" 2> /dev/null)" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libmpg123. Please wait..."
            cd "$SRB2BLDROOT/libraries/libmpg123" || exit
            autoreconf -iv
            ./configure --prefix=/usr/local/stow/libmpg123
            make -k -j$(($(sysctl -n hw.logicalcpu) + 1))
            sudo -E make install
            sudo -E stow -v --adopt libmpg123
            COMREV=$(git -C "$SRB2BLDROOT/libraries/libmpg123" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libmpg123/.comrev"
            cd "$BUILD" || exit

        fi

    fi

    # Download libmodplug's source code, build and install it.
    if [ "$ISOPENMPT" = "libopenmpt" ] || [ "$ISSDL2MIXER" = "libsdl2_mixer" ] || [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

        if [ ! -d "$SRB2BLDROOT/libraries/libmodplug/.git" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libmodplug's source code. Please wait..."
            git clone https://github.com/Konstanty/libmodplug.git --recursive --branch "$MACOSMODPLUGVER" "$SRB2BLDROOT/libraries/libmodplug"

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libmodplug's source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libmodplug" clean -qdfx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libmodplug" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/libmodplug" checkout -q master
            git -C "$SRB2BLDROOT/libraries/libmodplug" pull --recurse-submodules --rebase --autostash
            git -C "$SRB2BLDROOT/libraries/libmodplug" checkout -q "$MACOSMODPLUGVER"

        fi

        if ([ ! -f "/usr/local/lib/libmodplug.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libmodplug.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libmodplug.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libmodplug/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libmodplug" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libmodplug/.comrev" 2> /dev/null)" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libmodplug. Please wait..."
            mkdir -p "$SRB2BLDROOT/libraries/libmodplug/build"
            cmake -S "$SRB2BLDROOT/libraries/libmodplug" -B "$SRB2BLDROOT/libraries/libmodplug/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=true -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libmodplug -DCMAKE_MACOSX_RPATH=OFF
            cmake --build "$SRB2BLDROOT/libraries/libmodplug/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
            sudo -E cmake --install "$SRB2BLDROOT/libraries/libmodplug/build"
            sudo -E stow -v --adopt libmodplug
            COMREV=$(git -C "$SRB2BLDROOT/libraries/libmodplug" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libmodplug/.comrev"

        fi

    fi

    # Download libSDL2's source code, build and install it.
    if [ ! -d "$SRB2BLDROOT/libraries/libsdl2/.git" ]; then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libSDL2's source code. Please wait..."
        git clone https://github.com/libsdl-org/SDL.git --recursive --branch "release-$MACOSSDL2VER" "$SRB2BLDROOT/libraries/libsdl2"

    else

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libSDL2's source code. Please wait..."
        git -C "$SRB2BLDROOT/libraries/libsdl2" clean -qdfx -e .comrev
        git -C "$SRB2BLDROOT/libraries/libsdl2" reset -q --hard
        git -C "$SRB2BLDROOT/libraries/libsdl2" checkout -q main
        git -C "$SRB2BLDROOT/libraries/libsdl2" pull --recurse-submodules --rebase --autostash
        git -C "$SRB2BLDROOT/libraries/libsdl2" checkout -q "release-$MACOSSDL2VER"

    fi

    if ([ ! -f "/usr/local/lib/libSDL2.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libSDL2.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libSDL2.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libsdl2/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libsdl2" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libsdl2/.comrev" 2> /dev/null)" ]); then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libSDL2. Please wait..."
        mkdir -p "$SRB2BLDROOT/libraries/libsdl2/build"
        cmake -S "$SRB2BLDROOT/libraries/libsdl2" -B "$SRB2BLDROOT/libraries/libsdl2/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DSDL_HIDAPI_JOYSTICK=ON -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libsdl2 -DCMAKE_MACOSX_RPATH=OFF
        cmake --build "$SRB2BLDROOT/libraries/libsdl2/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
        sudo -E cmake --install "$SRB2BLDROOT/libraries/libsdl2/build"
        sudo -E stow -v --adopt libsdl2
        COMREV=$(git -C "$SRB2BLDROOT/libraries/libsdl2" rev-parse --short HEAD)
        $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libsdl2/.comrev"

    fi

    # Download libSDL2_mixer's source code, build and install it.
    if [ "$ISSDL2MIXER" = "libsdl2_mixer" ]; then

        if [ ! -d "$SRB2BLDROOT/libraries/libsdl2-mixer/.git" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libSDL2_mixer's source code. Please wait..."
            git clone https://github.com/libsdl-org/SDL_mixer.git --recursive --branch "release-$MACOSSDL2MIXERVER" "$SRB2BLDROOT/libraries/libsdl2-mixer"

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libSDL2_mixer's source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" clean -qdfx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" checkout -q main
            git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" pull --recurse-submodules --rebase --autostash
            git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" checkout -q "release-$MACOSSDL2MIXERVER"

        fi

        if ([ ! -f "/usr/local/lib/libSDL2_mixer.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libSDL2_mixer.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libSDL2_mixer.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libsdl2-mixer/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libsdl2-mixer/.comrev" 2> /dev/null)" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libSDL2_mixer. Please wait..."
            cd "$SRB2BLDROOT/libraries/libsdl2-mixer" || exit
            ./configure \
                --disable-dependency-tracking \
                --disable-music-flac \
                --disable-music-flac-shared \
                --enable-music-midi \
                --disable-music-midi-fluidsynth \
                --disable-music-midi-fluidsynth-shared \
                --enable-music-midi-native \
                --disable-music-midi-timidity \
                --enable-music-mod \
                --disable-music-mod-mikmod \
                --disable-music-mod-mikmod-shared \
                --enable-music-mod-modplug \
                --disable-music-mod-modplug-shared \
                --enable-music-mp3 \
                --enable-music-mp3-mpg123 \
                --disable-music-mp3-mpg123-shared \
                --enable-music-ogg \
                --disable-music-ogg-shared \
                --disable-music-opus \
                --disable-music-opus-shared \
                --enable-music-wave \
                --prefix=/usr/local/stow/libsdl2-mixer
            make -k -j$(($(sysctl -n hw.logicalcpu) + 1))
            sudo -E make install
            sudo -E stow -v --adopt libsdl2-mixer
            COMREV=$(git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libsdl2-mixer/.comrev"
            cd "$BUILD" || exit

        fi

    fi

    # Download libSDL2_mixerX's source code, build and install it.
    if [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

        if [ ! -d "$SRB2BLDROOT/libraries/libsdl2-mixerx/.git" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libSDL2_mixerX's source code. Please wait..."
            git clone https://github.com/WohlSoft/SDL-Mixer-X.git --recursive --branch "$MACOSSDL2MIXERXVER" "$SRB2BLDROOT/libraries/libsdl2-mixerx"

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libSDL2_mixerX's source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" clean -qdfx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q master
            git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" pull --recurse-submodules --rebase --autostash
            git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q "$MACOSSDL2MIXERXVER"

        fi

        if ([ ! -f "/usr/local/lib/libSDL2_mixer_ext.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libSDL2_mixer_ext.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libSDL2_mixer_ext.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev" 2> /dev/null)" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libSDL2_mixerX. Please wait..."
            mkdir -p "$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
            cmake -S "$SRB2BLDROOT/libraries/libsdl2-mixerx" -B "$SRB2BLDROOT/libraries/libsdl2-mixerx/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DDOWNLOAD_AUDIO_CODECS_DEPENDENCY=OFF -DAUDIO_CODECS_BUILD_LOCAL_SDL2=OFF -DUSE_SYSTEM_SDL2=ON -DSDL_MIXER_X_STATIC=OFF -DUSE_FLAC=OFF -DUSE_MP3_MAD=OFF -DUSE_MP3_MPG123=OFF -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libsdl2-mixerx -DCMAKE_MACOSX_RPATH=OFF
            cmake --build "$SRB2BLDROOT/libraries/libsdl2-mixerx/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
            sudo -E cmake --install "$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
            sudo -E stow -v --adopt libsdl2-mixerx
            COMREV=$(git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev"

        fi

    fi

    # Download libopenmpt's source code, build and install it.
    if [ "$ISOPENMPT" = "libopenmpt" ]; then

        if [ ! -d "$SRB2BLDROOT/libraries/libopenmpt/.git" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libopenmpt's source code. Please wait..."
            git clone https://github.com/OpenMPT/openmpt.git --recursive --branch "libopenmpt-$MACOSOPENMPTVER" "$SRB2BLDROOT/libraries/libopenmpt"

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libopenmpt's source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libopenmpt" clean -qdfx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libopenmpt" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/libopenmpt" checkout -q master
            git -C "$SRB2BLDROOT/libraries/libopenmpt" pull --recurse-submodules --rebase --autostash
            git -C "$SRB2BLDROOT/libraries/libopenmpt" checkout -q "libopenmpt-$MACOSOPENMPTVER"

        fi

        if ([ ! -f "/usr/local/lib/libopenmpt.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libopenmpt.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libopenmpt.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libopenmpt/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libopenmpt" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libopenmpt/.comrev" 2> /dev/null)" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libopenmpt. Please wait..."
            cd "$SRB2BLDROOT/libraries/libopenmpt" || exit
            gawk -i inplace '{gsub("DYNLINK=1","DYNLINK=0") gsub("SOSUFFIX=.so","SOSUFFIX=.dylib") gsub("STATIC_LIB=1","STATIC_LIB=0") gsub("EXAMPLES=1","EXAMPLES=0") gsub("OPENMPT123=1","OPENMPT123=0") gsub("TEST=1","TEST=0");print}' "$SRB2BLDROOT/libraries/libopenmpt/Makefile"
            make -k -j$(($(sysctl -n hw.logicalcpu) + 1)) NO_PORTAUDIO=1 NO_PORTAUDIOCPP=1 NO_SNDFILE=1 NO_FLAC=1
            sudo -E make PREFIX=/usr/local/stow/libopenmpt install
            sudo -E stow -v --adopt libopenmpt
            COMREV=$(git -C "$SRB2BLDROOT/libraries/libopenmpt" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libopenmpt/.comrev"
            cd "$BUILD" || exit

        fi

    fi

    # Download libgme's source code, build and install it.
    if [ "$ISGME" = "libgme" ]; then

        if [ ! -d "$SRB2BLDROOT/libraries/libgme/.git" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libgme's source code. Please wait..."
            git clone https://bitbucket.org/mpyne/game-music-emu.git --recursive --branch "$MACOSGMEVER" "$SRB2BLDROOT/libraries/libgme"

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libgme's source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libgme" clean -qdfx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libgme" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/libgme" checkout -q master
            git -C "$SRB2BLDROOT/libraries/libgme" pull --recurse-submodules --rebase --autostash
            git -C "$SRB2BLDROOT/libraries/libgme" checkout -q "$MACOSGMEVER"

        fi

        if ([ ! -f "/usr/local/lib/libgme.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libgme.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libgme.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libgme/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libgme" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libgme/.comrev" 2> /dev/null)" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libgme. Please wait..."
            mkdir -p "$SRB2BLDROOT/libraries/libgme/build"
            cmake -S "$SRB2BLDROOT/libraries/libgme" -B "$SRB2BLDROOT/libraries/libgme/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libgme -DCMAKE_MACOSX_RPATH=OFF
            cmake --build "$SRB2BLDROOT/libraries/libgme/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
            sudo -E cmake --install "$SRB2BLDROOT/libraries/libgme/build"
            sudo -E stow -v --adopt libgme
            COMREV=$(git -C "$SRB2BLDROOT/libraries/libgme" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libgme/.comrev"

        fi

    fi

    # Download DiscordRPC's source code, build and install it.
    if [ "$ISDISCORDRPC" = "libdiscord-rpc" ] && ([ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ] || [ "$BUILD" = "$BUILDPATH/srb2-netplus" ] || [ "$BUILD" = "$BUILDPATH/srb2-vr" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]); then

        if [ ! -d "$SRB2BLDROOT/libraries/discord-rpc/.git" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading DiscordRPC's source code. Please wait..."
            git clone https://github.com/discord/discord-rpc.git --recursive --branch "$MACOSDISCORDRPCVER" "$SRB2BLDROOT/libraries/discord-rpc"

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up DiscordRPC's source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/discord-rpc" clean -qdfx -e .comrev
            git -C "$SRB2BLDROOT/libraries/discord-rpc" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/discord-rpc" checkout -q master
            git -C "$SRB2BLDROOT/libraries/discord-rpc" pull --recurse-submodules --rebase --autostash
            git -C "$SRB2BLDROOT/libraries/discord-rpc" checkout -q "$MACOSDISCORDRPCVER"

        fi

        if ([ ! -f "/usr/local/lib/libdiscord-rpc.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libdiscord-rpc.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libdiscord-rpc.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/discord-rpc/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/discord-rpc" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/discord-rpc/.comrev" 2> /dev/null)" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing DiscordRPC. Please wait..."
            mkdir -p "$SRB2BLDROOT/libraries/discord-rpc/build"
            cmake -S "$SRB2BLDROOT/libraries/discord-rpc" -B "$SRB2BLDROOT/libraries/discord-rpc/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local/stow/discord-rpc -DCMAKE_MACOSX_RPATH=OFF
            cmake --build "$SRB2BLDROOT/libraries/discord-rpc/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
            sudo -E cmake --install "$SRB2BLDROOT/libraries/discord-rpc/build"
            sudo -E stow -v --adopt discord-rpc
            COMREV=$(git -C "$SRB2BLDROOT/libraries/discord-rpc" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/discord-rpc/.comrev"

        fi

    fi

    # Download libopenvr's source code, build and install it.
    if ([ "$BUILD" = "$BUILDPATH/srb2-vr" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]); then

        if [ ! -d "$SRB2BLDROOT/libraries/libopenvr/.git" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libopenvr's source code. Please wait..."
            git clone https://github.com/ValveSoftware/openvr.git --recursive --branch "v$MACOSOPENVRVER" "$SRB2BLDROOT/libraries/libopenvr"

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libopenvr. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libopenvr" clean -qdfx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libopenvr" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/libopenvr" checkout -q master
            git -C "$SRB2BLDROOT/libraries/libopenvr" pull --recurse-submodules --rebase --autostash
            git -C "$SRB2BLDROOT/libraries/libopenvr" checkout -q "v$MACOSOPENVRVER"

        fi

        if ([ ! -f "/usr/local/lib/libopenvr_api.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libopenvr_api.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libopenvr_api.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libopenvr/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libopenvr" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libopenvr/.comrev" 2> /dev/null)" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libopenvr. Please wait..."
            mkdir -p "$SRB2BLDROOT/libraries/libopenvr/build"
            cp -rf "$SRB2BLDROOT/libraries/libopenvr/src/vrcommon" "$SRB2BLDROOT/libraries/libopenvr/src/vrcore"
            cmake -S "$SRB2BLDROOT/libraries/libopenvr" -B "$SRB2BLDROOT/libraries/libopenvr/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DBUILD_UNIVERSAL=OFF -DBUILD_SHARED=ON -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libopenvr -DCMAKE_MACOSX_RPATH=OFF
            cmake --build "$SRB2BLDROOT/libraries/libopenvr/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
            sudo -E cmake --install "$SRB2BLDROOT/libraries/libopenvr/build"
            sudo -E stow -v --adopt libopenvr
            COMREV=$(git -C "$SRB2BLDROOT/libraries/libopenvr" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libopenvr/.comrev"

        fi

    fi

    # Patching CMakeLists.txt to prevent macOS from loading external frameworks prior to libraries installed by Homebrew.
    if [ "$BUILD" != "$BUILDPATH/srb2-2.0" ] && [ "$BUILD" != "$BUILDPATH/srb2-final-demo" ]; then

        gawk -i inplace '{gsub("add_definitions\\(-DMACOSX\\)","add_definitions(-DMACOSX)\n        set(CMAKE_FIND_FRAMEWORK LAST)");print}' "$BUILD/CMakeLists.txt"

        gawk -i inplace '{gsub("set\\(CMAKE_C_FLAGS \\${CMAKE_C_FLAGS} -Wno-trigraphs\\)","");print}' "$BUILD/src/CMakeLists.txt"

    fi

    # Patching SRB2 Uncapped Plus' source code to fix error with implicit declaration of function R_ResetFirstLerp is invalid in C99 [-Werror,-Wimplicit-function-declaration]. Thanks Lach for help with this.
    if [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ]; then

        gawk -i inplace '{gsub("#include \"doomdef.h\"","#include \"r_fps.h\"\n#include \"doomdef.h\"");print}' "$BUILD/src/p_setup.c"

    fi

    # Modify the game's configuration and assets directory names to avoid conflicts between installed builds.
    if [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2_21\"","#define DEFAULTDIR \"srb2_2.1\"");print}' "$BUILD/src/doomdef.h"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2\"","#define DEFAULTDIR \"srb2_2.0\"");print}' "$BUILD/src/doomdef.h"

    elif [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2\"","#define DEFAULTDIR \"srb2persona\"");print}' "$BUILD/src/doomdef.h"

    fi

    # Compile the game's source code.
    $PRINTF "$MESSAGE\n%s\n\e[0m" "Building $BUILDNAME. Please wait..."
    mkdir -p "$BUILD/build"
    cmake -S "$BUILD" -B "$BUILD/build" -DCMAKE_OSX_SYSROOT="$SDKROOT" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCPACK_PACKAGE_DESCRIPTION_SUMMARY="$BUILDNAME" -DCPACK_PACKAGE_FILE_NAME="$BUILDNAME-$COMREV" -DCMAKE_BUILD_TYPE=Release -DSRB2_CPACK_GENERATOR=DragNDrop -DCMAKE_INSTALL_PREFIX=/usr/local/opt/srb2-apps -DSDL2_INCLUDE_DIR="$LIBSDL2PREFIX/include/SDL2" -DSDL2_LIBRARY="$LIBSDL2PREFIX/lib/libSDL2.dylib" -DGME_INCLUDE_DIR="$LIBGMEPREFIX/include/gme" -DGME_LIBRARY="$LIBGMEPREFIX/lib/libgme.dylib" -DOPENMPT_INCLUDE_DIR="$LIBOPENMPTPREFIX/include/libopenmpt" -DOPENMPT_LIBRARY="$LIBOPENMPTPREFIX/lib/libopenmpt.dylib" -DCMAKE_SKIP_RPATH=ON -DCMAKE_SKIP_INSTALL_RPATH=ON $CONF
    cmake --build "$BUILD/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release

    # Get app icon.
    mkdir -p "$BUILD/build/bin/$BUILDNAME.app/Contents/Resources"
    makeicns -in "$BUILD/src/win32/Srb2win.ico" -64 -out "$BUILD/build/bin/$BUILDNAME.app/Contents/Resources/Srb2mac.icns" 2> /dev/null
    gawk -i inplace -v RS= '{sub("<key>CFBundleIconFile</key>\n	<string></string>","<key>CFBundleIconFile</key>\n	<string>Srb2mac</string>");print}' "$BUILD/build/bin/$BUILDNAME.app/Contents/Info.plist"

    # Create /usr/local/lib, if does not exist.
    if [ ! -d /usr/local/lib ]; then

        sudo mkdir -p /usr/local/lib

    fi

    # Fix paths of installed libraries.
    if [ -f "$(find /Library/Developer/CommandLineTools/usr/lib/clang -name libclang_rt.ubsan_osx_dynamic.dylib | head -n1)" ]; then

        sudo ln -sf /Library/Developer/CommandLineTools/usr/lib/clang/*/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib /usr/local/lib/libclang_rt.ubsan_osx_dynamic.dylib
        sudo install_name_tool -change "@rpath/libclang_rt.ubsan_osx_dynamic.dylib" "/usr/local/lib/libclang_rt.ubsan_osx_dynamic.dylib" /usr/local/lib/libgme.dylib

    fi

    if [ -f /usr/local/lib/libbrotlicommon.dylib ]; then

        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "/usr/local/lib/libbrotlicommon.dylib" /usr/local/lib/libbrotlidec.dylib
        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "/usr/local/lib/libbrotlicommon.dylib" /usr/local/lib/libbrotlienc.dylib

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" ]; then

        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" $HOMEBREWPREFIX/lib/libbrotlidec.dylib
        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" $HOMEBREWPREFIX/lib/libbrotlienc.dylib

    fi

    if [ -f "$MACPORTPREFIX/lib/libbrotlicommon.dylib" ]; then

        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$MACPORTPREFIX/lib/libbrotlicommon.dylib" $MACPORTPREFIX/lib/libbrotlidec.dylib
        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$MACPORTPREFIX/lib/libbrotlicommon.dylib" $MACPORTPREFIX/lib/libbrotlienc.dylib

    fi

    if [ -f /usr/local/lib/libSDL2_mixer.dylib ]; then

        sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "/usr/local/lib/libSDL2.dylib" /usr/local/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libSDL2-2.0.dylib" "/usr/local/lib/libSDL2.dylib" /usr/local/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "@rpath/libmodplug.dylib" "/usr/local/lib/libmodplug.dylib" /usr/local/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libmodplug.dylib" "/usr/local/lib/libmodplug.dylib" /usr/local/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libSDL2_mixer.dylib

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libSDL2_mixer.dylib" ]; then

        sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "@rpath/libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib

    fi

    if [ -f "$MACPORTPREFIX/lib/libSDL2_mixer.dylib" ]; then

        sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "@rpath/libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib

    fi

    if [ -f /usr/local/lib/libvorbis.dylib ]; then

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbis.dylib
        sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbis.dylib

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libvorbis.dylib" ]; then

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbis.dylib

    fi

    if [ -f "$MACPORTPREFIX/lib/libvorbis.dylib" ]; then

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbis.dylib

    fi

    if [ -f /usr/local/lib/libvorbisfile.dylib ]; then

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbisfile.dylib
        sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbisfile.dylib

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libvorbisfile.dylib" ]; then

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbisfile.dylib

    fi

    if [ -f "$MACPORTPREFIX/lib/libvorbisfile.dylib" ]; then

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbisfile.dylib

    fi

    if [ -f /usr/local/lib/libopenmpt.dylib ]; then

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libopenmpt.dylib
        sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libopenmpt.dylib

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libopenmpt.dylib" ]; then

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libopenmpt.dylib

    fi

    if [ -f "$MACPORTPREFIX/lib/libopenmpt.dylib" ]; then

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libopenmpt.dylib

    fi

    # Fix linking of libraries to build's binary.
    if [ -f /usr/local/lib/libSDL2.dylib ]; then

        install_name_tool -change "@rpath/libSDL2-2.0.dylib" "/usr/local/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libSDL2-2.0.dylib" "/usr/local/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libSDL2.dylib" ]; then

        install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$MACPORTPREFIX/lib/libSDL2.dylib" ]; then

        install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f /usr/local/lib/libmodplug.dylib ]; then

        install_name_tool -change "@rpath/libmodplug.dylib" "/usr/local/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libmodplug.dylib" "/usr/local/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libmodplug.dylib" ]; then

        install_name_tool -change "@rpath/libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$MACPORTPREFIX/lib/libmodplug.dylib" ]; then

        install_name_tool -change "@rpath/libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f /usr/local/lib/libopenmpt.dylib ]; then

        install_name_tool -change "bin/libopenmpt.dylib" "/usr/local/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libopenmpt.dylib" "/usr/local/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libopenmpt.dylib" ]; then

        install_name_tool -change "bin/libopenmpt.dylib" "$HOMEBREWPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libopenmpt.dylib" "$HOMEBREWPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$MACPORTPREFIX/lib/libopenmpt.dylib" ]; then

        install_name_tool -change "bin/libopenmpt.dylib" "$MACPORTPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libopenmpt.dylib" "$MACPORTPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f /usr/local/lib/libgme.dylib ]; then

        install_name_tool -change "@rpath/libgme.0.dylib" "/usr/local/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libgme.0.dylib" "/usr/local/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libgme.dylib" ]; then

        install_name_tool -change "@rpath/libgme.0.dylib" "$HOMEBREWPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libgme.0.dylib" "$HOMEBREWPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$MACPORTPREFIX/lib/libgme.dylib" ]; then

        install_name_tool -change "@rpath/libgme.0.dylib" "$MACPORTPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libgme.0.dylib" "$MACPORTPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f /usr/local/lib/libpng.dylib ]; then

        install_name_tool -change "@rpath/libpng16.16.dylib" "/usr/local/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libpng16.16.dylib" "/usr/local/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libpng.dylib" ]; then

        install_name_tool -change "@rpath/libpng16.16.dylib" "$HOMEBREWPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libpng16.16.dylib" "$HOMEBREWPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$MACPORTPREFIX/lib/libpng.dylib" ]; then

        install_name_tool -change "@rpath/libpng16.16.dylib" "$MACPORTPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libpng16.16.dylib" "$MACPORTPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f /usr/local/lib/libdiscord-rpc.dylib ]; then

        install_name_tool -change "@rpath/libdiscord-rpc.dylib" "/usr/local/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libdiscord-rpc.dylib" "/usr/local/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libdiscord-rpc.dylib" ]; then

        install_name_tool -change "@rpath/libdiscord-rpc.dylib" "$HOMEBREWPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libdiscord-rpc.dylib" "$HOMEBREWPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$MACPORTPREFIX/lib/libdiscord-rpc.dylib" ]; then

        install_name_tool -change "@rpath/libdiscord-rpc.dylib" "$MACPORTPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libdiscord-rpc.dylib" "$MACPORTPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f /usr/local/lib/libopenvr_api.dylib ]; then

        install_name_tool -change "@rpath/libopenvr_api.dylib" "/usr/local/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libopenvr_api.dylib" "/usr/local/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libopenvr_api.dylib" ]; then

        install_name_tool -change "@rpath/libopenvr_api.dylib" "$HOMEBREWPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libopenvr_api.dylib" "$HOMEBREWPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    if [ -f "$MACPORTPREFIX/lib/libopenvr_api.dylib" ]; then

        install_name_tool -change "@rpath/libopenvr_api.dylib" "$MACPORTPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
        install_name_tool -change "libopenvr_api.dylib" "$MACPORTPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

    fi

    # Building App Bundle.
    if [ "$APPBUNDLE" = 1 ]; then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Building $BUILDNAME's App Bundle. Please wait..."
        make -k -j$(($(sysctl -n hw.logicalcpu) + 1)) -C "$BUILD/build" package

    # Installing build's binary, assets, libraries, icons and desktop file to the system.
    else

        SRB2MACPATH="/usr/local/opt/srb2-apps/$BUILDNAME.app"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's binary, assets, libraries, icons and desktop file to the system. Please wait..."
        sudo -E make -C "$BUILD/build" install

        # Saving configuration flags for future upgrades.
        $PRINTF "%s\n" "$CONF" > "$BUILD/conf"

        if [ -n "$(cat "$BUILD/conf")" ]; then

            CONF=$(cat "$BUILD/conf")

        fi

        # Adding path to commit revision file.
        COMREVFILEPATH="$BUILD/.comrev"

        # Making symbolic link to .app file in /Applications.
        SRB2MACLINK="/Applications/$BUILDNAME.app"
        sudo rm -rf "$SRB2MACLINK"
        sudo ln -sf "$SRB2MACPATH" "$SRB2MACLINK"

    fi
}

installtowindows() {
    # Saving configuration flags to variable.
    if [ -n "$(cat "$BUILD/conf")" ]; then

        CONF=$(cat "$BUILD/conf")

    fi

    # Adding path to commit revision file.
    COMREVFILEPATH="$BUILD/.comrev"

    # Installing build's binary, assets, libraries, icons and desktop files to the system.
    $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's binary, assets, libraries, icons and desktop files to the system. Please wait..."

    if [ "$BUILD" = "$BUILDPATH/srb2" ]; then

        SRB2WINDIR="SRB2"
        SRB2WINMENUDIR="Sonic Robo Blast 2"
        SRB2WINBIN="srb2win$IS64.exe"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/bin/$SRB2WINBIN" "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/libgcc_s_sjlj-1.dll" "$BUILD/build/AppDir/usr/lib/libstdc++-6.dll" "$BUILD/build/AppDir/usr/lib/libfluidsynth-2.dll" "$BUILD/build/AppDir/usr/lib/openmpt-"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ]; then

        SRB2WINDIR="SRB2 Uncapped Plus"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Uncapped PLUS"
        SRB2WINBIN="srb2win$IS64.exe"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/bin/$SRB2WINBIN" "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/libgcc_s_sjlj-1.dll" "$BUILD/build/AppDir/usr/lib/libstdc++-6.dll" "$BUILD/build/AppDir/usr/lib/libfluidsynth-2.dll" "$BUILD/build/AppDir/usr/lib/openmpt-"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-netplus" ]; then

        SRB2WINDIR="SRB2 NetPlus"
        SRB2WINMENUDIR="Sonic Robo Blast 2 NetPlus"
        SRB2WINBIN="srb2win$IS64.exe"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/bin/$SRB2WINBIN" "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/libgcc_s_sjlj-1.dll" "$BUILD/build/AppDir/usr/lib/libstdc++-6.dll" "$BUILD/build/AppDir/usr/lib/libfluidsynth-2.dll" "$BUILD/build/AppDir/usr/lib/openmpt-"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-vr" ]; then

        SRB2WINDIR="SRB2 VR"
        SRB2WINMENUDIR="Sonic Robo Blast 2 VR"
        SRB2WINBIN="srb2win.exe"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/bin/$SRB2WINBIN" "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/libgcc_s_sjlj-1.dll" "$BUILD/build/AppDir/usr/lib/libstdc++-6.dll" "$BUILD/build/AppDir/usr/lib/libfluidsynth-2.dll" "$BUILD/build/AppDir/usr/lib/openmpt-"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -openvr -win" > "$SRB2WINPATH/$SRB2WINDIR (OpenVR).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        SRB2WINDIR="SRB2 v2.1 Legacy"
        SRB2WINMENUDIR="Sonic Robo Blast 2 v2.1 Legacy"
        SRB2WINBIN="srb2win.exe"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/bin/Mingw$IS64/Release/$SRB2WINBIN" "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/exchndl.dll" "$BUILD/build/AppDir/usr/lib/libFLAC-8.dll" "$BUILD/build/AppDir/usr/lib/libmodplug-1.dll" "$BUILD/build/AppDir/usr/lib/libmpg123-0.dll" "$BUILD/build/AppDir/usr/lib/libogg-0.dll" "$BUILD/build/AppDir/usr/lib/libopus-0.dll" "$BUILD/build/AppDir/usr/lib/libopusfile-0.dll" "$BUILD/build/AppDir/usr/lib/libvorbis-0.dll" "$BUILD/build/AppDir/usr/lib/libvorbisfile-3.dll" "$BUILD/build/AppDir/usr/lib/mgwhelp.dll" "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        SRB2WINDIR="SRB2 v2.0"
        SRB2WINMENUDIR="Sonic Robo Blast 2 v2.0"
        SRB2WINBIN="srb2win.exe"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/bin/Mingw/Release/$SRB2WINBIN" "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/r_opengl.dll" "$BUILD/build/AppDir/usr/lib/fmod.dll" "$SRB2WINPATH"
        touch "$SRB2WINPATH/md2.dat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        SRB2WINDIR="SRB2 Final Demo"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Final Demo"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINBIN="srb2sdl.exe"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/bin/Mingw/Release/$SRB2WINBIN" "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/libgcc_s_sjlj-1.dll" "$BUILD/build/AppDir/usr/lib/libstdc++-6.dll" "$BUILD/build/AppDir/usr/lib/libfluidsynth-2.dll" "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        SRB2WINDIR="SRB2 Persona"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Persona"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINBIN="srb2win.exe"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/bin/Mingw$IS64/Release/$SRB2WINBIN" "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/libgcc_s_sjlj-1.dll" "$BUILD/build/AppDir/usr/lib/libstdc++-6.dll" "$BUILD/build/AppDir/usr/lib/libfluidsynth-2.dll" "$BUILD/build/AppDir/usr/lib/openmpt-"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ]; then

        SRB2WINDIR="SRB2 Kart"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Kart"
        SRB2WINBIN="srb2kart.exe"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/bin/Mingw$IS64/Release/$SRB2WINBIN" "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/mgwhelp.dll" "$BUILD/build/AppDir/usr/lib/libvorbis-0.dll" "$BUILD/build/AppDir/usr/lib/libvorbisfile-3.dll" "$BUILD/build/AppDir/usr/lib/libopus-0.dll" "$BUILD/build/AppDir/usr/lib/libopusfile-0.dll" "$BUILD/build/AppDir/usr/lib/libogg-0.dll" "$BUILD/build/AppDir/usr/lib/libmpg123-0.dll" "$BUILD/build/AppDir/usr/lib/libmodplug-1.dll" "$BUILD/build/AppDir/usr/lib/libFLAC-8.dll" "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ]; then

        SRB2WINDIR="SRB2 Kart Moe Mansion"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Kart Moe Mansion"
        SRB2WINBIN="srb2kart.exe"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/bin/Mingw$IS64/Release/$SRB2WINBIN" "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/mgwhelp.dll" "$BUILD/build/AppDir/usr/lib/libvorbis-0.dll" "$BUILD/build/AppDir/usr/lib/libvorbisfile-3.dll" "$BUILD/build/AppDir/usr/lib/libopus-0.dll" "$BUILD/build/AppDir/usr/lib/libopusfile-0.dll" "$BUILD/build/AppDir/usr/lib/libogg-0.dll" "$BUILD/build/AppDir/usr/lib/libmpg123-0.dll" "$BUILD/build/AppDir/usr/lib/libmodplug-1.dll" "$BUILD/build/AppDir/usr/lib/libFLAC-8.dll" "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        SRB2WINDIR="SRB2 Kart VR"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Kart VR"
        SRB2WINBIN="srb2kart.exe"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/bin/Mingw/Release/$SRB2WINBIN" "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/mgwhelp.dll" "$BUILD/build/AppDir/usr/lib/libvorbis-0.dll" "$BUILD/build/AppDir/usr/lib/libvorbisfile-3.dll" "$BUILD/build/AppDir/usr/lib/libopus-0.dll" "$BUILD/build/AppDir/usr/lib/libopusfile-0.dll" "$BUILD/build/AppDir/usr/lib/libogg-0.dll" "$BUILD/build/AppDir/usr/lib/libmpg123-0.dll" "$BUILD/build/AppDir/usr/lib/libmodplug-1.dll" "$BUILD/build/AppDir/usr/lib/libFLAC-8.dll" "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -openvr -win" > "$SRB2WINPATH/$SRB2WINDIR (OpenVR).bat"

    fi

    # Using VBScript to create menu entry for Windows.
    cat > "$BUILD/build/CreateShortcut.vbs" << WINMENUSHORTCUT
Set oWS = CreateObject("WScript.Shell")
strHomeFolder = oWS.ExpandEnvironmentStrings("%USERPROFILE%")

Set oFSO = CreateObject("Scripting.FileSystemObject")
oFSO.CreateFolder strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR"

Set oWS = WScript.CreateObject("WScript.Shell")
sLinkFile = strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR\\$SRB2WINDIR (Software).bat.lnk"
Set oLink = oWS.CreateShortcut(sLinkFile)
oLink.TargetPath = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINDIR (Software).bat"
oLink.WorkingDirectory = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR"
oLink.IconLocation = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINBIN"
oLink.Save

sLinkFile = strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR\\$SRB2WINDIR (OpenGL).bat.lnk"
Set oLink = oWS.CreateShortcut(sLinkFile)
oLink.TargetPath = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINDIR (OpenGL).bat"
oLink.WorkingDirectory = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR"
oLink.IconLocation = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINBIN"
oLink.Save
WINMENUSHORTCUT

    if [ "$BUILD" = "$BUILDPATH/srb2-vr" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        cat >> "$BUILD/build/CreateShortcut.vbs" << WINMENUSHORTCUT
sLinkFile = strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR\\$SRB2WINDIR (OpenVR).bat.lnk"
Set oLink = oWS.CreateShortcut(sLinkFile)
oLink.TargetPath = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINDIR (OpenVR).bat"
oLink.WorkingDirectory = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR"
oLink.IconLocation = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINBIN"
oLink.Save
WINMENUSHORTCUT

    fi

    cscript "$BUILD/build/CreateShortcut.vbs" 2> /dev/null
}

listasset() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/assets" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "Can't find downloaded assets."
        exit

    fi

    # List downloaded assets.
    find "$SRB2BLDROOT/assets" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | gawk -F'/' '{print $NF}' | sort
}

listbuild() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/builds" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "Can't find downloaded builds."
        exit

    fi

    # List downloaded source code.
    find "$SRB2BLDROOT/builds" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | gawk -F'/' '{print $NF}' | sort
}

listconfig() {
    clear
    if [ -z "$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "Can't find installed builds."
        exit

    fi

    # List configuration flags for installed build.
    $PRINTF "$MESSAGE%s\n\e[0m" "Please choose installed build by typing number and then pressing enter. Press enter or ctrl+c to quit."
    array=$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)
    arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            CONF=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
            $PRINTF "%s\n" ""
            gawk '/---------------/ {gsub("---------------","");getline;print}' "$CONF"
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

listinstalled() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "Can't find installed builds."
        exit

    fi

    # List files for installed build.
    $PRINTF "$MESSAGE%s\n\e[0m" "Please choose installed build by typing number and then pressing enter. Press enter or ctrl+c to quit."
    array=$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)
    arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            CONF=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
            $PRINTF "%s\n" ""
            gawk '/^/,/---------------/ {gsub("---------------","");print}' "$CONF"
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

sudo_ping() {
    # Make sudo to extend password timeout.
    if [ -n "$SUDO_PID" ]; then

        if [ "$1" = stop ]; then

            kill "$SUDO_PID"
            return

        else

            return

        fi

    fi

    sudo -v

    if [ $? -eq 1 ]; then

        return

    fi

    while true; do

        sudo -v
        sleep 1

    done &
    SUDO_PID=$!

    # Clean the game's source code and exit shell script in case of error or cancelling script.
    trap 'sudo_ping stop ; $PRINTF "$SUCCESS\n\n%s\n\e[0m" "Cleaning up source code and exiting shell script. Please wait..." ; cleansource ; exit' 0 1 2 3 6 15
}

upgrade() {
    clear

    if [ -z "$(find "$BUILDPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | gawk -F'/' '{print $NF}' | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "Can't find installed builds."
        exit

    fi

    # Make a loop to find the SRB2 source code directories and then update them one by one.
    for u in $(find "$BUILDPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | gawk -F'/' '{print $NF}' | sort); do

        export BUILD="$BUILDPATH/$u"

        buildname

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up $BUILDNAME. Please wait..."
        cleansource
        git -C "$BUILD" pull --recurse-submodules --rebase --autostash

        if [ -f "$BUILD/.comrev" ] && [ "$(git -C "$BUILD" rev-parse --short HEAD)" != "$(cat "$BUILD/.comrev")" ]; then

            export UPGRADE="$u"

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Upgrading $BUILDNAME. Please wait..."

            if [ "$OS" = "Darwin" ]; then

                installtomacos

                cleansource

                installtolist

            else

                dockerentry

                dockerrun

            fi

            if ([ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]) && [ -d "$BUILD/build/AppDir" ]; then

                installtowindows

                cleansource

                installtolist

            elif [ "$OS" = "Linux" ] && [ -d "$BUILD/build/AppDir" ]; then

                installtolinux

                cleansource

                installtolist

            fi

        fi

    done && $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Upgrading is successful."
}

usage() {
    clear

    $PRINTF "%s\n" "
Build and install SRB2/SRB2Kart from source.

Usage: srb2bld [OPTIONS]
  OPTIONS:
     -h, --help                             Show this help text.
     -ab, --appbundle                       Compile and create distributable App Bundle of SRB2/SRB2Kart build, which is packaged in DMG file (macOS only).
     -ai, --appimage                        Compile and create distributable AppImage of SRB2/SRB2Kart build (Linux only).
     -c, --compatibility                    Display compatibility table of compiling SRB2/SRB2Kart builds for each operating system.
     -i, --install                          Compile and install SRB2/SRB2Kart build.
     -la, --listasset                       List downloaded SRB2/SRB2Kart assets.
     -lb, --listbuild                       List downloaded SRB2/SRB2Kart builds.
     -lc, --listconfig                      List compilation flags of installed SRB2/SRB2Kart builds.
     -li, --listinstalled                   List installed SRB2/SRB2Kart builds.
     -ra, --removeasset                     Remove downloaded asset for SRB2/SRB2Kart build.
     -rb, --removebuild                     Remove downloaded source code for SRB2/SRB2Kart build.
     -ui, --uninstall                       Uninstall SRB2/SRB2Kart build.
     -up, --upgrade                         Upgrade installed SRB2/SRB2Kart build.

  EXAMPLES:
     1. Compile and install SRB2/SRB2Kart build:
            srb2bld --install

     2. Compile and create AppImage of SRB2/SRB2Kart build (Linux only):
            srb2bld --appimage

     3. List installed SRB2/SRB2Kart builds:
            srb2bld --listinstalled

     4. Uninstall SRB2/SRB2Kart build:
            srb2bld --uninstall

     5. Display compatibility table of compiling SRB2/SRB2Kart builds for each operating system:
            srb2bld --compatibility

  NOTES:
     1. Old builds like SRB2 v2.0 and SRB2 Final Demo may not build/run properly on modern Linux distributions/macOS/Windows.

     2. WARNING for macOS users! This script makes changes from rpath to absolute paths within some libraries installed from Homebrew, MacPorts or compiled (mostly should affects libraries compiled by user), that are associated with SRB2 binary, so installing or making App Bundles would be successful. In the future this could make unexpected results with apps or SRB2 builds, that depend on those libraries.

     3. If you want to compile some builds with DiscordRPC support (SRB2 Uncapped Plus, SRB2 NetPlus, SRB2 Kart, SRB2 Kart Moe Mansion and SRB2 Kart VR), then type \"HAVE_DISCORDRPC=1\" (Linux/Windows) or \"-DSRB2_CONFIG_HAVE_DISCORDRPC=ON\" (macOS), when the script asks about optional compilation flags (using \"srb2bld --install\" command).

     4. If on Linux you get error with \"/dev/fuse\" or FUSE when running script, then load fuse module with \"sudo modprobe fuse\". You can write \"fuse\" in configuration file, usually in file \"/etc/modules\" or \"/etc/modules-load.d/fuse.conf\" or \"/etc/conf.d/modules/fuse.conf\", to automatically load this module at boot.

     5. If 64-bit Linux system has issues with creating or loading \"Sonic Robo Blast 2 Final Demo\" (AppImage or installed), make sure you have installed 32-bit versions of FUSE and glibc:
         - Debian/Ubuntu/Debian based/Ubuntu based: sudo dpkg --add-architecture i386 && sudo apt update && sudo apt install fuse:i386 libc6:i386 zlib1g:i386

     6. If Linux system has issue with loading compiled libraries, even though they are installed, set export LD_LIBRARY_PATH=\"/usr/local/lib:\$LD_LIBRARY_PATH\" in \"~/.bash_profile\" or \"~/.zshrc\".
"
}

case "$1" in

    -h | --help)

        usage

        ;;

    "")

        defaultmessage

        ;;

    -ab | --appbundle)

        appbundle

        ;;

    -ai | --appimage)

        appimage

        ;;

    -c | --compatibility)

        compatibility

        ;;

    -i | --install)

        chooseinstall

        ;;

    -la | --listasset)

        listasset

        ;;

    -lb | --listbuild)

        listbuild

        ;;

    -lc | --listconfig)

        listconfig

        ;;

    -li | --listinstalled)

        listinstalled

        ;;

    -ra | --removeasset)

        chooseremoveasset

        ;;

    -rb | --removebuild)

        chooseremovebuild

        ;;

    -ui | --uninstall)

        chooseuninstall

        ;;

    -up | --upgrade)

        upgrade

        ;;

esac
