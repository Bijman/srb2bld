#!/bin/sh

set -e

# Set environment variables.
if [ "$(uname)" = "Darwin" ]; then

    PRINTF="printf"

else

    PRINTF=$(which -a printf | gawk '/bin/ {print}' | head -n1)

fi

ARCH=$(uname -m)
OS=$(uname)

if [ "$OS" = "Linux" ]; then

    OSID=$(gawk -F'=' '/^ID_LIKE=/ {gsub("\"","");print $NF}' /etc/os-release)
    OSNAME=$(gawk -F'=' '/^NAME=/ {gsub("\"","");print $NF}' /etc/os-release)

fi

IS64=$($PRINTF "%s\n" "$ARCH" | gawk 'match($0, /64/) {print substr($0, RSTART, RLENGTH)}')
USER=$(whoami)

if [ "$OS" = "Darwin" ]; then

    SRB2BLDROOT="$HOME/Library/srb2bld"

elif [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]; then

    SRB2BLDROOT="$HOME/AppData/Roaming/srb2bld"

else

    SRB2BLDROOT="$HOME/.local/share/srb2bld"

fi

if [ -x "$(which doas 2> /dev/null)" ]; then

    SUDO="doas"

else

    SUDO="sudo"

fi

BUILDPATH="$SRB2BLDROOT/builds"
DEBVER="jessie"
UBUVER="18.04"
UBUSOFTVER="22.04"
SRB2OLDVER="2.2.10"
SRB2PERSONAOLDVER="1.3.5"
SRB2KARTOLDVER="v1.3"
MINGWCCVER="gcc-10-win32"
MINGWOLDCCVER="gcc-4.9-win32"
MINGWCXXVER="g++-10-win32"

if [ "$(ldd --version 2>&1 | gawk 'match($0, /musl/) {print substr($0, RSTART, RLENGTH)}' | gawk '!a[$0]++ {print}')" = "musl" ]; then

    GCCVER="gcc"
    GCCOLDVER="gcc-6"
    GXXVER="g++"

else

    GCCVER="gcc-10"
    GCCOLDVER="gcc-4.9"
    GXXVER="g++-10"

fi

if [ "$OSID" = "debian" ] || [ "$OSID" = "ubuntu" ] || [ "$OSNAME" = "Debian GNU/Linux" ] || [ "$OSNAME" = "Fedora Linux" ] || [ "$OSNAME" = "openSUSE Leap" ]; then

    UBUSOFTVER="20.04"

fi

LNXFMODVER="fmodapi375linux"
LNXPNG12VER="libpng12"
LNXSDL2MIXERXVER="master"
LNXOPENMPTVER="master"
LNXGMEVER="0.6.2"
LNXDISCORDRPCVER="master"
LNXOPENVRVER="1.10.30"
LNXSFMLVER="2.4.x"

if [ "$OS" = "Darwin" ]; then

    MACOSVER="10.9"
    MACOSVERSLADE="11"
    MACOSPNGVER="1.6.37"
    MACOSOGGVER="1.3.5"
    MACOSVORBISVER="1.3.7"
    MACOSMPG123VER="master"
    MACOSMODPLUGVER="master"
    MACOSSDL2VER="2.0.18"
    MACOSSDL2MIXERVER="2.0.4"
    MACOSSDL2MIXERXVER="2.5.0"
    MACOSOPENMPTVER="0.4.12"
    MACOSGMEVER="0.6.2"
    MACOSDISCORDRPCVER="master"
    MACOSOPENVRVER="1.10.30"
    HOMEBREWPREFIX="$(brew --prefix)"
    MACPORTPREFIX="/opt/local"

fi

COMPTABLEURL="https://gist.githubusercontent.com/Bijman/dae1e123800af25ef28689bd644a4516/raw"
FAILURE="\e[1;91m"
SUCCESS="\e[1;92m"
NOTICE="\e[1;93m"
MESSAGE="\e[1;94m"
PROMPT="\e[1;97m"

checkuserid() {
    # Check id of login running this script.
    if [ "$(id -u)" -eq 0 ]; then

        $PRINTF "$NOTICE%s\n\e\n[0m" "WARNING: It is not recommended to run srb2bld as root. Press ctrl+c to quit and run again script as user in \"docker\" group or continue."

    fi
}

appbundle() {
    clear

    # Blocking access to this option for users that uses OS other than macOS since App Bundles are macOS exclusive.
    if [ "$OS" != "Darwin" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Currently building App Bundles is only available for macOS. Exiting."
        exit

    fi

    # We have to set this in order to make App Bundle in installtomacos function.
    APPBUNDLE=1

    # Set current working directory.
    MACOSPWD="$(pwd)"

    choosebuild

    buildname

    choosebranch

    preparebuild

    installtomacos

    # Set name of App Bundle in message.
    APPBUNDLENAME=$(find "$BUILD/build" -name "*.dmg" 2> /dev/null | gawk -F'/' '{print $NF}' | sort | head -n1)

    # Rename App Bundle and move it to working directory.
    if [ -d "$BUILD/build/package" ]; then

        mv -f "$BUILD/build/package/$APPBUNDLENAME" "$MACOSPWD/$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","_");print}')-$GITVER-$COMREV.dmg"

    else

        mv -f "$BUILD/build/$APPBUNDLENAME" "$MACOSPWD/$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","_");print}')-$GITVER-$COMREV.dmg"

    fi

    $PRINTF "$SUCCESS\n%s\n\e[0m\a" "App Bundle for $BUILDNAME is done. Look for $($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","_");print}')-$GITVER-$COMREV.dmg in $MACOSPWD path."
}

appimage() {
    clear

    # Blocking access to this option for users that have OS other than Linux since AppImages are Linux exclusive.
    if [ "$OS" != "Linux" ] || [ -z "$(ldd --version 2>&1 | gawk '/Free Software Foundation/ {print}')" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Currently building AppImages is only available for Linux with glibc. Exiting."
        exit

    fi

    # We have to set this in order to make AppImage in Docker container.
    APPIMAGE=1

    # Set current working directory.
    LNXPWD="$(pwd)"

    choosebuild

    buildname

    choosebranch

    preparebuild

    sudo_ping

    dockerentry

    dockerrun

    # Export commit revision name before creating AppImage.
    export VERSION="$GITVER-$(git -C "$BUILD" rev-parse --short HEAD)"

    # Create AppImage from prepared AppDir.
    cd "$BUILD" || exit
    "$BUILD/appimagetool" -n "$BUILD/build/AppDir" 2> /dev/null

    # Set name of AppImage in message.
    APPIMAGENAME=$(find "$BUILD" -name "*.AppImage" 2> /dev/null | gawk -F'/' '{print $NF}')

    # Move created AppImage to working directory.
    mv -f "$BUILD/"*.AppImage "$LNXPWD" 2> /dev/null

    $PRINTF "$SUCCESS\n%s\n\e[0m\a" "AppImage for $BUILDNAME is done. Look for $APPIMAGENAME in $LNXPWD path."
}

buildname() {
    # Setting names for fancy display in messages.
    if [ "$BUILD" = "$BUILDPATH/srb2" ]; then

        export BUILDNAME="Sonic Robo Blast 2"

    elif [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ]; then

        export BUILDNAME="Sonic Robo Blast 2 Uncapped PLUS"

    elif [ "$BUILD" = "$BUILDPATH/srb2-netplus" ]; then

        export BUILDNAME="Sonic Robo Blast 2 NetPlus"

    elif [ "$BUILD" = "$BUILDPATH/srb2-vr" ]; then

        export BUILDNAME="Sonic Robo Blast 2 VR"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        export BUILDNAME="Sonic Robo Blast 2 v2.1 Legacy"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        export BUILDNAME="Sonic Robo Blast 2 v2.0"

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        export BUILDNAME="Sonic Robo Blast 2 Final Demo"

    elif [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        export BUILDNAME="Sonic Robo Blast 2 Persona"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ]; then

        export BUILDNAME="Sonic Robo Blast 2 Kart"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ]; then

        export BUILDNAME="Sonic Robo Blast 2 Kart Moe Mansion"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        export BUILDNAME="Sonic Robo Blast 2 Kart VR"

    elif [ "$BUILD" = "$BUILDPATH/srb2-custom" ]; then

        export BUILDNAME="Sonic Robo Blast 2 Custom"

    elif [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

        export BUILDNAME="wadcli"

    elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

        export BUILDNAME="SLADE"

    fi
}

choosebranch() {
    # Download or update build's source code.
    if [ ! -d "$BUILD/.git" ]; then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading $BUILDNAME's source code. Please wait..."
        $GIT "$BUILD"

    elif [ -d "$BUILD/.git" ]; then

        $PRINTF "$MESSAGE\n\n%s\n\e[0m" "Cleaning up source code. Please wait..."
        cleansource
        GITCURVER=$(git -C "$BUILD" rev-parse --abbrev-ref HEAD)

        if [ -n "$GITVER" ]; then

            git -C "$BUILD" checkout -q "$GITVER"

        fi

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating $BUILDNAME's source code. Please wait..."
        git -C "$BUILD" pull --recurse-submodules --rebase --autostash
        git -C "$BUILD" checkout -q "$GITCURVER"

    fi

    GITDEFVER=$(printf "%s\n" "$GITVER" | gawk '{gsub("--branch| ","");print}')
    GITVER="$GITDEFVER"

    # Choose Git branch.
    $PRINTF "$MESSAGE\n%s\n\e[0m" "Please choose branch by typing number and then pressing enter, or just press enter to continue with default branch, which is \"$GITVER\". To quit, press ctrl+c."
    $PRINTF "$NOTICE%s\n\e[0m" "WARNING: By choosing different branch other than default, compilation or running compiled build may fail."
    array=$(git -C "$BUILD" branch -a | gawk -F'/' '!/->/ {print $NF}' | sort -u | gawk '!/^ / {gsub("^* ",""); print}')
    arrayname=$($PRINTF "$(git -C "$BUILD" branch -a | gawk -F'/' '!/->/ {print $NF}' | sort -u | gawk '!/^ / {gsub("^* ","\\e[1;92m* \\e[0m"); print}')\n")
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            GITVER=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
            if [ -d "$BUILD/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Switching to branch \"$GITVER\"."

                if [ -n "$GITVER" ]; then

                    git -C "$BUILD" checkout -q "$GITVER"

                fi

            fi
            break

        else

            if [ -d "$BUILD/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Switching to branch \"$GITVER\"."

                if [ -n "$GITVER" ]; then

                    git -C "$BUILD" checkout -q "$GITVER"

                fi

            fi
            break

        fi

    done
}

choosebuild() {
    clear

    checkuserid

    # Choose and download build.
    while

        $PRINTF "$MESSAGE%s\n\e[0m" "Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."
        for loop in "Build SRB2" "Build SRB2 Uncapped Plus" "Build SRB2 NetPlus" "Build SRB2 VR" "Build SRB2 v2.1 Legacy" "Build SRB2 v2.0" "Build SRB2 Final Demo" "Build SRB2 Persona" "Build SRB2 Kart" "Build SRB2 Kart Moe Mansion" "Build SRB2 Kart VR" "Build SRB2 Custom" "Build wadcli" "Build SLADE"; do $PRINTF "%s\n" "$((i += 1))) $loop"; done
        $PRINTF "#? "
        read -r choose
    do

        unset i
        case "$choose" in

            "1")

                BUILD="$BUILDPATH/srb2"
                GITDEFVER="master"
                GITVER="$GITDEFVER"
                GIT="git clone https://git.do.srb2.org/STJr/SRB2.git --recursive --branch $GITVER"
                break

                ;;

            "2")

                BUILD="$BUILDPATH/srb2-uncapped-plus"
                GITDEFVER="uncapped-plus"
                GITVER="$GITDEFVER"
                GIT="git clone https://git.do.srb2.org/X.organic/SRB2-modified.git --recursive --branch $GITVER"
                break

                ;;

            "3")

                BUILD="$BUILDPATH/srb2-netplus"
                GITDEFVER="master"
                GITVER="$GITDEFVER"
                GIT="git clone https://git.do.srb2.org/JohnFrostFox/netplus.git --recursive --branch $GITVER"
                break

                ;;

            "4")

                BUILD="$BUILDPATH/srb2-vr"
                GITDEFVER="openvr"
                GITVER="$GITDEFVER"
                GIT="git clone https://git.do.srb2.org/chreas/SRB2.git --recursive --branch $GITVER"
                break

                ;;

            "5")

                BUILD="$BUILDPATH/srb2-2.1-legacy"
                GITDEFVER="master"
                GITVER="$GITDEFVER"
                GIT="git clone https://github.com/PandaSRC/srb2-legacy.git --recursive --branch $GITVER"
                break

                ;;

            "6")

                BUILD="$BUILDPATH/srb2-2.0"
                GITDEFVER="master"
                GITVER="$GITDEFVER"
                GIT="git clone https://github.com/STJr/SRB2-Public.git --recursive --branch $GITVER"
                break

                ;;

            "7")

                BUILD="$BUILDPATH/srb2-final-demo"
                GITDEFVER="master"
                GITVER="$GITDEFVER"
                GIT="git clone https://git.do.srb2.org/SteelT/SRB2-OLD.git --recursive --branch $GITVER"
                break

                ;;

            "8")

                BUILD="$BUILDPATH/srb2-persona"
                GITDEFVER="srb2p_22"
                GITVER="$GITDEFVER"
                GIT="git clone https://git.do.srb2.org/SinnamonLat/SRB2.git --recursive --branch $GITVER"
                break

                ;;

            "9")

                BUILD="$BUILDPATH/srb2-kart"
                GITDEFVER="master"
                GITVER="$GITDEFVER"
                GIT="git clone https://git.do.srb2.org/KartKrew/Kart-Public.git --recursive --branch $GITVER"
                break

                ;;

            "10")

                BUILD="$BUILDPATH/srb2-kart-moe-mansion"
                GITDEFVER="moe-mansion"
                GITVER="$GITDEFVER"
                GIT="git clone https://gitlab.com/himie/kart-public.git --recursive --branch $GITVER"
                break

                ;;

            "11")

                BUILD="$BUILDPATH/srb2-kart-vr"
                GITDEFVER="very-cool-renderer"
                GITVER="$GITDEFVER"
                GIT="git clone https://gitlab.com/cschoenig/kart-public.git --recursive --branch $GITVER"
                break

                ;;

            "12")

                BUILD="$BUILDPATH/srb2-custom"

                # Check whether SRB2GITPATH environment variable is set or not.
                if [ -z "$SRB2GITPATH" ]; then

                    $PRINTF "$FAILURE%s\n\e[0m" "ERROR: No SRB2GITPATH is set. Add SRB2GITPATH environment variable to valid Git local or remote path in shell configuration file (for example \".bash_profile\" or \".zshrc\" or \".bashrc\").

EXAMPLES:
        1. export SRB2GITPATH=\"https://github.com/STJr/SRB2\"
        2. export SRB2GITPATH=\"https://git.do.srb2.org/TehRealSalt/SRB2\"
        3. export SRB2GITPATH=\"\$HOME/Builds/SRB2\"
        4. export SRB2GITPATH=\"C:\Builds\SRB2\"
"
                    exit

                fi

                if [ -z "$(find "$SRB2GITPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | head -n1)" ] && [ -z "$(curl -vI "$SRB2GITPATH" 2>&1 | gawk '/> Host:/ {gsub("\r","");print $NF}')" ]; then

                    $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find path to custom SRB2's source code at $SRB2GITPATH path. Exiting."
                    exit

                fi

                # Check if directory srb2-custom exits in script's data path.
                if ([ -d "$BUILD/.git" ] && [ -n "$(git -C "$SRB2GITPATH" diff --shortstat 2> /dev/null)" ]) || ([ -d "$BUILD/.git" ] && [ "$(git -C "$BUILD" remote show origin 2> /dev/null | gawk '/Fetch URL/ {print $NF}')" != "$(git -C "$SRB2GITPATH" remote show origin 2> /dev/null | gawk '/Fetch URL/ {print $NF}')" ]) && ([ -d "$BUILD/.git" ] && [ "$(git -C "$BUILD" remote show origin 2> /dev/null | gawk '/Fetch URL/ {print $NF}')" != "$($PRINTF "$SRB2GITPATH" | gawk '{gsub(".git$","");print}').git" ]); then

                    $PRINTF "$MESSAGE\n%s\n\e[0m" "Found existing directory with source code in $BUILD path. Are you sure you want to remove it? Enter \"yes/Yes\" or \"no/No\" (\"y/Y\" or \"n/N\"). If you choose \"no/No\", \"n/N\" or just press enter, script will continue with current source code's directory in $BUILD path. Press ctrl+c to quit."
                    $PRINTF "$PROMPT\n%s\e[0m" "> "
                    read -r CONFIRM

                    if [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

                        $PRINTF "$MESSAGE\n%s\n\e[0m" "Removing existing source at $BUILD path."
                        sleep 1
                        rm -rf "$BUILD"

                    fi

                fi

                # Fixing Windows path to source code to be found by script.
                if [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]; then

                    SRB2GITPATH=$($PRINTF "%s\n" "$SRB2GITPATH" | gawk 'gsub("\\\\","\\\\");{print}' | gawk '!a[$0]++ {print}')

                fi

                # Copy directory with source code to script's data path.
                if [ -n "$(find "$SRB2GITPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | head -n1)" ] && [ ! -d "$BUILD/.git" ]; then

                    $PRINTF "$MESSAGE\n%s\n\e[0m" "Copying source code. Please wait..."
                    sleep 1
                    cp -rf "$SRB2GITPATH" "$BUILDPATH/srb2-custom"

                fi

                # Set proper default branch.
                if [ -n "$SRB2GITVER" ] && [ ! -d "$BUILD/.git" ]; then

                    GITDEFVER="--branch $SRB2GITVER"

                elif [ -z "$SRB2GITVER" ] && [ ! -d "$BUILD/.git" ]; then

                    git clone $($PRINTF "$SRB2GITPATH" | gawk '{gsub(".git$","");print}').git --recursive "$BUILD"
                    GITDEFVER=$(git -C "$BUILD" remote show origin 2> /dev/null | gawk '/HEAD branch/ {print $NF}')

                else

                    GITDEFVER=$(git -C "$BUILD" remote show origin 2> /dev/null | gawk '/HEAD branch/ {print $NF}')

                fi

                GITVER="$GITDEFVER"
                GIT="git clone $($PRINTF $SRB2GITPATH | gawk '{gsub(".git$","");print}').git --recursive $GITVER"
                break

                ;;

            "13")

                BUILD="$BUILDPATH/wadcli"
                GITDEFVER="main"
                GITVER="$GITDEFVER"
                GIT="git clone https://github.com/JugadorXEI/wadcli.git --recursive --branch $GITVER"
                break

                ;;

            "14")

                BUILD="$BUILDPATH/slade"
                GITDEFVER="master"
                GITVER="$GITDEFVER"
                GIT="git clone https://github.com/sirjuddington/SLADE.git --recursive --branch $GITVER"
                break

                ;;

            *)

                $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                exit

                ;;

        esac

    done
}

chooseinstall() {
    clear

    # Install build.
    if [ "$OS" != "Linux" ] && [ "$OS" != "Darwin" ] && [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" != "MINGW64" ] && [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" != "MINGW" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Currently building and installing is only available for Linux, macOS and Windows. Exiting."
        exit

    fi

    choosebuild

    buildname

    choosebranch

    preparebuild

    # Check whether SDKROOT environment variable is set or not.
    if [ "$OS" = "Darwin" ]; then

        if [ -z "$SDKROOT" ]; then

            $PRINTF "$FAILURE%s\n\e[0m" "ERROR: No SDKROOT is set. Add SDKROOT environment variable to macOS SDK full path. Usually macOS .sdk file is located in /Library/Developer/CommandLineTools/SDKs path, if you installed Homebrew. Exiting."
            exit

        fi

        installtomacos

        installtolist

    else

        if [ "$OS" = "Linux" ]; then

            sudo_ping

        fi

        dockerentry

        dockerrun

    fi

    if ([ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]) && [ -d "$BUILD/build/AppDir" ]; then

        installtowindows

        installtolist

        $PRINTF "$SUCCESS\n\n%s\n\e[0m" "Cleaning up source code and exiting shell script. Please wait..."
        cleansource

    elif [ "$OS" = "Linux" ] && [ -d "$BUILD/build/AppDir" ]; then

        installtolinux

        $PRINTF "$SUCCESS\n\n%s\n\e[0m" "Cleaning up source code and exiting shell script. Please wait..."
        cleansource

    fi
}

chooseremoveasset() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/assets" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find assets."
        exit

    fi

    # Remove asset.
    $PRINTF "$MESSAGE%s\n\e[0m" "Please choose asset by typing number and then pressing enter. Press enter or ctrl+c to quit."
    array=$(find "$SRB2BLDROOT/assets" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)
    arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Are you sure you want to remove this asset? Enter \"yes/Yes\" or \"no/No\" (\"y/Y\" or \"n/N\")."
            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r CONFIRM

            if [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

                SRB2ASSETLNXPATH=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
                SRB2ASSETLNXNAME=$($PRINTF "%s\n" "$arrayname" | gawk NR=="${n}")
                rm -fv "$SRB2ASSETLNXPATH"
                $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Removing $SRB2ASSETLNXNAME is successful."

            fi
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

chooseremovebuild() {
    clear

    if [ -z "$(find "$BUILDPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find builds."
        exit

    fi

    # Remove build.
    $PRINTF "$MESSAGE%s\n\e[0m" "Please choose build by typing number and then pressing enter. Press enter or ctrl+c to quit."
    array=$(find "$BUILDPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | sort)
    arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Are you sure you want to remove this build's directory? Enter \"yes/Yes\" or \"no/No\" (\"y/Y\" or \"n/N\")."
            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r CONFIRM

            if [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

                BUILDPATH=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
                BUILDNAME=$($PRINTF "%s\n" "$arrayname" | gawk NR=="${n}")
                rm -rfv "$BUILDPATH"
                $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Removing $BUILDNAME is successful."

            fi
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

chooseuninstall() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find installed builds."
        exit

    fi

    # Uninstall build from the system.
    $PRINTF "$MESSAGE%s\n\e[0m" "Please choose installed package by typing number and then pressing enter. Press enter or ctrl+c to quit."
    array=$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)
    arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            BUILDINSTALLED=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
            INSTALLEDFILES=$(gawk '/\/usr\/local\/|\/SRB2 Games\/|\/Start Menu\/Programs\/|.comrev/ {print}' "$BUILDINSTALLED")
            $PRINTF "$PROMPT\n%s\n\e[0m" "$INSTALLEDFILES"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Above files will be uninstalled. Are you sure you want to that? Enter \"yes/Yes\" or \"no/No\" (\"y/Y\" or \"n/N\")."
            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r CONFIRM

            if [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ] && ([ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]); then

                gawk -i inplace -v RS= '{gsub("---------------\n[A-Z]*=1|---------------","");print}' "$BUILDINSTALLED"

                while read -r FILE; do
                    rm -rfv "$FILE"
                done < "$BUILDINSTALLED"

                rm -f "$BUILDINSTALLED"

                if [ -z "$(find "$HOME/SRB2 Games" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

                    rm -rfv "$HOME/SRB2 Games"

                fi

                $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Uninstallation of $($PRINTF "%s\n" "$BUILDINSTALLED" | gawk -F'/' '{print $NF}') is successful."

            elif [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

                gawk -i inplace -v RS= '{gsub("---------------\n[A-Z]*=1|---------------","");print}' "$BUILDINSTALLED"

                while read -r FILE; do
                    $SUDO rm -rfv "$FILE"
                done < "$BUILDINSTALLED"

                rm -f "$BUILDINSTALLED"

                if [ -z "$(find /usr/local/opt/srb2-apps -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

                    $SUDO rm -rfv /usr/local/opt/srb2-apps

                fi

                # Refreshing menu icons.
                if [ -x "$(which gtk-update-icon-cache 2> /dev/null)" ]; then

                    $SUDO gtk-update-icon-cache -qft /usr/local/share/icons/hicolor

                elif [ -x "$(find /usr/bin -name "kbuildsycoca*" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

                    $SUDO "$(find /usr/bin -name "kbuildsycoca*" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" --noincremental

                fi

                $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Uninstallation of $($PRINTF "%s\n" "$BUILDINSTALLED" | gawk -F'/' '{print $NF}') is successful."

            fi
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

cleansource() {
    # Clean build's directory after compiling.
    if [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]; then

        git -C "$BUILD" clean -qdfx -e .comrev
        git -C "$BUILD" reset -q --hard

    else

        if [ "$OS" != "Darwin" ]; then

            $SUDO find "$SRB2BLDROOT" -user root -group root -exec chown -R "$USER":"$USER" {} \;

        fi

        git -C "$BUILD" clean -qdfx -e .comrev
        git -C "$BUILD" reset -q --hard

    fi
}

compatibility() {
    clear

    # Show compatibility table for compiling SRB2 builds for each OS.
    curl -sL "$COMPTABLEURL"
}

defaultmessage() {
    $PRINTF "$NOTICE%s\n\e[0m" "Use srb2bld --help to check usage of this shell script."
}

dockerentry() {
    # Prepare containers path.
    if [ ! -d "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker" ]; then

        mkdir -p "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker"

    fi

    # Create entrypoint shell script for Docker container.
    cat > "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker/Entrypoint" << ENTRYPOINT
#!/bin/bash

    set -e

    # Added environment variables for Docker container.
    export PRINTF=\$(which -a printf | gawk '/bin/ {print}' | head -n1)
    export ARCH="$ARCH"
    export OS="$OS"
    export IS64="$IS64"
    export SRB2BLDROOT="$SRB2BLDROOT"
    export BUILDPATH="$BUILDPATH"
    export BUILD="$BUILD"
    export GITVERCONF="$GITVERCONF"
    export GITVER="$GITVER"
    export GITDEFVER="$GITDEFVER"
    export FILETYPE="$FILETYPE"
    export SRB2OLDVER="$SRB2OLDVER"
    export SRB2KARTOLDVER="$SRB2KARTOLDVER"
    export SRB2PERSONAOLDVER="$SRB2PERSONAOLDVER"
    export SRB2ASSETPATH="$SRB2ASSETPATH"
    export ASSETAPPDIR="$ASSETAPPDIR"
    export APPIMAGE="$APPIMAGE"
    export UPGRADE="$UPGRADE"
    export STOW_DIR=/usr/local/stow

    # Some old Docker images don't have up-to-date SSL certifications, so this is workaround.
    # export GIT_SSL_NO_VERIFY=1

    # Added repository to safe directories since Git v2.35.
    git config --global --add safe.directory "\$BUILD"

    cleansource() {
        # Clean build's directory after compiling.
        if [ "\$OS" = "Linux" ]; then

            find "\$SRB2BLDROOT" -user root -group root -exec chown -R 1000:1000 {} \;

        fi

        git -C "\$BUILD" clean -qdfx -e .comrev
        git -C "\$BUILD" reset -q --hard
    }

    extractassets() {
        if [ "\$BUILD" = "\$BUILDPATH/srb2" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-custom" ]; then

            if [ "\$(gawk -F'\"' '/SRB2VERSION/ {print \$2}' "\$BUILD/src/version.h" 2> /dev/null)" != "\$SRB2OLDVER" ]; then

                SRB2ASSETURL=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases | gawk -F'"' '/'SRB2_release_\$SRB2OLDVER'\/.*Full.zip/ {print \$4}')
                if [ "\$(curl -X GET -sLI "\$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print \$NF}' | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2-Older.zip" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2-Older.zip"
                    curl -RL "\$SRB2ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-Older.zip"

                fi

                7z x -y "\$SRB2BLDROOT/assets/SRB2-Older.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            else

                SRB2ASSETURL=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print \$4}')
                if [ "\$(curl -X GET -sLI "\$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print \$NF}' | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2-Latest.zip" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2-Latest.zip"
                    curl -RL "\$SRB2ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-Latest.zip"

                fi

                7z x -y "\$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            fi

            find "\$BUILD/build/AppDir/usr/games/SRB2/models" -type d -exec chmod 755 {} \;

            if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

                if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

                    cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                    cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/libopenmpt/bin/x86/mingw"
                    cp -f "\$BUILD/libs/libopenmpt/bin/x86/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDLMixerX/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/openvr/openvr_api.dll" "\$BUILD/build/AppDir/usr/lib"

                elif [ "\$IS64" = "64" ]; then

                    cp -f "\$BUILD/libs/curl/lib64/libcurl-x64.dll" "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/dll-binaries/x86_64/Old"
                    cp -f "\$BUILD/libs/dll-binaries/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/libopenmpt/bin/x86_64/mingw"
                    cp -f "\$BUILD/libs/libopenmpt/bin/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/x86_64-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDLMixerX/x86_64-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

                else

                    cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                    cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/libopenmpt/bin/x86/mingw"
                    cp -f "\$BUILD/libs/libopenmpt/bin/x86/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDLMixerX/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

                fi

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

            curl -RLC - https://mb.srb2.org/addons/166/download -o "\$SRB2BLDROOT/assets/SRB2P_MP.rar"
            7z x -y "\$SRB2BLDROOT/assets/SRB2P_MP.rar" "*.pk3" "*.wad" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            if [ "\$(gawk -F'\"' '/SRB2VERSION/ {print \$2}' "\$BUILD/src/version.h" 2> /dev/null)" != "\$SRB2PERSONAOLDVER" ]; then

                SRB2ASSETURL=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print \$4}')
                if [ "\$(curl -X GET -sLI "\$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print \$NF}' | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2-Latest.zip" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2-Latest.zip"
                    curl -RL "\$SRB2ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-Latest.zip"

                fi

                7z x -y "\$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            else

                SRB2ASSETURL=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases | gawk -F'"' '/'SRB2_release_\$SRB2OLDVER'\/.*Full.zip/ {print \$4}')
                if [ "\$(curl -X GET -sLI "\$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print \$NF}' | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2-Older.zip" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2-Older.zip"
                    curl -RL "\$SRB2ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-Older.zip"

                fi

                7z x -y "\$SRB2BLDROOT/assets/SRB2-Older.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            fi

            find "\$BUILD/build/AppDir/usr/games/SRB2/models" -type d -exec chmod 755 {} \;

            if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

                if [ "\$IS64" = "64" ]; then

                    cp -f "\$BUILD/libs/curl/lib64/libcurl-x64.dll" "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/dll-binaries/x86_64/Old"
                    cp -f "\$BUILD/libs/dll-binaries/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/libopenmpt/bin/x86_64/mingw"
                    cp -f "\$BUILD/libs/libopenmpt/bin/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/x86_64-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDLMixerX/x86_64-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

                else

                    cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                    cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/libopenmpt/bin/x86/mingw"
                    cp -f "\$BUILD/libs/libopenmpt/bin/x86/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDLMixerX/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

                fi

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

            curl -RLC - https://github.com/STJr/SRB2/releases/download/SRB2_release_2.1.25/SRB2-v2125-Installer.exe -o "\$SRB2BLDROOT/assets/SRB2-2.1.exe"
            7z x -y "\$SRB2BLDROOT/assets/SRB2-2.1.exe" "*.srb" "*.dta" "*.dat" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

                if [ "\$IS64" = "64" ]; then

                    rm -rf "\$BUILD/libs/dll-binaries/x86_64/Old"
                    cp -f "\$BUILD/libs/dll-binaries/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/x86_64-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2_mixer/x86_64-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

                else

                    rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                    cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2_mixer/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

                fi

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            curl -RLC - https://archive.org/download/srb20ya-v20/SRB2_v206.exe -o "\$SRB2BLDROOT/assets/SRB2-2.0.exe"
            7z x -y "\$SRB2BLDROOT/assets/SRB2-2.0.exe" "*.plr" "*.dta" "*.wpn" "*.srb" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

                7z x -y "\$SRB2BLDROOT/assets/SRB2-2.0.exe" "*.dll" -o"\$BUILD/build/AppDir/usr/lib"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            curl -RLC - https://archive.org/download/srb20ya-finaldemo/FinalDemo1094-2008.exe -o "\$SRB2BLDROOT/assets/SRB2FinalDemo.exe"
            7z x -y "\$SRB2BLDROOT/assets/SRB2FinalDemo.exe" "*.plr" "*.dta" "*.wpn" "*.srb" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

                SRB2ASSETURL=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print \$4}')
                if [ "\$(curl -X GET -sLI "\$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print \$NF}' | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2-Latest.zip" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2-Latest.zip"
                    curl -RL "\$SRB2ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-Latest.zip"

                fi

                7z x -y "\$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.dll" -o"\$BUILD/build/AppDir/usr/lib"
                mv -f "\$BUILD/build/AppDir/usr/lib/SDL2_mixer_ext.dll" "\$BUILD/build/AppDir/usr/lib/SDL2_mixer.dll"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

            if [ "\$(gawk -F'\"|\\\(' '/VERSIONSTRING/ && /v[0-9]/ {gsub(" ","");print \$2}' "\$BUILD/src/doomdef.h" | gawk '!a[\$0]++')" != "\$SRB2KARTOLDVER" ]; then

                SRB2KARTASSETURL=\$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases | gawk -F'"' '/'\$SRB2KARTOLDVER'\/.*Installer.exe/ {print \$4}')
                if [ "\$(curl -X GET -sLI "\$SRB2KARTASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print \$NF}' | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2Kart-Older.exe" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2Kart-Older.exe"
                    curl -RL "\$SRB2KARTASSETURL" -o "\$SRB2BLDROOT/assets/SRB2Kart-Older.exe"

                fi

                7z x -y "\$SRB2BLDROOT/assets/SRB2Kart-Older.exe" "*.kart" "*.srb" "*.dat" "mdls/*" -o"\$BUILD/build/AppDir/usr/games/SRB2Kart"

            else

                SRB2KARTASSETURL=\$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases/latest | gawk -F'"' '/browser_download_url.*Installer.exe/ {print \$4}')
                if [ "\$(curl -X GET -sLI "\$SRB2KARTASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print \$NF}' | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2Kart-Latest.exe" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2Kart-Latest.exe"
                    curl -RL "\$SRB2KARTASSETURL" -o "\$SRB2BLDROOT/assets/SRB2Kart-Latest.exe"

                fi

                7z x -y "\$SRB2BLDROOT/assets/SRB2Kart-Latest.exe" "*.kart" "*.srb" "*.dat" "mdls/*" -o"\$BUILD/build/AppDir/usr/games/SRB2Kart"

            fi

            find "\$BUILD/build/AppDir/usr/games/SRB2Kart/mdls" -type d -exec chmod 755 {} \;

            if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

                if [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

                    cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                    cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2_mixer/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/openvr/openvr_api.dll" "\$BUILD/build/AppDir/usr/lib"

                elif [ "\$IS64" = "64" ]; then

                    cp -f "\$BUILD/libs/curl/lib64/libcurl-x64.dll" "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/dll-binaries/x86_64/Old"
                    cp -f "\$BUILD/libs/dll-binaries/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/x86_64-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2_mixer/x86_64-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

                else

                    cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                    cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2_mixer/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

                fi

            fi

        fi
    }

    extractcustomassets() {
        BUILDPREFIX=\$(printf "%s\n" "\$BUILD" | gawk -F'/' '{print \$NF}')

        if [ -n "\$(find "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE" 2> /dev/null | head -n1)" ]; then

            SRB2ASSETPATH="\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE"

        elif [ -n "\$(\$PRINTF "%s\n" "\$SRB2ASSETPATH" | gawk '/drive.google.com/ {print}')" ]; then

            SRB2ASSETID=\$(\$PRINTF "%s\n" "\$SRB2ASSETPATH" | gawk '{gsub("https://drive.google.com/file/d/|/view|?usp=sharing","");print}')
            SRB2ASSETPATH="https://drive.google.com/uc?export=download&confirm=t&id=\$SRB2ASSETID"
            FILETYPE=\$(curl -X GET -sLI "https://drive.google.com/uc?export=download&confirm=t&id=\$SRB2ASSETID" | gawk -F'.' '/content-disposition:/ {gsub("\r|\"","");print \$NF}')

        elif [ -n "\$(\$PRINTF "%s\n" "\$SRB2ASSETPATH" | gawk '/mega.nz/ {print}')" ]; then

            curl -sL https://gist.githubusercontent.com/Bijman/b791993783e2fb80d3e98a3a19b6e6e8/raw/4fb91369313eaa8d67fe911fdcc08797ca432517/megafetch.sh -o "\$BUILD/megafetch"
            chmod +x "\$BUILD/megafetch"
            MEGANZURL=\$("\$BUILD/megafetch" "\$SRB2ASSETPATH" | gawk '/userstorage.mega.co.nz/ {print}')
            MEGANZFILENAME=\$("\$BUILD/megafetch" "\$SRB2ASSETPATH" | gawk 'NR==2')
            MEGANZHEX=\$("\$BUILD/megafetch" "\$SRB2ASSETPATH" | gawk 'NR==3')
            MEGANZHEXRAW=\$("\$BUILD/megafetch" "\$SRB2ASSETPATH" | gawk 'NR==4')
            SRB2ASSETPATH="\$MEGANZURL"
            FILETYPE=\$(\$PRINTF "%s\n" "\$MEGANZFILENAME" | gawk -F'.' '{print \$NF}')

        else

            SRB2ASSETPATH="\$SRB2ASSETPATH"
            FILETYPE=\$(curl -X GET -sLI "\$SRB2ASSETPATH" | gawk -F'.' '/content-disposition:/ {gsub("\r|\"","");print \$NF}')

        fi

        if [ -n "\$(curl -vI "\$SRB2ASSETPATH" 2>&1 | gawk '/> Host:/ {gsub("\r","");print \$NF}')" ] && [ "\$(curl -X GET -sLI "\$SRB2ASSETPATH" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print \$NF}' | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE" 2> /dev/null)" ]; then

            rm -f "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE"

            if [ -n "\$(\$PRINTF "%s\n" "\$SRB2ASSETPATH" | gawk '/drive.google.com/ {print}')" ]; then

                curl -RL "https://drive.google.com/uc?export=download&confirm=t&id=\$SRB2ASSETID" -o"\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE"

            elif [ -n "\$(\$PRINTF "%s\n" "\$SRB2ASSETPATH" | gawk '/mega.co.nz/ {print}')" ]; then

                curl -RL "\$MEGANZURL" -o "\$BUILD/\$MEGANZFILENAME"
                cat "\$BUILD/\$MEGANZFILENAME" | openssl enc -d -aes-128-ctr -K "\$MEGANZHEX" -iv "\$MEGANZHEXRAW" > "\$BUILD/\$MEGANZFILENAME.new"
                mv -f "\$BUILD/\$MEGANZFILENAME.new" "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE"

            else

                curl -RL "\$SRB2ASSETPATH" -o "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE"

            fi

        fi

        if [ -n "\$(find "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE" 2> /dev/null | head -n1)" ]; then

            if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

                7z x -y "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE" -x!"*.exe" -x!"*.txt" -o"\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR"

            else

                7z x -y "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE" -x!"*.exe" -x!"*.txt" -x!"*.dll" -o"\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR"

            fi

            if [ "\$(find "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR" -mindepth 1 -maxdepth 1 2> /dev/null | wc -l)" -eq "1" ]; then

                mv -f "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR/"*/* "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR"

            fi

        fi

        if [ -n "\$(find "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR/models" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | head -n1)" ]; then

            find "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR/models" -type d -exec chmod 755 {} \;

        elif [ -n "\$(find "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR/mdls" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | head -n1)" ]; then

            find "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR/mdls" -type d -exec chmod 755 {} \;

        fi
    }

    # Clean the build's source code and exit shell script in case of error or cancelling script
    trap '\$PRINTF "$SUCCESS\n\n%s\n\e[0m" "Cleaning up source code and exiting shell script. Please wait..." ; cleansource ; exit' 1 2 3 6 15 ERR

    # Update Docker container.
    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker container. Please wait..."

    if [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

        sudo apk update && sudo apk upgrade

    elif [ -n "\$(which pacman 2> /dev/null)" ]; then

        sudo pacman -Syu --needed --noconfirm

    else

        sudo apt update && sudo apt full-upgrade -y

    fi

    # Download and extract assets.
    if [ -z "\$(find "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR/"* 2> /dev/null | head -n1)" ] && ([ "\$BUILD" != "\$BUILDPATH/wadcli" ] && [ "\$BUILD" != "\$BUILDPATH/slade" ]); then

        \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading and extracting $BUILDNAME's assets. Please wait..."

        if [ "\$GITVER" != "\$GITDEFVER" ]; then

            extractcustomassets

        else

            extractassets

        fi

    fi

    # Add -lexecinfo to LDFLAGS for musl based Linux OS to make building successful.
    if [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

#        cat > "\$BUILD/srb2-games-linux-musl.patch" << MUSL
#--- /src/sdl/i_system.c
#+++ /src/sdl/i_system.c
#@@ -137,11 +137,11 @@ typedef LPVOID (WINAPI *p_MapViewOfFile) (HANDLE, DWORD, DWORD, DWORD, SIZE_T);
# #include <errno.h>
# #endif

#-#if defined (__unix__) || defined(__APPLE__) || defined (UNIXCOMMON)
#-#include <execinfo.h>
#-#include <time.h>
#-#define UNIXBACKTRACE
#-#endif
#+//#if definer (__unix__) || defined(__APPLE__) || defined (UNIXCOMMON)
#+//#include <execinfo.h>
#+//#include <time.h>
#+//#define UNIXBACKTRACE
#+//#endif3

# // Locations for searching the srb2.pk3
# #if defined (__unix__) || defined(__APPLE__) || defined (UNIXCOMMON)
#MUSL
#        patch -t -p1 < "\$BUILD/srb2-games-linux-musl.patch"
        export LDFLAGS="\$LDFLAGS -lexecinfo"

    fi

    # Patching headers, source code to avoid compilation failure for builds on Windows.
    if ([ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]) && [ "\$BUILD" != "\$BUILDPATH/wadcli" ] && [ "\$BUILD" != "\$BUILDPATH/slade" ]; then

         sudo sed -i '/#if !defined(_WIN32) && !defined(__CYGWIN__)/,/#endif/d' "/usr/share/mingw-w64/include/_mingw.h"
         sudo sed -i '/#ifndef _WIN32/,/#endif/d' "/usr/share/mingw-w64/include/_mingw_stdarg.h"
         sudo sed -i '/#ifndef _WIN32/,/#endif/d' "/usr/share/mingw-w64/include/sys/types.h"
         sudo sed -i '/#ifndef _WIN32/,/#endif/d' "/usr/share/mingw-w64/include/sys/stat.h"
         sed -i '/#include "exchndl.h"/d' "$BUILD/src/sdl/i_main.c"
         sed -i '/ExcHndlInit()/d' "$BUILD/src/sdl/i_main.c"

         # Linking windres and dllwrap for compiling specific builds.
         if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

             sudo ln -sf /usr/bin/i686-w64-mingw32-windres /usr/bin/windres
             sudo ln -sf /usr/bin/i686-w64-mingw32-dllwrap /usr/bin/dllwrap

         else

             sudo ln -sf "/usr/bin/\$ARCH-w64-mingw32-windres" /usr/bin/windres
             sudo ln -sf "/usr/bin/\$ARCH-w64-mingw32-dllwrap" /usr/bin/dllwrap

         fi

    fi

    if [ "\$GITVERCONF" = "\$GITDEFVER" ]; then

       unset GITVERCONF

    fi

    # Modify the build's configuration and assets directory names to avoid conflicts between installed builds.
    if [ "\$BUILD" = "\$BUILDPATH/srb2" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2"/#define DEFAULTDIR ".srb2'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2"/#define DEFAULTDIR "srb2'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2"/#define DEFAULTDIR ".srb2'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2"/#define DEFAULTDIR "srb2'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's|/usr/local/share/games/SRB2|/usr/local/share/games/SRB2UncappedPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2|/usr/local/games/SRB2UncappedPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2|/usr/share/games/SRB2UncappedPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2|/usr/games/SRB2UncappedPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\srb2|c:\\\\\\\srb2uncappedplus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\games\\\\\\\srb2|c:\\\\\\\games\\\\\\\srb2uncappedplus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|\\\\\\\games\\\\\\\srb2|\\\\\\\games\\\\\\\srb2uncappedplus|' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2"/#define DEFAULTDIR ".srb2'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2"/#define DEFAULTDIR "srb2'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's|/usr/local/share/games/SRB2|/usr/local/share/games/SRB2NetPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2|/usr/local/games/SRB2NetPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2|/usr/share/games/SRB2NetPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2|/usr/games/SRB2NetPlus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\srb2|c:\\\\\\\srb2netplus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\games\\\\\\\srb2|c:\\\\\\\games\\\\\\\srb2netplus|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|\\\\\\\games\\\\\\\srb2|\\\\\\\games\\\\\\\srb2netplus|' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2"/#define DEFAULTDIR ".srb2'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2"/#define DEFAULTDIR "srb2'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's|/usr/local/share/games/SRB2|/usr/local/share/games/SRB2VR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2|/usr/local/games/SRB2VR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2|/usr/share/games/SRB2VR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2|/usr/games/SRB2VR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\srb2|c:\\\\\\\srb2vr|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\games\\\\\\\srb2|c:\\\\\\\games\\\\\\\srb2vr|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|\\\\\\\games\\\\\\\srb2|\\\\\\\games\\\\\\\srb2vr|' "\$BUILD/src/sdl/i_system.c"
         gawk -i inplace '{gsub("../libs/openvr/libopenvr_api.so","\$(shell find /usr/lib64 /usr/lib /usr/local/lib64 /usr/local/lib -name libopenvr_api.so 2> /dev/null | head -n1)");print}' "\$BUILD/src/Makefile.d/nix.mk"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2_21"/#define DEFAULTDIR ".srb2_2.1"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2_21"/#define DEFAULTDIR "srb2_2.1"/' "\$BUILD/src/doomdef.h"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2"/#define DEFAULTDIR ".srb2_2.0"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2"/#define DEFAULTDIR "srb2_2.0"/' "\$BUILD/src/doomdef.h"
         sed -i 's|/usr/local/share/games/srb2|/usr/local/share/games/SRB2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/srb2|/usr/local/games/SRB2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/srb2|/usr/share/games/SRB2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/srb2|/usr/games/SRB2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\srb2|c:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|d:\\\\\\\srb2|d:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|e:\\\\\\\srb2|e:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|f:\\\\\\\srb2|f:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|g:\\\\\\\srb2|g:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|h:\\\\\\\srb2|h:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|i:\\\\\\\srb2|i:\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\games\\\\\\\srb2|c:\\\\\\\games\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|\\\\\\\games\\\\\\\srb2|\\\\\\\games\\\\\\\srb2-2.0|' "\$BUILD/src/sdl/i_system.c"
         gawk -i inplace '{gsub("\\\\$\\\(CC\\\) \\\\$\\\(CFLAGS\\\) -MM \\\*.c","\\\$(CC) \\\$(CFLAGS) -MM \\\$(wildcard *.c)");print}' "\$BUILD/src/Makefile"
         gawk -i inplace '{gsub("\\\\$\\\(INTERFACE\\\)/\\\*.c","\\\$(wildcard \\\$(INTERFACE)/*.c)");print}' "\$BUILD/src/Makefile"
         gawk -i inplace '{gsub("hardware/\\\*.c","\\\$(wildcard hardware/*.c)");print}' "\$BUILD/src/Makefile"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

         sed -i 's/#define DEFAULTDIR ".srb21094"/#define DEFAULTDIR ".srb2fd"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb21094"/#define DEFAULTDIR "srb2fd"/' "\$BUILD/src/doomdef.h"
         sed -i 's|/usr/local/games/SRB2|/usr/local/share/games/SRB2FinalDemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2|/usr/games/SRB2FinalDemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\srb2|c:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|d:\\\\\\\srb2|d:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|e:\\\\\\\srb2|e:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|f:\\\\\\\srb2|f:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|g:\\\\\\\srb2|g:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|h:\\\\\\\srb2|h:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|i:\\\\\\\srb2|i:\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\games\\\\\\\srb2|c:\\\\\\\games\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|\\\\\\\games\\\\\\\srb2|\\\\\\\games\\\\\\\srb2finaldemo|' "\$BUILD/src/sdl/i_system.c"
         gawk -i inplace '{gsub("\\\\$\\\(CC\\\) \\\\$\\\(CFLAGS\\\) -MM \\\*.c","\\\$(CC) \\\$(CFLAGS) -MM \\\$(wildcard *.c)");print}' "\$BUILD/src/makefile"
         gawk -i inplace '{gsub("\\\\$\\\(INTERFACE\\\)/\\\*.c","\\\$(wildcard \\\$(INTERFACE)/*.c)");print}' "\$BUILD/src/makefile"
         gawk -i inplace '{gsub("hardware/\\\*.c","\\\$(wildcard hardware/*.c)");print}' "\$BUILD/src/makefile"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2"/#define DEFAULTDIR ".srb2persona'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2"/#define DEFAULTDIR "srb2persona'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's|/usr/local/share/games/SRB2|/usr/local/share/games/SRB2Persona|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2|/usr/local/games/SRB2Persona|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2|/usr/share/games/SRB2Persona|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2|/usr/games/SRB2Persona|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\srb2|c:\\\\\\\srb2persona|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\games\\\\\\\srb2|c:\\\\\\\games\\\\\\\srb2persona|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|\\\\\\\games\\\\\\\srb2|\\\\\\\games\\\\\\\srb2persona|' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2kart"/#define DEFAULTDIR ".srb2kart'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2kart"/#define DEFAULTDIR "srb2kart'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's|/usr/local/share/games/SRB2Kart|/usr/local/share/games/SRB2KartMoeMansion|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2Kart|/usr/local/games/SRB2KartMoeMansion|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2Kart|/usr/share/games/SRB2KartMoeMansion|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2Kart|/usr/games/SRB2KartMoeMansion|' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2kart"/#define DEFAULTDIR ".srb2kart'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2kart"/#define DEFAULTDIR "srb2kart'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's|/usr/local/share/games/SRB2Kart|/usr/local/share/games/SRB2KartMoeMansion|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2Kart|/usr/local/games/SRB2KartMoeMansion|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2Kart|/usr/share/games/SRB2KartMoeMansion|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2Kart|/usr/games/SRB2KartMoeMansion|' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2kart"/#define DEFAULTDIR ".srb2kart'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2kart"/#define DEFAULTDIR "srb2kart'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's|/usr/local/share/games/SRB2Kart|/usr/local/share/games/SRB2KartVR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2Kart|/usr/local/games/SRB2KartVR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2Kart|/usr/share/games/SRB2KartVR|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2Kart|/usr/games/SRB2KartVR|' "\$BUILD/src/sdl/i_system.c"
         gawk -i inplace '{gsub("../libs/openvr/libopenvr_api.so","\$(shell find /usr/lib64 /usr/lib /usr/local/lib64 /usr/local/lib -name libopenvr_api.so 2> /dev/null | head -n1)");print}' "\$BUILD/src/sdl/Makefile.cfg"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-custom" ]; then

         sed -i 's/#define DEFAULTDIR ".srb2"/#define DEFAULTDIR ".srb2custom'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2"/#define DEFAULTDIR "srb2custom'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR ".srb2kart"/#define DEFAULTDIR ".srb2custom'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's/#define DEFAULTDIR "srb2kart"/#define DEFAULTDIR "srb2custom'\$GITVERCONF'"/' "\$BUILD/src/doomdef.h"
         sed -i 's|/usr/local/share/games/SRB2|/usr/local/share/games/SRB2Custom|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/local/games/SRB2|/usr/local/games/SRB2Custom|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/share/games/SRB2|/usr/share/games/SRB2Custom|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|/usr/games/SRB2|/usr/games/SRB2Custom|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\srb2|c:\\\\\\\srb2custom|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|c:\\\\\\\games\\\\\\\srb2|c:\\\\\\\games\\\\\\\srb2custom|' "\$BUILD/src/sdl/i_system.c"
         sed -i 's|\\\\\\\games\\\\\\\srb2|\\\\\\\games\\\\\\\srb2custom|' "\$BUILD/src/sdl/i_system.c"

    fi

if [ "\$APPIMAGE" = 1 ]; then

        # Display content of Makefile for a good view of available compilation flags.
        if [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            gawk '/^#/,/ / {print}' "\$BUILD/src/makefile"

        elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

            cat "\$BUILD/README.md"

        elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

            cmake -LAH "\$BUILD" 2>&1 | gawk '{if(f)print} /-- Cache values/{f=1}' 2> /dev/null

        else

            gawk '/^#/,/ / {print}' "\$BUILD/src/"*akefile

        fi

        # Add compilation flags.
        \$PRINTF "$MESSAGE\n%s\n\e[0m" "Please enter $BUILDNAME's space separated compilation flags and then press enter, or just press enter to begin compiling. Default command and flags for compilation:"

        if [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 NONX86=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

            \$PRINTF "$NOTICE%s\n\e[0m" "CXX="$GXXVER" CPLUS_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/liblzf/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD" YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

        elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

            if [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

                MUSLFLAGS="-DNO_WEBVIEW=ON"

            fi

            \$PRINTF "$NOTICE%s\n\e[0m" "cmake "\$BUILD" -DwxWidgets_CONFIG_EXECUTABLE=\$(which wx-config wx-config-gtk3 2> /dev/null) -DwxWidgets_LIBRARIES=\$(find /usr -name libwx_baseu-*.so) \$MUSLFLAGS -DCMAKE_CXX_COMPILER="$GXXVER" -DCMAKE_C_COMPILER="$GCCVER" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

        else

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        fi

        \$PRINTF "$PROMPT\n%s\e[0m" "> "
        read -r CONF

        if [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /LINUX=1|LINUX64=1|MINGW=1|MINGW64=1|NONX86=1|UNIX=1|UNIXCOMMON=1|FREEBSD=1|CYGWIN32=1|SOLARIS=1|WATTCP=1|WINDOWS=1/) {print substr(\$0, RSTART, RLENGTH)}')" ]; then

            CONF=\$(\$PRINTF "%s\n" "\$CONF" | gawk '{gsub("LINUX=1|LINUX64=1|MINGW=1|MINGW64=1|NONX86=1|UNIX=1|UNIXCOMMON=1|FREEBSD=1|CYGWIN32=1|SOLARIS=1|WATTCP=1|WINDOWS=1","");print}')
            \$PRINTF "$FAILURE\n%s\n\e[0m" "ERROR: Entering OS flags like LINUX64=1, MINGW=1 or FREEBSD=1 is not supported on this script. Exiting."
            exit

        fi

    # Download libSDL2_mixerX's source code, build and install it.
    if [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /HAVE_MIXERX=1/) {print substr(\$0, RSTART, RLENGTH)}')" ]; then

        if [ ! -d "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libSDL2_mixerX's source code. Please wait..."
            git clone https://github.com/WohlSoft/SDL-Mixer-X.git --recursive --branch "$LNXSDL2MIXERXVER" "\$SRB2BLDROOT/libraries/libsdl2-mixerx"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libSDL2_mixerX's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libsdl2-mixerx"
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q "$LNXSDL2MIXERXVER"

        fi

        \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libSDL2_mixerX. Please wait..."
        mkdir -p "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
        cd "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build" || exit
        cmake .. -DDOWNLOAD_AUDIO_CODECS_DEPENDENCY=OFF -DAUDIO_CODECS_BUILD_LOCAL_SDL2=OFF -DUSE_SYSTEM_SDL2=ON -DSDL_MIXER_X_STATIC=OFF -DUSE_FLAC=OFF -DUSE_MP3_MAD=OFF -DUSE_MP3_MPG123=OFF -DCMAKE_INSTALL_PREFIX=/usr
        CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
        sudo make -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build" install
        cd "\$BUILD" || exit

    fi

    # Download DiscordRPC source code, build and install it.
    if [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /HAVE_DISCORDRPC=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && ([ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]); then

        if [ ! -d "\$SRB2BLDROOT/libraries/discord-rpc/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading DiscordRPC's source code. Please wait..."
            git clone https://github.com/discord/discord-rpc.git --recursive --branch "$LNXDISCORDRPCVER" "\$SRB2BLDROOT/libraries/discord-rpc"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up DiscordRPC's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/discord-rpc"
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" checkout -q "$LNXDISCORDRPCVER"

        fi

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing DiscordRPC. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/discord-rpc/build"
            cd "\$SRB2BLDROOT/libraries/discord-rpc/build" || exit
            cmake .. -DBUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/discord-rpc/build"
            sudo make -C "\$SRB2BLDROOT/libraries/discord-rpc/build" install
            cd "\$BUILD" || exit

    fi

    # Download libopenvr's source code, build and install it.
    if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        if [ ! -d "\$SRB2BLDROOT/libraries/libopenvr/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libopenvr's source code. Please wait..."
            git clone https://github.com/ValveSoftware/openvr.git --recursive --branch "v$LNXOPENVRVER" "\$SRB2BLDROOT/libraries/libopenvr"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libopenvr. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libopenvr"
            git -C "\$SRB2BLDROOT/libraries/libopenvr" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libopenvr" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libopenvr" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libopenvr" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/libopenvr" checkout -q "v$LNXOPENVRVER"

        fi

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libopenvr. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/libopenvr/build"
            cp -rf "\$SRB2BLDROOT/libraries/libopenvr/src/vrcommon" "\$SRB2BLDROOT/libraries/libopenvr/src/vrcore"
            cd "\$SRB2BLDROOT/libraries/libopenvr/build" || exit
            cmake .. -DBUILD_UNIVERSAL=OFF -DBUILD_SHARED=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libopenvr/build"
            sudo make -C "\$SRB2BLDROOT/libraries/libopenvr/build" install
            cd "\$BUILD" || exit

    fi

    # Temporarily disabling libpng12 to avoid compiling errors for SRB2 Final Demo.
    if [ -f /usr/local/lib/libpng12.so ] && [ "\$BUILD" != "\$BUILDPATH/srb2-2.0" ]; then

        sudo -E stow -D --adopt libpng12-lib32

    fi

    # Compile the build's source code.
    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building $BUILDNAME's source code. Please wait..."
    if [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

            CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

        else

            CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

        fi

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        mkdir -p "\$BUILD/objs/Linux/SDL/Release"

        if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

            CC="$GCCVER" C_INCLUDE_PATH="/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 \$CONF

        else

            CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 NONX86=1 \$CONF

        fi

    elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        CXX="$GXXVER" CPLUS_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/liblzf/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD" \$CONF
        cd "\$BUILD" || exit

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        mkdir -p "\$BUILD/build"
        cd "\$BUILD/build" || exit

        if [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

            MUSLFLAGS="-DNO_WEBVIEW=ON"

        fi

        cmake .. -DwxWidgets_CONFIG_EXECUTABLE=\$(which wx-config wx-config-gtk3 2> /dev/null) -DwxWidgets_LIBRARIES=\$(find /usr -name libwx_baseu-*.so) \$MUSLFLAGS -DCMAKE_CXX_COMPILER="$GXXVER" -DCMAKE_C_COMPILER="$GCCVER" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr \$CONF
        make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/build"
        make -C "\$BUILD/build" install DESTDIR="\$BUILD/build/AppDir"
        rm -rf "\$BUILD/build/AppDir/usr/share/applications/net.mancubus.SLADE.desktop"
        cd "\$BUILD" || exit

    else

        # Running comptime.sh before compiling to avoid errors.
        cd "\$BUILD/src" || exit
        gawk -i inplace '{gsub("\r","");print}' ../comptime.sh
        bash ../comptime.sh

        if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

            CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

        else

            CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

        fi

        cd "\$BUILD" || exit

    fi

    # Renabling libpng12.
    if [ -d /usr/local/stow/libpng12-lib32 ]; then

        sudo -E stow --adopt libpng12-lib32

    fi

    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Copying $BUILDNAME's binary, libraries, icons, desktop file and AppRun to AppDir. Please wait..."

    # Copy compiled binary to AppDir.
    if [ -f "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/lsdl2srb2" ]; then

        cp -rf "\$BUILD/bin/lsdl2srb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux\$IS64/Release/srb2legacy" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/srb2legacy" "\$BUILD/build/AppDir/usr/bin/lsdl2srb2"

    elif [ -f "\$BUILD/bin/srb2legacy" ]; then

        cp -rf "\$BUILD/bin/srb2legacy" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux\$IS64/Release/lsdlsrb2" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/lsdlsrb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/lsdlsrb2" ]; then

        cp -rf "\$BUILD/bin/lsdlsrb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux/Release/lsdl2srb2" ]; then

        cp -rf "\$BUILD/bin/Linux/Release/lsdl2srb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2kart" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2kart" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/lsdl2srb2kart" ]; then

        cp -rf "\$BUILD/bin/lsdl2srb2kart" "\$BUILD/build/AppDir/usr/bin"

    elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        cp -rf "\$BUILD/wadcli" "\$BUILD/build/AppDir/usr/bin"

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        cp -rf "\$BUILD/build/slade" "\$BUILD/build/AppDir/usr/bin"

    fi

    # Create desktop file.
    COMREV=\$(git -C "\$BUILD" rev-parse --short HEAD)

    if [ "\$BUILD" = "\$BUILDPATH/srb2" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Uncapped PLUS
Comment=Modified open source 3D Sonic platformer with improved framerate and additional features
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2UncappedPlus
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 NetPlus
Comment=Modified open source 3D Sonic platformer with rollback netcode
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2NetPlus
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 VR
Comment=Modified open source 3D Sonic VR platformer with improved framerate and additional features
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;OpenVR;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRBVR
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software

[Desktop Action OpenVR]
Name=OpenVR runtime
Exec=AppRun -openvr -win
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 v2.1 Legacy
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2-2.1-Legacy
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 v2.0
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2-2.0
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Final Demo
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2FinalDemo
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Persona
Comment=Modified open source 3D Sonic game with Persona gameplay
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;rpg;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2Persona
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Kart
Comment=Modified open source 3D Sonic game with kart racing gameplay
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2Kart
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Kart Moe Mansion
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2KartMoeMansion
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Kart VR
Comment=Modified open source 3D Sonic game with VR kart racing gameplay, improved framerate and additional features
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;
Actions=OpenGL;Software;OpenVR;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2KartVR
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software

[Desktop Action OpenVR]
Name=OpenVR runtime
Exec=AppRun -openvr -win
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-custom" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Custom
Comment=Modified open source 3D Sonic game
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;
Actions=OpenGL;Software
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2Custom
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=wadcli
Comment=Allows the manipulation of Doom WAD files through command-line
Icon=icon
Exec=AppRun
Categories=Development;
Keywords=sonic;wad;
Terminal=true
NoDisplay=false
X-AppImage-Name=wadcli
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=slade
Comment=Allows the manipulation of Doom WAD files
Icon=icon
Exec=AppRun
Categories=Development;
Keywords=sonic;wad;
Terminal=false
NoDisplay=false
X-AppImage-Name=slade
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV
DESKTOP

    fi

    # Get app icon.
    if [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        curl -L https://www.iconfinder.com/icons/285695/download/png/64 -o "\$BUILD/build/icon.png"
        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"
        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        ICONSIZE=\$(identify "\$BUILD/build/AppDir/usr/share/icons/net.mancubus.SLADE.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"
        mv -f "\$BUILD/build/AppDir/usr/share/icons/net.mancubus.SLADE.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/icon.png"

    else

        convert "\$BUILD/src/win32/Srb2win.ico[5]" -resize 64x64\! -filter lanczos -alpha on -background none -flatten "\$BUILD/build/icon.png"
        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"
        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"

    fi

    # Create build's entrypoint and copy libraries to AppDir.
#DEPS="
#libFLAC.so.[0-9]
#libSDL2-2.0.so.[0-9]
#libSDL2_mixer-2.0.so.[0-9]
#libSDL_mixer-1.2.so.[0-9]
#libSDL2_mixer_ext.so.[0-9]
#libdiscord-rpc.so
#libfluidsynth.so.[0-9]
#libgme.so.[0-9]
#libjack.so.[0-9]
#libmad.so.[0-9]
#libmodplug.so.[0-9]
#libmpg123.so.[0-9]
#libogg.so.[0-9]
#libopenmpt.so.[0-9]
#libopenvr_api.so
#libopus.so.[0-9]
#libopusfile.so.[0-9]
#libpng.so.[0-9]
#libpng12.so.[0-9]
#libpulse-simple.so.[0-9]
#libpulse.so.[0-9]
#libpulsecommon-[0-9].[0-9].so.[0-9]
#libreadline.so.[0-9]
#libsndio.so.[0-9]
#libsndfile.so.[0-9]
#libtinfo.so.[0-9]
#libvorbis.so.[0-9]
#libvorbisenc.so.[0-9]
#libvorbisfile.so.[0-9]
#libwrap.so.[0-9]
#"

    cat > "\$BUILD/build/AppDir/AppRun" << 'APPRUN'
#!/bin/sh

export HERE="\$(dirname "\$(readlink -f "\$0")")"

export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:\$HERE/usr/lib"

APPRUN

    if [ "\$BUILD" = "\$BUILDPATH/srb2" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-custom" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export SRB2WADDIR="\$HERE/usr/games/SRB2"

exec "\$HERE/usr/bin/lsdl2srb2" "\$@"
APPRUNBIN

        cp -Lf \$(ldd "\$BUILD/build/AppDir/usr/bin/lsdl2srb2" | gawk '{print \$3}' | gawk '!/libc.so|libdl.so|ld-|libstdc++|libgcc_s.so|libm.so|libpthread.so|libresolv.so|librt.so|libz.so|libcom_err.so/ {print}') "\$BUILD/build/AppDir/usr/lib"

#        cp -Lf \$(for l in \$DEPS; do find /lib* /usr/lib* -name \$l; done) "\$BUILD/build/AppDir/usr/lib"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export SRB2WADDIR="\$HERE/usr/games/SRB2"

exec "\$HERE/usr/bin/lsdlsrb2" "\$@"
APPRUNBIN

        cp -Lf \$(ldd "\$BUILD/build/AppDir/usr/bin/lsdlsrb2" | gawk '{print \$3}' | gawk '!/libc.so|libdl.so|ld-|libstdc++|libgcc_s.so|libm.so|libpthread.so|libresolv.so|librt.so|libz.so|libcom_err.so/ {print}') "\$BUILD/build/AppDir/usr/lib"

#        cp -Lf \$(for l in \$DEPS; do find /lib* /usr/lib* -name \$l; done) "\$BUILD/build/AppDir/usr/lib"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export SRB2WADDIR="\$HERE/usr/games/SRB2Kart"

exec "\$HERE/usr/bin/lsdl2srb2kart" "\$@"
APPRUNBIN

        cp -Lf \$(ldd "\$BUILD/build/AppDir/usr/bin/lsdl2srb2kart" | gawk '{print \$3}' | gawk '!/libc.so|libdl.so|ld-|libstdc++|libgcc_s.so|libm.so|libpthread.so|libresolv.so|librt.so|libz.so|libcom_err.so/ {print}') "\$BUILD/build/AppDir/usr/lib"

#        cp -Lf \$(for l in \$DEPS; do find /lib* /usr/lib* -name \$l; done) "\$BUILD/build/AppDir/usr/lib"

    elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
exec "\$HERE/usr/bin/wadcli" "\$@"
APPRUNBIN

        cp -Lf \$(ldd "\$BUILD/build/AppDir/usr/bin/wadcli" | gawk '{print \$3}' | gawk '!/libc.so|libdl.so|ld-|libstdc++|libgcc_s.so|libm.so|libpthread.so|libresolv.so|librt.so|libz.so|libcom_err.so/ {print}') "\$BUILD/build/AppDir/usr/lib"

#        cp -Lf \$(for l in \$DEPS; do find /lib* /usr/lib* -name \$l; done) "\$BUILD/build/AppDir/usr/lib"

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
exec "\$HERE/usr/bin/slade" "\$@"
APPRUNBIN

        cp -Lf \$(ldd "\$BUILD/build/AppDir/usr/bin/slade" | gawk '{print \$3}' | gawk '!/libc.so|libdl.so|ld-|libstdc++|libgcc_s.so|libm.so|libpthread.so|libresolv.so|librt.so|libz.so|libcom_err.so/ {print}') "\$BUILD/build/AppDir/usr/lib"

#        cp -Lf \$(for l in \$DEPS; do find /lib* /usr/lib* -name \$l; done) "\$BUILD/build/AppDir/usr/lib"

    fi

    chmod +x "\$BUILD/build/AppDir/AppRun"

    # Download appimagetool.
    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building $BUILDNAME's AppImage. Please wait..."
    ISARM=\$(\$PRINTF "%s\n" "\$ARCH" | gawk 'match(\$0, /arm/) {print substr(\$0, RSTART, RLENGTH)}')
    IS64=\$(getconf LONG_BIT)

    if [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        if [ "\$ARCH" = "x86_64" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-i686.AppImage" -o "\$BUILD/appimagetool"

        elif [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-i686.AppImage" -o "\$BUILD/appimagetool"

        elif ([ -n "\$ISARM" ] && [ "\$IS64" = "64" ]) || [ "\$ARCH" = "aarch64" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-armhf.AppImage" -o "\$BUILD/appimagetool"

        elif [ -n "\$ISARM" ] && [ "\$IS64" = "32" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-armhf.AppImage" -o "\$BUILD/appimagetool"

        fi

    else

        if [ "\$ARCH" = "x86_64" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" -o "\$BUILD/appimagetool"

        elif [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-i686.AppImage" -o "\$BUILD/appimagetool"

        elif ([ -n "\$ISARM" ] && [ "\$IS64" = "64" ]) || [ "\$ARCH" = "aarch64" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage" -o "\$BUILD/appimagetool"

        elif [ -n "\$ISARM" ] && [ "\$IS64" = "32" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-armhf.AppImage" -o "\$BUILD/appimagetool"

        fi

    fi

    chmod +x "\$BUILD/appimagetool"
    cd "\$BUILD/build/AppDir" || exit

    # Create symlinks that are specific for AppDir's structure.
    ln -sf "icon.png" ".DirIcon"
    ln -sf "usr/share/icons/hicolor/\$ICONSIZE/apps/icon.png" "icon.png"
    ln -sf "usr/share/applications/app.desktop" "app.desktop"
    cd "\$BUILD/build/AppDir/usr" || exit
    ln -sf "lib" "lib32"
    cd "\$BUILD" || exit

else

# Upgrade build. Making sure, that there are only used compilation flags.
if [ -n "\$UPGRADE" ]; then

    export CONF="\$(gawk '/---------------/ {gsub("---------------","");getline;print}' "\$SRB2BLDROOT/installed/\$UPGRADE")"

# Otherwise set compilation flags, build and install as usual.
else

        # Display content of Makefile for a good view of available compilation flags.
        if [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            gawk '/^#/,/ / {print}' "\$BUILD/src/makefile"

        elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

            cat "\$BUILD/README.md"

        elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

            cmake -LAH "\$BUILD" 2>&1 | gawk '{if(f)print} /-- Cache values/{f=1}' 2> /dev/null

        else

            gawk '/^#/,/ / {print}' "\$BUILD/src/"*akefile

        fi

    # Add compilation flags.
    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Please enter $BUILDNAME's space separated compilation flags and then press enter, or just press enter to begin compiling. Default command and flags for compilation:"

    if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then
        if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="i686-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="\$ARCH-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="i686-w64-mingw32-$MINGWOLDCCVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="\$ARCH-w64-mingw32-$MINGWOLDCCVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="i686-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="\$ARCH-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="i686-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="\$ARCH-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

            \$PRINTF "$NOTICE%s\n\e[0m" "CXX="\$ARCH-w64-mingw32-$MINGWCXXVER" CPLUS_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/liblzf/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD" WINDOWS=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

        elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

            if [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

                MUSLFLAGS="-DNO_WEBVIEW=ON"

            fi

            \$PRINTF "$NOTICE%s\n\e[0m" "cmake "\$BUILD" -DwxWidgets_CONFIG_EXECUTABLE=\$(which wx-config wx-config-gtk3 2> /dev/null) -DwxWidgets_LIBRARIES=\$(find /usr -name libwx_baseu-*.so) \$MUSLFLAGS -DCMAKE_SYSTEM_NAME=Windows -DTOOLCHAIN_PREFIX=x86_64-w64-mingw32 -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_CXX_COMPILER="\$ARCH-w64-mingw32-$MINGWCXXVER" -DCMAKE_C_COMPILER="\$ARCH-w64-mingw32-$MINGWCCVER" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

        else

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="\$ARCH-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="\$ARCH-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        fi

    elif [ "\$OS" = "Linux" ]; then

        if [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 NONX86=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

            \$PRINTF "$NOTICE%s\n\e[0m" "CXX="$GXXVER" CPLUS_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/liblzf/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD" YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

        elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

            if [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

                MUSLFLAGS="-DNO_WEBVIEW=ON"

            fi

            \$PRINTF "$NOTICE%s\n\e[0m" "cmake "\$BUILD" -DwxWidgets_CONFIG_EXECUTABLE=\$(which wx-config wx-config-gtk3 2> /dev/null) -DwxWidgets_LIBRARIES=\$(find /usr -name libwx_baseu-*.so) \$MUSLFLAGS -DCMAKE_CXX_COMPILER="$GXXVER" -DCMAKE_C_COMPILER="$GCCVER" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

        else

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                \$PRINTF "$NOTICE%s\n\e[0m" "CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

        fi

    fi

     \$PRINTF "$PROMPT\n%s\e[0m" "> "
     read -r CONF

  fi

    if [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /LINUX=1|LINUX64=1|MINGW=1|MINGW64=1|NONX86=1|UNIX=1|UNIXCOMMON=1|FREEBSD=1|CYGWIN32=1|SOLARIS=1|WATTCP=1|WINDOWS=1/) {print substr(\$0, RSTART, RLENGTH)}')" ]; then

        CONF=\$(\$PRINTF "%s\n" "\$CONF" | gawk '{gsub("LINUX=1|LINUX64=1|MINGW=1|MINGW64=1|NONX86=1|UNIX=1|UNIXCOMMON=1|FREEBSD=1|CYGWIN32=1|SOLARIS=1|WATTCP=1|WINDOWS=1","");print}')
        \$PRINTF "$FAILURE\n%s\n\e[0m" "ERROR: Entering OS flags like LINUX64=1, MINGW=1 or FREEBSD=1 is not supported on this script. Exiting."
        exit

    fi

    # Download libpng12's source code, build and install it.
    if [ "\$OS" = "Linux" ] && [ -z "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /NOPNG=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        if [ ! -d "\$SRB2BLDROOT/libraries/libpng12/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libpng12's source code. Please wait..."
            git clone git://git.code.sf.net/p/libpng/code.git --recursive --branch "$LNXPNG12VER" "\$SRB2BLDROOT/libraries/libpng12"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libpng12. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libpng12"
            git -C "\$SRB2BLDROOT/libraries/libpng12" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libpng12" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libpng12" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libpng12" pull --recurse-submodules --rebase
            git -C "\$SRB2BLDROOT/libraries/libpng12" checkout -q "$LNXPNG12VER"

        fi

        if [ ! -f /usr/local/lib/libpng12.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libpng12/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libpng12" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libpng12/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libpng12. Please wait..."
            cd "\$SRB2BLDROOT/libraries/libpng12" || exit
            ./configure --prefix=/usr/local/stow/libpng12-lib32
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libpng12"
            sudo make -C "\$SRB2BLDROOT/libraries/libpng12" install
            sudo -E stow -v --adopt libpng12-lib32
            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libpng12" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libpng12/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download libSDL2_mixerX's source code, build and install it.
    if [ "\$OS" = "Linux" ] && [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /HAVE_MIXERX=1/) {print substr(\$0, RSTART, RLENGTH)}')" ]; then

        if [ ! -d "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libSDL2_mixerX's source code. Please wait..."
            git clone https://github.com/WohlSoft/SDL-Mixer-X.git --recursive --branch "$LNXSDL2MIXERXVER" "\$SRB2BLDROOT/libraries/libsdl2-mixerx"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libSDL2_mixerX's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libsdl2-mixerx"
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q "$LNXSDL2MIXERXVER"

        fi

        if [ ! -f /usr/local/lib/libSDL2_mixer_ext.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libSDL2_mixerX. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
            cd "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
            cmake .. -DDOWNLOAD_AUDIO_CODECS_DEPENDENCY=OFF -DAUDIO_CODECS_BUILD_LOCAL_SDL2=OFF -DUSE_SYSTEM_SDL2=ON -DSDL_MIXER_X_STATIC=OFF -DUSE_FLAC=OFF -DUSE_MP3_MAD=OFF -DUSE_MP3_MPG123=OFF -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libsdl2-mixerx
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
            sudo make -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build" install
            sudo -E stow -v --adopt libsdl2-mixerx
            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download libopenmpt's source code, build and install it for musl based Linux OS.
    if [ -z "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /NOOPENMPT=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

        if [ ! -d "\$SRB2BLDROOT/libraries/libopenmpt/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libopenmpt's source code. Please wait..."
            git clone https://github.com/OpenMPT/openmpt.git --recursive --branch "$LNXOPENMPTVER" "\$SRB2BLDROOT/libraries/libopenmpt"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libopenmpt's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libopenmpt"
            git -C "\$SRB2BLDROOT/libraries/libopenmpt" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libopenmpt" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libopenmpt" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libopenmpt" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/libopenmpt" checkout -q "$LNXOPENMPTVER"

        fi

        if [ ! -f /usr/local/lib/libopenmpt.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libopenmpt/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libopenmpt" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libopenmpt/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libopenmpt. Please wait..."
            gawk -i inplace '{gsub("DYNLINK=1","DYNLINK=0") gsub("STATIC_LIB=1","STATIC_LIB=0") gsub("EXAMPLES=1","EXAMPLES=0") gsub("OPENMPT123=1","OPENMPT123=0") gsub("TEST=1","TEST=0");print}' "\$SRB2BLDROOT/libraries/libopenmpt/Makefile"
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libopenmpt" NO_PORTAUDIO=1 NO_PORTAUDIOCPP=1 NO_SNDFILE=1 NO_FLAC=1
            sudo make -C "\$SRB2BLDROOT/libraries/libopenmpt" PREFIX=/usr/local/stow/libopenmpt install
            sudo -E stow -v --adopt libopenmpt
            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libopenmpt" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libopenmpt/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download libgme's source code, build and install it.
    if [ -z "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /NOGME=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

        if [ ! -d "\$SRB2BLDROOT/libraries/libgme/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libgme's source code. Please wait..."
            git clone https://bitbucket.org/mpyne/game-music-emu.git --recursive --branch "$LNXGMEVER" "\$SRB2BLDROOT/libraries/libgme"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libgme's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libgme"
            git -C "\$SRB2BLDROOT/libraries/libgme" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libgme" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libgme" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libgme" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/libgme" checkout -q "$LNXGMEVER"

        fi

        if [ ! -f /usr/local/lib/libgme.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libgme/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libgme" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libgme/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libgme. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/libgme/build"
            cd "\$SRB2BLDROOT/libraries/libgme/build"
            gawk -i inplace 'BEGIN { del=0 } /4.1 had poor support for symbol visibility/ { del=2 } del<=0 { print } /endif()/ { del -= 1 }' "\$SRB2BLDROOT/libraries/libgme/CMakeLists.txt"
            cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libgme
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libgme/build"
            sudo make -C "\$SRB2BLDROOT/libraries/libgme/build" install
            sudo -E stow -v --adopt libgme
            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libgme" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libgme/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download DiscordRPC source code, build and install it.
    if [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /HAVE_DISCORDRPC=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && ([ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]); then

        if [ ! -d "\$SRB2BLDROOT/libraries/discord-rpc/.git" ]; then

              \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading DiscordRPC's source code. Please wait..."
              git clone https://github.com/discord/discord-rpc.git --recursive --branch "$LNXDISCORDRPCVER" "\$SRB2BLDROOT/libraries/discord-rpc"

        else

              \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up DiscordRPC's source code. Please wait..."
              git config --global --add safe.directory "\$SRB2BLDROOT/libraries/discord-rpc"
              git -C "\$SRB2BLDROOT/libraries/discord-rpc" clean -qdfx -e .comrev
              git -C "\$SRB2BLDROOT/libraries/discord-rpc" reset -q --hard
              git -C "\$SRB2BLDROOT/libraries/discord-rpc" checkout -q master
              git -C "\$SRB2BLDROOT/libraries/discord-rpc" pull --recurse-submodules --rebase --autostash
              git -C "\$SRB2BLDROOT/libraries/discord-rpc" checkout -q "$LNXDISCORDRPCVER"

        fi

        \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing DiscordRPC. Please wait..."
        mkdir -p "\$SRB2BLDROOT/libraries/discord-rpc/build"
        cd "\$SRB2BLDROOT/libraries/discord-rpc/build" || exit

        if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

            DISCORDRPCURL="\$(curl -s https://api.github.com/repos/discord/discord-rpc/releases/latest | gawk -F'"' '/browser_download_url.*discord-rpc-win.zip/ {print \$4}')"
            curl -RL "\$DISCORDRPCURL" > "\$SRB2BLDROOT/libraries/discord-rpc/discord-rpc-win.zip"

            if ([ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ]) || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

                7z e -y "\$SRB2BLDROOT/libraries/discord-rpc/discord-rpc-win.zip" "discord-rpc/win32-dynamic/bin/discord-rpc.dll" -o"\$BUILD/build/AppDir/usr/lib"

            else

                7z e -y "\$SRB2BLDROOT/libraries/discord-rpc/discord-rpc-win.zip" "discord-rpc/win64-dynamic/bin/discord-rpc.dll" -o"\$BUILD/build/AppDir/usr/lib"

            fi

        elif [ "\$OS" = "Linux" ] && ([ ! -f /usr/local/lib/libdiscord-rpc.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/discord-rpc/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/discord-rpc" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/discord-rpc/.comrev" 2> /dev/null)" ])); then

            cmake .. -DBUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local/stow/discord-rpc
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/discord-rpc/build"
            sudo make -C "\$SRB2BLDROOT/libraries/discord-rpc/build" install
            sudo -E stow -v --adopt discord-rpc
            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/discord-rpc" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/discord-rpc/.comrev"

        fi

        cd "\$BUILD" || exit

    fi

    # Download libopenvr's source code, build and install it.
    if [ "\$OS" = "Linux" ] && ([ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]); then

        if [ ! -d "\$SRB2BLDROOT/libraries/libopenvr/.git" ]; then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libopenvr's source code. Please wait..."
            git clone https://github.com/ValveSoftware/openvr.git --recursive --branch "v$LNXOPENVRVER" "\$SRB2BLDROOT/libraries/libopenvr"

        else

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libopenvr. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libopenvr"
            git -C "\$SRB2BLDROOT/libraries/libopenvr" clean -qdfx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libopenvr" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libopenvr" checkout -q master
            git -C "\$SRB2BLDROOT/libraries/libopenvr" pull --recurse-submodules --rebase --autostash
            git -C "\$SRB2BLDROOT/libraries/libopenvr" checkout -q "v$LNXOPENVRVER"

        fi

        if [ ! -f /usr/local/lib/libopenvr_api.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libopenvr/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libopenvr" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libopenvr/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libopenvr. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/libopenvr/build"
            cp -rf "\$SRB2BLDROOT/libraries/libopenvr/src/vrcommon" "\$SRB2BLDROOT/libraries/libopenvr/src/vrcore"
            cd "\$SRB2BLDROOT/libraries/libopenvr/build" || exit
            cmake .. -DBUILD_UNIVERSAL=OFF -DBUILD_SHARED=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libopenvr
            CC="$GCCVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libopenvr/build"
            sudo make -C "\$SRB2BLDROOT/libraries/libopenvr/build" install
            sudo -E stow -v --adopt libopenvr
            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libopenvr" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libopenvr/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download and install FMOD for compiling old SRB2 versions on Windows.
    if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ] && ([ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]); then

        \$PRINTF "$MESSAGE\n%s\n\e[0m" "Installing FMOD to build $BUILDNAME. Please wait..."
        sudo mkdir -p "/usr/include/FMOD"
        curl -kRLOC - "https://zdoom.org/files/fmod/$LNXFMODVER.tar.gz"
        sudo tar xvf "$LNXFMODVER.tar.gz" --wildcards --strip-components=3 -C "/usr/lib" "$LNXFMODVER/api/libfmod-"*.so
        sudo tar xvf "$LNXFMODVER.tar.gz" --strip-components=3 -C "/usr/include/FMOD" "$LNXFMODVER/api/inc"

    fi

    # Download libsfml's source code, build and install it.
#    if [ "\$BUILD" = "\$BUILDPATH/slade" ]; then
#
#        if [ ! -d "\$SRB2BLDROOT/libraries/libsfml/.git" ]; then
#
#            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libsfml's source code. Please wait..."
#            git clone https://github.com/SFML/sfml.git --recursive --branch "$LNXSFMLVER" "\$SRB2BLDROOT/libraries/libsfml"
#
#        else
#
#            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libsfml. Please wait..."
#            git -C "\$SRB2BLDROOT/libraries/libsfml" clean -qdfx -e .comrev
#            git -C "\$SRB2BLDROOT/libraries/libsfml" reset -q --hard
#            git -C "\$SRB2BLDROOT/libraries/libsfml" checkout -q master
#            git -C "\$SRB2BLDROOT/libraries/libsfml" pull --recurse-submodules --rebase --autostash
#            git -C "\$SRB2BLDROOT/libraries/libsfml" checkout -q "$LNXSFMLVER"
#
#        fi
#
#        if [ ! -f /usr/local/lib/libsfml-system.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libsfml/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libsfml" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libsfml/.comrev" 2> /dev/null)" ]); then
#
#            \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libsfml. Please wait..."
#            mkdir -p "\$SRB2BLDROOT/libraries/libsfml/build"
#            cd "\$SRB2BLDROOT/libraries/libsfml/build" || exit
#            cmake .. -DSFML_USE_SYSTEM_DEPS=ON -DSFML_BUILD_EXAMPLES=OFF -DSFML_BUILD_DOC=OFF -DSFML_INSTALL_PKGCONFIG_FILES=1 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libsfml
#            make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libsfml/build"
#            sudo make -C "\$SRB2BLDROOT/libraries/libsfml/build" install
#            sudo -E stow -v --adopt libsfml
#            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libsfml" rev-parse --short HEAD)
#            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libsfml/.comrev"
#            cd "\$BUILD" || exit
#
#        fi
#
#    fi

    # Compile the build's source code.
    \$PRINTF "$MESSAGE\n%s\n\e[0m" "Building $BUILDNAME's source code. Please wait..."

if [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW64" ] || [ "\$(\$PRINTF "%s\n" "\$OS" | gawk -F'_' '{print \$1}')" = "MINGW" ]; then

        if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

            # Running comptime.sh before compiling to avoid errors.
            cd "\$BUILD/src" || exit
            gawk -i inplace '{gsub("\r","");print}' ../comptime.sh
            bash ../comptime.sh

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="i686-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF
                i686-w64-mingw32-objdump -x "\$BUILD/bin/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            else

                CC="\$ARCH-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF
                \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/srb2win\$IS64.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            fi

            cd "\$BUILD" || exit

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="i686-w64-mingw32-$MINGWOLDCCVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF
                i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            else

                CC="\$ARCH-w64-mingw32-$MINGWOLDCCVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF
                \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            mkdir -p "\$BUILD/objs/Mingw/SDL/Release"
            mkdir -p "\$BUILD/objs/Mingw/Release"

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="i686-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 \$CONF
                i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2sdl.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            else

                CC="\$ARCH-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 \$CONF
                \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="i686-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF
                i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            else

                CC="\$ARCH-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 NONX86=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF
                \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

            CXX="\$ARCH-w64-mingw32-$MINGWCXXVER" CPLUS_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/liblzf/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD" WINDOWS=1 \$CONF
            cd "\$BUILD" || exit

        elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

            mkdir -p "\$BUILD/build"
            cd "\$BUILD/build" || exit

            if [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

                MUSLFLAGS="-DNO_WEBVIEW=ON"

            fi

            cmake .. -DwxWidgets_CONFIG_EXECUTABLE=\$(which wx-config wx-config-gtk3 2> /dev/null) -DwxWidgets_LIBRARIES=\$(find /usr -name libwx_baseu-*.so) \$MUSLFLAGS -DCMAKE_SYSTEM_NAME=Windows -DTOOLCHAIN_PREFIX=x86_64-w64-mingw32 -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_CXX_COMPILER="\$ARCH-w64-mingw32-$MINGWCXXVER" -DCMAKE_C_COMPILER="\$ARCH-w64-mingw32-$MINGWCCVER" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr \$CONF
            make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/build"
            make -C "\$BUILD/build" install DESTDIR="\$BUILD/build/AppDir"
            rm -rf "\$BUILD/build/AppDir/usr/share/applications/net.mancubus.SLADE.desktop"
            cd "\$BUILD" || exit

        else

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                # Running comptime.sh before compiling to avoid errors.
                cd "\$BUILD/src" || exit
                gawk -i inplace '{gsub("\r","");print}' ../comptime.sh
                bash ../comptime.sh

                if [ "\$IS64" = "64" ]; then

                    CC="x86_64-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/x86_64-w64-mingw32/include/.:/usr/include/x86_64-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW64=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

                else

                    CC="i686-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

                fi

                # Making list of build's dependencies to copy them to game directory on Windows later.
                if [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

                    if [ "\$IS64" = "64" ]; then

                        x86_64-w64-mingw32-objdump -x "\$BUILD/bin/Mingw64/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    else

                        i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    fi

                elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

                    if [ "\$IS64" = "64" ]; then

                        x86_64-w64-mingw32-objdump -x "\$BUILD/bin/Mingw64/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    else

                        i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    fi

                else

                    if [ "\$IS64" = "64" ]; then

                        x86_64-w64-mingw32-objdump -x "\$BUILD/bin/srb2win64.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    else

                        i686-w64-mingw32-objdump -x "\$BUILD/bin/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    fi

                fi

                cd "\$BUILD" || exit

            else

                # Running comptime.sh before compiling to avoid errors.
                cd "\$BUILD/src" || exit
                gawk -i inplace '{gsub("\r","");print}' ../comptime.sh
                bash ../comptime.sh

                CC="\$ARCH-w64-mingw32-$MINGWCCVER" C_INCLUDE_PATH="/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" MINGW\$IS64=1 SDL=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

                # Making list of build's dependencies to copy them to game directory on Windows later.
                if [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

                    \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

                    \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                else

                    \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/srb2win\$IS64.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                fi

                cd "\$BUILD" || exit

            fi

        fi

     elif [ "\$OS" = "Linux" ]; then

        # Temporarily disabling libpng12 to avoid compiling errors for SRB2 Final Demo.
        if [ -f /usr/local/lib/libpng12.so ] && [ "\$BUILD" != "\$BUILDPATH/srb2-2.0" ]; then

            sudo -E stow -D --adopt libpng12-lib32

        fi

        if [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

            else

                CC="$GCCOLDVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            mkdir -p "\$BUILD/objs/Linux/SDL/Release"

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="$GCCVER" C_INCLUDE_PATH="/usr/include/i386-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 \$CONF

            else

                CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX=1 NONX86=1 \$CONF

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

            CXX="$GXXVER" CPLUS_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/liblzf/." make -k -j\$((\$(nproc) + 1)) -C "\$BUILD" \$CONF

        elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

            mkdir -p "\$BUILD/build"
            cd "\$BUILD/build" || exit

            if [ "\$(ldd --version 2>&1 | gawk 'match(\$0, /musl/) {print substr(\$0, RSTART, RLENGTH)}' | gawk '!a[\$0]++ {print}')" = "musl" ]; then

                MUSLFLAGS="-DNO_WEBVIEW=ON"

            fi

            cmake .. -DwxWidgets_CONFIG_EXECUTABLE=\$(which wx-config wx-config-gtk3 2> /dev/null) -DwxWidgets_LIBRARIES=\$(find /usr -name libwx_baseu-*.so) \$MUSLFLAGS -DCMAKE_CXX_COMPILER="$GXXVER" -DCMAKE_C_COMPILER="$GCCVER" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local \$CONF
            make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/build"
            sudo make -C "\$BUILD/build" install
            sudo rm -rf "/usr/local/share/applications/net.mancubus.SLADE.desktop"
            cd "\$BUILD" || exit

        else

            # Running comptime.sh before compiling to avoid errors.
            cd "\$BUILD/src" || exit
            gawk -i inplace '{gsub("\r","");print}' ../comptime.sh
            bash ../comptime.sh

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

            else

                CC="$GCCVER" C_INCLUDE_PATH="/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:/usr/local/include/.:/usr/local/include/SDL2/." LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme make -k -j\$((\$(nproc) + 1)) -C "\$BUILD/src" LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1 \$CONF

            fi

            cd "\$BUILD" || exit

        fi

        # Renabling libpng12.
        if [ -d /usr/local/stow/libpng12-lib32 ]; then

            sudo -E stow --adopt libpng12-lib32

        fi

    fi

    # Copy compiled binary to AppDir.
    if [ -f "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/lsdl2srb2" ]; then

        cp -rf "\$BUILD/bin/lsdl2srb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux\$IS64/Release/srb2legacy" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/srb2legacy" "\$BUILD/build/AppDir/usr/bin/lsdl2srb2"

    elif [ -f "\$BUILD/bin/srb2legacy" ]; then

        cp -rf "\$BUILD/bin/srb2legacy" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux\$IS64/Release/lsdlsrb2" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/lsdlsrb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/lsdlsrb2" ]; then

        cp -rf "\$BUILD/bin/lsdlsrb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux/Release/lsdl2srb2" ]; then

        cp -rf "\$BUILD/bin/Linux/Release/lsdl2srb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2kart" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2kart" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/lsdl2srb2kart" ]; then

        cp -rf "\$BUILD/bin/lsdl2srb2kart" "\$BUILD/build/AppDir/usr/bin"

    elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        cp -rf "\$BUILD/wadcli" "\$BUILD/build/AppDir/usr/bin"

#    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

#        cp -rf "\$BUILD/build/slade" "\$BUILD/build/AppDir/usr/bin"

    fi

    # Saving configuration flags for future upgrades.
    \$PRINTF "%s\n" "\$CONF" > "\$BUILD/conf"

    # Create desktop file.
    COMREV=\$(git -C "\$BUILD" rev-parse --short HEAD)

    if [ "\$BUILD" = "\$BUILDPATH/srb2" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 (Software)
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=srb2
Exec=srb2 -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 \\\(Software\\\)","Name=Sonic Robo Blast 2 (OpenGL)") || gsub("Exec=srb2 -software","Exec=srb2 -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2uncappedplus-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Uncapped PLUS (Software)
Comment=Modified open source 3D Sonic platformer with improved framerate and additional features
Icon=srb2uncappedplus
Exec=srb2ucp -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2uncappedplus-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2uncappedplus-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Uncapped PLUS \\\(Software\\\)","Name=Sonic Robo Blast 2 Uncapped PLUS (OpenGL)") || gsub("Exec=srb2ucp -software","Exec=srb2ucp -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2uncappedplus-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2netplus-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 NetPlus (Software)
Comment=Modified open source 3D Sonic platformer with rollback netcode
Icon=srb2netplus
Exec=srb2np -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2netplus-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2netplus-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 NetPlus \\\(Software\\\)","Name=Sonic Robo Blast 2 NetPlus (OpenGL)") || gsub("Exec=srb2np -software","Exec=srb2np -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2netplus-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2vr-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 VR (Software)
Comment=Modified open source 3D Sonic VR platformer with improved framerate and additional features
Icon=srb2vr
Exec=srb2vr -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2vr-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2vr-opengl.desktop"
    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2vr-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2vr-openvr.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 VR \\\(Software\\\)","Name=Sonic Robo Blast 2 VR (OpenGL)") || gsub("Exec=srb2vr -software","Exec=srb2vr -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2vr-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 VR \\\(Software\\\)","Name=Sonic Robo Blast 2 VR (OpenVR)") || gsub("Exec=srb2vr -software","Exec=srb2vr -openvr -win");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2vr-openvr.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2legacy-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 v2.1 Legacy (Software)
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=srb2legacy
Exec=srb2legacy -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2legacy-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2legacy-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 v2.1 Legacy \\\(Software\\\)","Name=Sonic Robo Blast 2 v2.1 Legacy (OpenGL)") || gsub("Exec=srb2legacy -software","Exec=srb2legacy -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2legacy-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2_2.0-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 v2.0 (Software)
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=srb2_2.0
Exec=srb2_2.0 -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2_2.0-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2_2.0-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 v2.0 \\\(Software\\\)","Name=Sonic Robo Blast 2 v2.0 (OpenGL)") || gsub("Exec=srb2_2.0 -software","Exec=srb2_2.0 -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2_2.0-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2finaldemo-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Final Demo (Software)
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=srb2finaldemo
Exec=srb2fd -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2finaldemo-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2finaldemo-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Final Demo \\\(Software\\\)","Name=Sonic Robo Blast 2 Final Demo (OpenGL)") || gsub("Exec=srb2fd -software","Exec=srb2fd -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2finaldemo-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2persona-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Persona (Software)
Comment=Modified open source 3D Sonic game with Persona gameplay
Icon=srb2persona
Exec=srb2p -software
Categories=Game;
Keywords=sonic;rpg;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2persona-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2persona-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Persona \\\(Software\\\)","Name=Sonic Robo Blast 2 Persona (OpenGL)") || gsub("Exec=srb2p -software","Exec=srb2p -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2persona-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2kart-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Kart (Software)
Comment=Modified open source 3D Sonic game with kart racing gameplay
Icon=srb2kart
Exec=srb2kart -software
Categories=Game;
Keywords=sonic;kart;racing;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2kart-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2kart-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart (OpenGL)") || gsub("Exec=srb2kart -software","Exec=srb2kart -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2kart-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2kartmoemansion-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Kart Moe Mansion (Software)
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features
Icon=srb2kartmoemansion
Exec=srb2kartmoe -software
Categories=Game;
Keywords=sonic;kart;racing;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2kartmoemansion-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2kartmoemansion-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart Moe Mansion \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart Moe Mansion (OpenGL)") || gsub("Exec=srb2kartmoe -software","Exec=srb2kartmoe -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2kartmoemansion-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2kartvr-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Kart VR (Software)
Comment=Modified open source 3D Sonic game with VR kart racing gameplay, improved framerate and additional features
Icon=srb2kartvr
Exec=srb2kartvr -software
Categories=Game;
Keywords=sonic;kart;racing;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2kartvr-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2kartvr-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart VR \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart VR (OpenGL)") || gsub("Exec=srb2kartvr -software","Exec=srb2kartvr -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2kartvr-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-custom" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2custom-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Custom (Software)
Comment=Modified open source 3D Sonic game
Icon=srb2custom
Exec=srb2custom -software
Categories=Game;
Keywords=sonic;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2custom-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2custom-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Custom \\\(Software\\\)","Name=Sonic Robo Blast 2 Custom (OpenGL)") || gsub("Exec=srb2custom -software","Exec=srb2custom -opengl");print}' "\$BUILD/build/AppDir/usr/share/applications/srb2custom-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/wadcli.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=wadcli
Comment=Allows the manipulation of Doom WAD files through command-line
Icon=wadcli
Exec=wadcli
Categories=Development;
Keywords=sonic;wad;
Terminal=true
NoDisplay=false
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/slade.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=slade
Comment=Allows the manipulation of Doom WAD files
Icon=slade
Exec=slade
Categories=Development;
Keywords=sonic;wad;
Terminal=false
NoDisplay=false
DESKTOP

    fi

    # Get app icon.
    if [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        curl -L https://www.iconfinder.com/icons/285695/download/png/64 -o "\$BUILD/build/icon.png"
        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        ICONSIZE=\$(identify "/usr/local/share/icons/net.mancubus.SLADE.png" | gawk '{print \$3}')
        sudo mkdir -p "/usr/local/share/icons/hicolor/\$ICONSIZE/apps"

    else

        convert "\$BUILD/src/win32/Srb2win.ico[5]" -resize 64x64\! -filter lanczos -alpha on -background none -flatten "\$BUILD/build/icon.png"
        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"

    fi

    if [ "\$BUILD" = "\$BUILDPATH/srb2" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2uncappedplus.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2netplus.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2vr.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2legacy.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2_2.0.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2finaldemo.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2persona.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2kart.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2kartmoemansion.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2kartvr.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-custom" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2custom.png"

    elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/wadcli.png"

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        sudo mv -f "/usr/local/share/icons/net.mancubus.SLADE.png" "/usr/local/share/icons/hicolor/\$ICONSIZE/apps/slade.png"

    fi

fi

ENTRYPOINT
    chmod +x "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker/Entrypoint"

    # Prepare Docker images.
    rm -rf "$SRB2BLDROOT/containers/srb2-games-old-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-tools-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-games-linux-musl-docker" "$SRB2BLDROOT/containers/srb2-games-old-linux-musl-docker" "$SRB2BLDROOT/containers/srb2-tools-linux-musl-docker" "$SRB2BLDROOT/containers/srb2-windows-docker" "$SRB2BLDROOT/containers/srb2-old-windows-docker" "$SRB2BLDROOT/containers/srb2-tools-windows-docker"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-games-old-linux-glibc-docker"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-tools-linux-glibc-docker"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-games-linux-musl-docker"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-games-old-linux-musl-docker"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-tools-linux-musl-docker"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-windows-docker"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-old-windows-docker"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker" "$SRB2BLDROOT/containers/srb2-tools-windows-docker"

    # Set CPU architecture for Docker images in case of building old SRB2 versions.
    if ([ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]) && ([ "$ARCH" = "i386" ] || [ "$ARCH" = "i486" ] || [ "$ARCH" = "i686" ] || [ "$ARCH" = "x86_64" ]) && [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        ISARM="i386/"

    elif ([ "$ARCH" = "i386" ] || [ "$ARCH" = "i486" ] || [ "$ARCH" = "i686" ] || [ "$ARCH" = "x86_64" ]) && [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        ISARM="i386/"

    elif ([ "$ARCH" = "armhf" ] || [ "$ARCH" = "aarch64" ]) && [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        ISARM="armhf/"

    fi

    # Create Dockerfiles.
    cat > "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"ubuntu:"$UBUVER"

ENV container docker \
DEBIAN_FRONTEND noninteractive

RUN printf 'Acquire::Check-Valid-Until "false";\n' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";\n' > /etc/apt/apt.conf.d/01norecommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates curl gawk && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main\ndeb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu bionic main" >> /etc/apt/sources.list && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1EE2FF37CA8DA16B" | gawk '!/Comment:|Version:/ {gsub("\r","");print}' | gpg --dearmor | tee /etc/apt/trusted.gpg.d/aptfast.gpg > /dev/null && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1E9377A2BA9EF27F" | gawk '!/Comment:|Version:/ {gsub("\r","");print}' | gpg --dearmor | tee /etc/apt/trusted.gpg.d/toolchain.gpg > /dev/null

RUN apt-get update && \
apt-get upgrade -y && \
apt-get install -y apt-fast && \
apt-fast install -y libsdl2-dev libsdl2-mixer-dev libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libgme-dev libopenmpt-dev libfluidsynth-dev libmodplug-dev libjack-dev libcurl4-openssl-dev libupnp-dev zlib1g-dev rapidjson-dev libfuse-dev fuse imagemagick nasm build-essential gcc-10 cmake file sudo dash git stow p7zip-full p7zip-rar

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /bin/bash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-games-old-linux-glibc-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"debian:"$DEBVER"

ENV container docker \
DEBIAN_FRONTEND noninteractive

RUN printf 'Acquire::Check-Valid-Until "false";\n' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";\n' > /etc/apt/apt.conf.d/01norecommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates curl gawk && \
gawk -i inplace '{gsub("main","main contrib non-free");print}' /etc/apt/sources.list && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main" >> /etc/apt/sources.list && \
curl -Lks "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1EE2FF37CA8DA16B" | gawk '!/Comment:|Version:/ {gsub("\r","");print}' | gpg --dearmor | tee /etc/apt/trusted.gpg.d/aptfast.gpg > /dev/null

RUN apt-get update && \
apt-get upgrade -y && \
apt-get install -y apt-fast && \
apt-fast install -y libsdl2-dev libsdl2-mixer-dev libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libgme-dev libfluidsynth-dev libmodplug-dev libjack-dev libcurl4-openssl-dev libupnp-dev zlib1g-dev libfuse-dev fuse imagemagick nasm build-essential cmake file sudo dash git stow p7zip-full p7zip-rar

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /bin/dash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-tools-linux-glibc-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"ubuntu:"$UBUSOFTVER"

ENV container docker \
DEBIAN_FRONTEND noninteractive

RUN printf 'Acquire::Check-Valid-Until "false";\n' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";\n' > /etc/apt/apt.conf.d/01norecommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates curl gawk && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main\ndeb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu bionic main" >> /etc/apt/sources.list && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1EE2FF37CA8DA16B" | gawk '!/Comment:|Version:/ {gsub("\r","");print}' | gpg --dearmor | tee /etc/apt/trusted.gpg.d/aptfast.gpg > /dev/null && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1E9377A2BA9EF27F" | gawk '!/Comment:|Version:/ {gsub("\r","");print}' | gpg --dearmor | tee /etc/apt/trusted.gpg.d/toolchain.gpg > /dev/null

RUN apt-get update && \
apt-get upgrade -y && \
apt-get install -y apt-fast && \
apt-fast install -y liblzf-dev libfmt-dev libsfml-dev libjpeg-dev libogg-dev libflac-dev libvorbis-dev libopenal-dev libudev-dev libglew-dev libfreeimage-dev libftgl-dev libfluidsynth-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgconf2-dev freeglut3-dev libmodplug-dev libwxgtk3.0-gtk3-dev libwxgtk-media3.0-gtk3-dev libcurl4-openssl-dev libwxgtk-webview3.0-gtk3-dev libbz2-dev libgtk-3-dev liblua5.3-dev libmpg123-dev libfuse-dev fuse imagemagick nasm build-essential g++-10 cmake file sudo dash git stow p7zip-full p7zip-rar

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /bin/bash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-games-linux-musl-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"alpine:latest

ENV container docker

RUN apk update && \
apk upgrade && \
apk add sdl2-dev sdl2_mixer-dev sdl-dev sdl_mixer-dev glu-dev fluidsynth-dev libmodplug-dev mpg123-dev jack-dev libpng-dev curl-dev libupnp-dev zlib-dev libexecinfo-dev imagemagick nasm build-base cmake sudo bash dash gawk curl git p7zip shadow stow rapidjson-dev
RUN printf "%s\n" "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G wheel -s /usr/bin/dash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-games-old-linux-musl-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"alpine:latest

ENV container docker

RUN apk update && \
apk upgrade && \
apk add sdl2-dev sdl2_mixer-dev sdl-dev sdl_mixer-dev glu-dev fluidsynth-dev libmodplug-dev mpg123-dev jack-dev curl-dev libupnp-dev zlib-dev libexecinfo-dev imagemagick nasm build-base gcc6 cmake sudo bash dash gawk curl git p7zip shadow stow

RUN printf "%s\n" "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G wheel -s /usr/bin/dash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-tools-linux-musl-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"alpine:latest

ENV container docker

RUN apk update && \
apk upgrade && \
apk add liblzf-dev fmt-dev sfml-dev jpeg-dev libogg-dev flac-dev libvorbis-dev openal-soft-dev eudev-dev glew-dev freeimage-dev ftgl-dev fluidsynth-dev gstreamer-dev gst-plugins-base-dev freeglut-dev libmodplug-dev wxgtk3-dev wxgtk3-media curl-dev libbz2 gtk+3.0 lua-dev mpg123-dev fuse-dev libexecinfo-dev imagemagick nasm build-base cmake sudo bash dash gawk curl git p7zip shadow stow

RUN printf "%s\n" "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G wheel -s /usr/bin/dash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-windows-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"debian:latest

ENV container docker \
DEBIAN_FRONTEND noninteractive

RUN printf 'Acquire::Check-Valid-Until "false";\n' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";\n' > /etc/apt/apt.conf.d/01norecommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates curl gawk && \
gawk -i inplace '{gsub("main","main contrib non-free");print}' /etc/apt/sources.list && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main" >> /etc/apt/sources.list && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1EE2FF37CA8DA16B" | gawk '!/Comment:|Version:/ {gsub("\r","");print}' | gpg --dearmor | tee /etc/apt/trusted.gpg.d/aptfast.gpg > /dev/null

RUN apt-get update && \
apt-get upgrade -y && \
apt-get install -y apt-fast && \
apt-fast install -y libsdl2-dev libsdl2-mixer-dev libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libgme-dev libopenmpt-dev libfluidsynth-dev libmodplug-dev libjack-dev libcurl4-openssl-dev libupnp-dev zlib1g-dev rapidjson-dev libfuse-dev fuse imagemagick nasm build-essential mingw-w64 cmake file sudo dash git stow p7zip-full p7zip-rar

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /bin/dash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-old-windows-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"debian:"$DEBVER"

ENV container docker \
DEBIAN_FRONTEND noninteractive

RUN printf 'Acquire::Check-Valid-Until "false";\n' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";\n' > /etc/apt/apt.conf.d/01norecommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates curl gawk && \
gawk -i inplace '{gsub("main","main contrib non-free");print}' /etc/apt/sources.list && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main" >> /etc/apt/sources.list && \
curl -Lks "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1EE2FF37CA8DA16B" | gawk '!/Comment:|Version:/ {gsub("\r","");print}' | gpg --dearmor | tee /etc/apt/trusted.gpg.d/aptfast.gpg > /dev/null

RUN apt-get update && \
apt-get upgrade -y && \
apt-get install -y apt-fast && \
apt-fast install -y libsdl2-dev libsdl2-mixer-dev libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libgme-dev libfluidsynth-dev libmodplug-dev libjack-dev libfuse-dev libcurl4-openssl-dev libupnp-dev zlib1g-dev fuse imagemagick nasm build-essential mingw-w64 cmake file sudo dash git p7zip-full p7zip-rar stow

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /bin/dash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-tools-windows-docker/Dockerfile" << DOCKERFILE
FROM "$ISARM"debian:latest

ENV container docker \
DEBIAN_FRONTEND noninteractive

RUN printf 'Acquire::Check-Valid-Until "false";\n' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'APT::Install-Recommends "0";\nAPT::Install-Suggests "0";\n' > /etc/apt/apt.conf.d/01norecommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates curl gawk && \
gawk -i inplace '{gsub("main","main contrib non-free");print}' /etc/apt/sources.list && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu bionic main" >> /etc/apt/sources.list && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1EE2FF37CA8DA16B" | gawk '!/Comment:|Version:/ {gsub("\r","");print}' | gpg --dearmor | tee /etc/apt/trusted.gpg.d/aptfast.gpg > /dev/null

RUN apt-get update && \
apt-get upgrade -y && \
apt-get install -y apt-fast && \
apt-fast install -y libfluidsynth-dev libmodplug-dev libjack-dev libcurl4-openssl-dev libupnp-dev zlib1g-dev libglew-dev libfreeimage-dev libftgl-dev libsfml-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgconf2-dev freeglut3-dev libwxgtk3.0-gtk3-dev libwxgtk-media3.0-gtk3-dev libwxgtk-webview3.0-gtk3-dev libbz2-dev libgtk-3-dev liblua5.3-dev libfmt-dev libmpg123-dev liblzf-dev libfuse-dev fuse imagemagick nasm build-essential mingw-w64 cmake file sudo dash git stow p7zip-full p7zip-rar rapidjson-dev

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /bin/dash srb2 && \
passwd -d srb2

COPY Entrypoint /home/srb2

ENTRYPOINT [ "/home/srb2/Entrypoint" ]

DOCKERFILE
}

dockerrun() {
    # Restarting Docker daemon in order to avoid connection to be refused by Docker image repository. One time check after every reboot/shutdown of system.
    if [ ! -f /tmp/srb2bld-docker ]; then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Restarting Docker daemon. Please wait..."

        if [ -x "$(which systemctl 2> /dev/null)" ]; then

            $SUDO systemctl restart docker

        elif [ -x "$(which rc-service 2> /dev/null)" ]; then

            $SUDO rc-service docker restart

        elif [ -x "$(which sv 2> /dev/null)" ]; then

            $SUDO sv restart docker

        fi

        touch /tmp/srb2bld-docker
        sleep 1

    fi

    # Running Docker container.
    if [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        if [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for Windows SRB2 builds. Please wait..."
            docker pull "$ISARM"debian:"$DEBVER"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for Windows SRB2 builds. Please wait..."
            docker build --rm -t srb2-old-windows-docker "$SRB2BLDROOT/containers/srb2-old-windows-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            winpty docker run -it --security-opt="label:disable" --volume="C:\\Users\\$USER\\AppData\\Roaming\\srb2bld:$SRB2BLDROOT:rw" srb2-old-windows-docker

        elif [ "$(ldd --version 2>&1 | gawk 'match($0, /musl/) {print substr($0, RSTART, RLENGTH)}' | gawk '!a[$0]++ {print}')" = "musl" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for musl based Linux SRB2 builds. Please wait..."
            docker pull "$ISARM"alpine:latest
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for musl based Linux SRB2 builds. Please wait..."
            docker build --rm -t srb2-games-old-linux-musl-docker "$SRB2BLDROOT/containers/srb2-games-old-linux-musl-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            docker run -it --security-opt="label:disable" --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="/usr/local:/usr/local:rw" srb2-games-old-linux-musl-docker

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for glibc based Linux SRB2 builds. Please wait..."
            docker pull "$ISARM"debian:"$DEBVER"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for glibc based Linux SRB2 builds. Please wait..."
            docker build --rm -t srb2-games-old-linux-glibc-docker "$SRB2BLDROOT/containers/srb2-games-old-linux-glibc-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            docker run -it --security-opt="label:disable" --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="/usr/local:/usr/local:rw" srb2-games-old-linux-glibc-docker

        fi

    else

        if [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ] && ([ "$BUILD" = "$BUILDPATH/wadcli" ] || [ "$BUILD" = "$BUILDPATH/slade" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for Windows SRB2 tools. Please wait..."
            docker pull "$ISARM"debian:latest
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for Windows SRB2 tools. Please wait..."
            docker build --rm -t srb2-tools-windows-docker "$SRB2BLDROOT/containers/srb2-tools-windows-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            winpty docker run -it --security-opt="label:disable" --volume="C:\\Users\\$USER\\AppData\\Roaming\\srb2bld:$SRB2BLDROOT:rw" srb2-tools-windows-docker

        elif [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for Windows SRB2 builds. Please wait..."
            docker pull "$ISARM"debian:latest
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for Windows SRB2 builds. Please wait..."
            docker build --rm -t srb2-windows-docker "$SRB2BLDROOT/containers/srb2-windows-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            winpty docker run -it --security-opt="label:disable" --volume="C:\\Users\\$USER\\AppData\\Roaming\\srb2bld:$SRB2BLDROOT:rw" srb2-windows-docker

        elif [ "$(ldd --version 2>&1 | gawk 'match($0, /musl/) {print substr($0, RSTART, RLENGTH)}' | gawk '!a[$0]++ {print}')" = "musl" ] && ([ "$BUILD" = "$BUILDPATH/wadcli" ] || [ "$BUILD" = "$BUILDPATH/slade" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for musl based Linux SRB2 tools. Please wait..."
            docker pull "$ISARM"alpine:latest
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for musl based Linux SRB2 tools. Please wait..."
            docker build --rm -t srb2-tools-linux-musl-docker "$SRB2BLDROOT/containers/srb2-tools-linux-musl-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            docker run -it --security-opt="label:disable" --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="/usr/local:/usr/local:rw" srb2-tools-linux-musl-docker

        elif [ "$(ldd --version 2>&1 | gawk 'match($0, /musl/) {print substr($0, RSTART, RLENGTH)}' | gawk '!a[$0]++ {print}')" = "musl" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for musl based Linux SRB2 builds. Please wait..."
            docker pull "$ISARM"alpine:latest
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for musl based Linux SRB2 builds. Please wait..."
            docker build --rm -t srb2-games-linux-musl-docker "$SRB2BLDROOT/containers/srb2-games-linux-musl-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            docker run -it --security-opt="label:disable" --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="/usr/local:/usr/local:rw" srb2-games-linux-musl-docker

        elif [ "$OS" = "Linux" ] && ([ "$BUILD" = "$BUILDPATH/wadcli" ] || [ "$BUILD" = "$BUILDPATH/slade" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for glibc based Linux SRB2 tools. Please wait..."
            docker pull "$ISARM"ubuntu:"$UBUSOFTVER"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for glibc based Linux SRB2 tools. Please wait..."
            docker build --rm -t srb2-tools-linux-glibc-docker "$SRB2BLDROOT/containers/srb2-tools-linux-glibc-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            docker run -it --security-opt="label:disable" --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="/usr/local:/usr/local:rw" srb2-tools-linux-glibc-docker

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating Docker image for glibc based Linux SRB2 builds. Please wait..."
            docker pull "$ISARM"ubuntu:"$UBUVER"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building Docker image for glibc based Linux SRB2 builds. Please wait..."
            docker build --rm -t srb2-games-linux-glibc-docker "$SRB2BLDROOT/containers/srb2-games-linux-glibc-docker"
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Running Docker container from built image for $BUILDNAME. Please wait..."
            docker run -it --security-opt="label:disable" --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="/usr/local:/usr/local:rw" srb2-games-linux-glibc-docker

        fi

    fi

    CONTAINER_ID=$(docker ps -alq)
    docker stop "$CONTAINER_ID" > /dev/null
    docker container rm "$CONTAINER_ID" > /dev/null
}

extractmacosassets() {
    if [ "$BUILD" = "$BUILDPATH/srb2" ] || [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ] || [ "$BUILD" = "$BUILDPATH/srb2-netplus" ] || [ "$BUILD" = "$BUILDPATH/srb2-vr" ] || [ "$BUILD" = "$BUILDPATH/srb2-custom" ]; then

        if [ "$(gawk -F'\"' '/SRB2VERSION/ {print $2}' "$BUILD/src/version.h" 2> /dev/null)" != "$SRB2OLDVER" ]; then

            SRB2ASSETURL=$(curl -s https://api.github.com/repos/STJr/SRB2/releases | gawk -F'"' '/'SRB2_release_$SRB2OLDVER'\/.*Full.zip/ {print $4}')
            if [ "$(curl -X GET -sLI "$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print $NF}' | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2-Older.zip" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2-Older.zip"
                curl -RL "$SRB2ASSETURL" -o "$SRB2BLDROOT/assets/SRB2-Older.zip"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2-Older.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"$BUILD/assets/installer"

        else

            SRB2ASSETURL=$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print $4}')
            if [ "$(curl -X GET -sLI "$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print $NF}' | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2-Latest.zip" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2-Latest.zip"
                curl -RL "$SRB2ASSETURL" -o "$SRB2BLDROOT/assets/SRB2-Latest.zip"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"$BUILD/assets/installer"

        fi

        find "$BUILD/assets/installer/models" -type d -exec chmod 755 {} \;

    fi

    if [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        curl -RLC - https://mb.srb2.org/addons/166/download -o "$SRB2BLDROOT/assets/SRB2P_MP.rar"
        unrar x -y "$SRB2BLDROOT/assets/SRB2P_MP.rar" "*.pk3" "*.wad" "$BUILD/assets/installer"

        if [ "$(gawk -F'\"' '/SRB2VERSION/ {print $2}' "$BUILD/src/version.h" 2> /dev/null)" != "$SRB2PERSONAOLDVER" ]; then

            SRB2ASSETURL=$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print $4}')
            if [ "$(curl -X GET -sLI "$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print $NF}' | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2-Latest.zip" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2-Latest.zip"
                curl -RL "$SRB2ASSETURL" -o "$SRB2BLDROOT/assets/SRB2-Latest.zip"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"$BUILD/assets/installer"

        else

            SRB2ASSETURL=$(curl -s https://api.github.com/repos/STJr/SRB2/releases | gawk -F'"' '/'SRB2_release_$SRB2OLDVER'\/.*Full.zip/ {print $4}')
            if [ "$(curl -X GET -sLI "$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print $NF}' | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2-Older.zip" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2-Older.zip"
                curl -RL "$SRB2ASSETURL" -o "$SRB2BLDROOT/assets/SRB2-Older.zip"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2-Older.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"$BUILD/assets/installer"

        fi

        find "$BUILD/assets/installer/models" -type d -exec chmod 755 {} \;

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        curl -RLC - https://github.com/STJr/SRB2/releases/download/SRB2_release_2.1.25/SRB2-v2125-Installer.exe -o "$SRB2BLDROOT/assets/SRB2-2.1.exe"
        7z x -y "$SRB2BLDROOT/assets/SRB2-2.1.exe" "*.srb" "*.dta" "*.dat" -o"$BUILD/assets/installer"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        curl -RLC - https://archive.org/download/srb20ya-v20/SRB2_v206.exe -o "$SRB2BLDROOT/assets/SRB2-2.0.exe"
        7z x -y "$SRB2BLDROOT/assets/SRB2-2.0.exe" "*.plr" "*.dta" "*.wpn" "*.srb" -o"$BUILD/assets/installer"

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        curl -RLC - https://archive.org/download/srb20ya-finaldemo/FinalDemo1094-2008.exe -o "$SRB2BLDROOT/assets/SRB2FinalDemo.exe"
        7z x -y "$SRB2BLDROOT/assets/SRB2FinalDemo.exe" "*.plr" "*.dta" "*.wpn" "*.srb" -o"$BUILD/assets/installer"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        if [ "$(gawk -F'\"|\\(' '/VERSIONSTRING/ && /v[0-9]/ {gsub(" ","");print $2}' "$BUILD/src/doomdef.h" | gawk '!a[$0]++ {print}')" != "$SRB2KARTOLDVER" ]; then

            SRB2KARTASSETURL=$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases | gawk -F'"' '/'$SRB2KARTOLDVER'\/.*Installer.exe/ {print $4}')
            if [ "$(curl -X GET -sLI "$SRB2KARTASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print $NF}' | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2Kart-Older.exe" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2Kart-Older.exe"
                curl -RL "$SRB2KARTASSETURL" -o "$SRB2BLDROOT/assets/SRB2Kart-Older.exe"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2Kart-Older.exe" "*.kart" "*.srb" "*.dat" "mdls/*" -o"$BUILD/assets/installer"

        else

            SRB2KARTASSETURL=$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases/latest | gawk -F'"' '/browser_download_url.*Installer.exe/ {print $4}')
            if [ "$(curl -X GET -sLI "$SRB2KARTASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print $NF}' | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2Kart-Latest.exe" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2Kart-Latest.exe"
                curl -RL "$SRB2KARTASSETURL" -o "$SRB2BLDROOT/assets/SRB2Kart-Latest.exe"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2Kart-Latest.exe" "*.kart" "*.srb" "*.dat" "mdls/*" -o"$BUILD/assets/installer"

        fi

        find "$BUILD/assets/installer/mdls" -type d -exec chmod 755 {} \;

    fi
}

extractmacoscustomassets() {
    BUILDPREFIX=$(printf "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')

    if [ -n "$(find "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE" 2> /dev/null | head -n1)" ]; then

        SRB2ASSETPATH="$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE"

    elif [ -n "$($PRINTF "%s\n" "$SRB2ASSETPATH" | gawk '/drive.google.com/ {print}')" ]; then

        SRB2ASSETID=$($PRINTF "%s\n" "$SRB2ASSETPATH" | gawk '{gsub("https://drive.google.com/file/d/|/view|?usp=sharing","");print}')
        SRB2ASSETPATH="https://drive.google.com/uc?export=download&confirm=t&id=$SRB2ASSETID"
        FILETYPE=$(curl -X GET -sLI "https://drive.google.com/uc?export=download&confirm=t&id=$SRB2ASSETID" | gawk -F'.' '/content-disposition:/ {gsub("\r|\"","");print $NF}')

    elif [ -n "$($PRINTF "%s\n" "$SRB2ASSETPATH" | gawk '/mega.nz/ {print}')" ]; then

        curl -sL https://gist.githubusercontent.com/Bijman/b791993783e2fb80d3e98a3a19b6e6e8/raw/4fb91369313eaa8d67fe911fdcc08797ca432517/megafetch.sh -o "$BUILD/megafetch"
        chmod +x "$BUILD/megafetch"
        MEGANZURL=$("$BUILD/megafetch" "$SRB2ASSETPATH" | gawk '/userstorage.mega.co.nz/ {print}')
        MEGANZFILENAME=$("$BUILD/megafetch" "$SRB2ASSETPATH" | gawk 'NR==2')
        MEGANZHEX=$("$BUILD/megafetch" "$SRB2ASSETPATH" | gawk 'NR==3')
        MEGANZHEXRAW=$("$BUILD/megafetch" "$SRB2ASSETPATH" | gawk 'NR==4')
        SRB2ASSETPATH="$MEGANZURL"
        FILETYPE=$($PRINTF "$MEGANZFILENAME" | gawk -F'.' '{print $NF}')

    else

        SRB2ASSETPATH="$SRB2ASSETPATH"
        FILETYPE=$(curl -X GET -sLI "$SRB2ASSETPATH" | gawk -F'.' '/content-disposition:/ {gsub("\r|\"","");print $NF}')

    fi

    if [ -n "$(curl -X GET -vI "$SRB2ASSETPATH" 2>&1 | gawk '/> Host:/ {gsub("\r","");print $NF}')" ] && [ "$(curl -X GET -sLI "$SRB2ASSETPATH" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r","");print $NF}' | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE" 2> /dev/null)" ]; then

        rm -f "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE"

        if [ -n "$($PRINTF "%s\n" "$SRB2ASSETPATH" | gawk '/drive.google.com/ {print}')" ]; then

            curl -RL "https://drive.google.com/uc?export=download&confirm=t&id=$SRB2ASSETID" -o"$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE"

        elif [ -n "$($PRINTF "%s\n" "$SRB2ASSETPATH" | gawk '/mega.co.nz/ {print}')" ]; then

            curl -RL "$MEGANZURL" -o "$BUILD/$MEGANZFILENAME"
            cat "$BUILD/$MEGANZFILENAME" | openssl enc -d -aes-128-ctr -K "$MEGANZHEX" -iv "$MEGANZHEXRAW" > "$BUILD/$MEGANZFILENAME.new"
            mv -f "$BUILD/$MEGANZFILENAME.new" "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE"

        else

            curl -RL "$SRB2ASSETPATH" -o "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE"

        fi

    fi

    if [ -n "$(find "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE" 2> /dev/null | head -n1)" ]; then

        if [ "$FILETYPE" = "rar" ]; then

            unrar x -y "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.rar" -x"*.exe" -x"*.txt" -x"*.dll" "$BUILD/assets/installer"

        else

            7z x -y "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE" -x!"*.exe" -x!"*.txt" -x!"*.dll" -o"$BUILD/assets/installer"

        fi

        if [ "$(find "$BUILD/assets/installer" -mindepth 1 -maxdepth 1 2> /dev/null | wc -l)" -eq "1" ]; then

            mv -f "$BUILD/assets/installer/"*/* "$BUILD/assets/installer"

        fi

    fi

    if [ -n "$(find "$BUILD/assets/installer/models" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | head -n1)" ]; then

        find "$BUILD/assets/installer/models" -type d -exec chmod 755 {} \;

    elif [ -n "$(find "$BUILD/assets/installer/mdls" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | head -n1)" ]; then

        find "$BUILD/assets/installer/mdls" -type d -exec chmod 755 {} \;

    fi
}

installtolinux() {
    # Saving configuration flags to variable.
    if [ -n "$(cat "$BUILD/conf")" ]; then

        CONF=$(cat "$BUILD/conf")

    fi

    # Adding path to commit revision file.
    COMREVFILEPATH="$BUILD/.comrev"

    # Making missing directory path.
    if [ ! -d "/usr/local/bin" ]; then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Creating /usr/local/bin and /usr/local/games directory paths"
        $SUDO install -d "/usr/local/bin"

    fi

    # Installing build.
    if [ "$BUILD" = "$BUILDPATH/srb2" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2 binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
        $SUDO install -d "$SRB2ASSETLNXPATH"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2UncappedPlus"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2ucp"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2uncappedplus-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2uncappedplus-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2uncappedplus.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2ucp binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
        $SUDO install -d "$SRB2ASSETLNXPATH"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-netplus" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2NetPlus"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2np"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2netplus-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2netplus-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2netplus.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2np binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
        $SUDO install -d "$SRB2ASSETLNXPATH"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-vr" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2VR"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2vr"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2vr-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2vr-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2vr.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2vr binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
        $SUDO install -d "$SRB2ASSETLNXPATH"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2legacy"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2legacy"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2legacy-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2legacy-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2legacy.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2legacy binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/srb2legacy" "$SRB2BINARYLNXPATH"
        $SUDO install -d "$SRB2ASSETLNXPATH"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2-2.0"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2_2.0"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2_2.0-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2_2.0-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2_2.0.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2_2.0 binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdlsrb2" "$SRB2BINARYLNXPATH"
        $SUDO install -d "$SRB2ASSETLNXPATH"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2FinalDemo"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2fd"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2finaldemo-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2finaldemo-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2finaldemo.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2fd binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
        $SUDO install -d "$SRB2ASSETLNXPATH"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2Persona"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2p"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2persona-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2persona-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2persona.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2p binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
        $SUDO install -d "$SRB2ASSETLNXPATH"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2Kart"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2kart"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2kart-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2kart-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2kart.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2kart binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2kart" "$SRB2BINARYLNXPATH"
        $SUDO install -d "$SRB2ASSETLNXPATH"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart"/* "$SRB2ASSETLNXPATH"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2KartMoeMansion"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2kartmoe"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2kartmoemansion-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2kartmoemansion-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2kartmoemansion.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2kartmoe binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2kart" "$SRB2BINARYLNXPATH"
        $SUDO install -d "$SRB2ASSETLNXPATH"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart"/* "$SRB2ASSETLNXPATH"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2KartVR"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2kartvr"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2kartvr-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2kartvr-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2kartvr.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2kartvr binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2kart" "$SRB2BINARYLNXPATH"
        $SUDO install -d "$SRB2ASSETLNXPATH"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart"/* "$SRB2ASSETLNXPATH"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/srb2-custom" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/games/SRB2Custom"
        SRB2BINARYLNXPATH="/usr/local/bin/srb2custom"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/srb2custom-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="/usr/local/share/applications/srb2custom-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2custom.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2custom binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
        $SUDO install -d "$SRB2ASSETLNXPATH"
        $SUDO cp -rf "$BUILD/build/AppDir/usr/games/"*/* "$SRB2ASSETLNXPATH"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

        SRB2BINARYLNXPATH="/usr/local/bin/wadcli"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/wadcli.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/wadcli.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's wadcli binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/wadcli" "$SRB2BINARYLNXPATH"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

    elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

        SRB2ASSETLNXPATH="/usr/local/share/slade3"
        SRB2BINARYLNXPATH="/usr/local/bin/slade"
        SRB2DESKTOPLNXPATH="/usr/local/share/applications/slade.desktop"
        SRB2LNXICONSIZE=$(find "/usr/local/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="/usr/local/share/icons/hicolor/$SRB2LNXICONSIZE/apps/slade.png"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's srb2custom binary, assets, icons and desktop file to the system. Please wait..."
        $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "/usr/local/share/applications"

    fi

    installtolist

    # Refreshing menu icons.
    if [ -x "$(which gtk-update-icon-cache 2> /dev/null)" ]; then

        $SUDO gtk-update-icon-cache -qft /usr/local/share/icons/hicolor

    elif [ -x "$(find /usr/bin -name "kbuildsycoca*" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

        $SUDO "$(find /usr/bin -name "kbuildsycoca*" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" --noincremental

    fi

    # Installing missing libraries for glibc based distros.
    if [ -n "$(ldd $SRB2BINARYLNXPATH | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ {print $1}' | sort -u)" ]; then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing missing dependencies for $BUILDNAME to the system. Please wait..."
        PACKAGE=$(for l in $(ldd "$SRB2BINARYLNXPATH" | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ {print $1}' | sort -u); do

            if [ -x "$(which emerge 2> /dev/null)" ]; then

                if [ ! -x "$(which e-file 2> /dev/null)" ]; then

                    $SUDO emerge pfl > /dev/null

                fi

                e-file "/usr/lib/$l" | col | gawk '/\*/ && gsub(/29m|0m/,"") {print $NF}'

            elif [ -x "$(which pacman 2> /dev/null)" ]; then

                $SUDO pacman -Fy > /dev/null

                if [ "$BUILD" = "$BUILDPATH/slade" ]; then

                    l=$(printf "%s\n" "$l" | gawk '{gsub(".so.*","");print $0".so"}')

                fi

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

                    pacman -Fqx "$l" | gawk '{print}'

                else

                    pacman -Fqx "$l" | gawk '!/lib32-/ {print}'

                fi

            elif [ -x "$(which apt-get 2> /dev/null)" ]; then

                if [ ! -x "$(which apt-file 2> /dev/null)" ]; then

                    $SUDO apt-get install -y apt-file > /dev/null

                fi

                $SUDO apt-file update > /dev/null
                apt-file -l find "$l" | gawk 'NF{print}'

            elif [ -x "$(which zypper 2> /dev/null)" ]; then

                if [ "$BUILD" = "$BUILDPATH/slade" ]; then

                    l=$(printf "%s\n" "$l" | gawk '{gsub(".so.*","");print $0".so"}')

                fi

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

                    zypper -q search --provides "$l" | gawk -F'|' '!/Name/ && /32bit/ {print $2}' | gawk 'NF{print}'

                else

                    zypper -q search --provides "$l" | gawk -F'|' '!/Name|32bit/ {print $2}' | gawk 'NF{print}'

                fi

            elif [ -x "$(which dnf 2> /dev/null)" ]; then

                if [ "$BUILD" = "$BUILDPATH/slade" ]; then

                    l=$(printf "%s\n" "$l" | gawk '{gsub(".so.*","");print $0".so"}')

                fi

                VERSION_ID=$(gawk -F'=' '/VERSION_ID/ {print $NF}' /etc/os-release)

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

                    dnf provides -q "/usr/lib/$l" | gawk '/.fc'$VERSION_ID'./ {print $1}'

                else

                    dnf provides -q "/usr/lib$IS64/$l" | gawk '/.fc'$VERSION_ID'./ {print $1}'

                fi

            elif [ -x "$(which xbps-install 2> /dev/null)" ]; then

                if [ ! -x "$(which xlocate 2> /dev/null)" ]; then

                    $SUDO xbps-install -Sy xtools > /dev/null

                fi

                xlocate -S > /dev/null

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

                    xlocate "$l" | gawk '!/-devel-/ && /-32bit-/ {print $1}' | gawk '!a[$0]++ {print}'

                else

                    xlocate "$l" | gawk '!/-devel-|-32bit-/ {print $1}' | gawk '!a[$0]++ {print}'

                fi

            fi

        done)

        if [ -x "$(which emerge 2> /dev/null)" ]; then

            $SUDO emerge $PACKAGE 2> /dev/null

        elif [ -x "$(which pacman 2> /dev/null)" ]; then

            $SUDO pacman -S --needed --noconfirm $PACKAGE 2> /dev/null

        elif [ -x "$(which apt-get 2> /dev/null)" ]; then

            if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

                ISARM=$(printf "%s\n" "$ISARM" | gawk -F'/' '{print $1}')
                PACKAGE=$(printf "%s\n" "$PACKAGE" | gawk '!/nvidia|primus|virtualbox/ {gsub("$","':$ISARM'");print}')

            fi

            $SUDO apt-get install -y $PACKAGE 2> /dev/null

        elif [ -x "$(which zypper 2> /dev/null)" ]; then

            $SUDO zypper install -y $PACKAGE 2> /dev/null

        elif [ -x "$(which dnf 2> /dev/null)" ]; then

            $SUDO dnf install --best --skip-broken -y $PACKAGE 2> /dev/null

        elif [ -x "$(which xbps-install 2> /dev/null)" ]; then

            $SUDO xbps-install -Sy $PACKAGE 2> /dev/null

        else

            ldd "$SRB2BINARYLNXPATH" | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ {print $1}' | sort -u
            $PRINTF "$NOTICE\n%s\n\e[0m" "Script can't detect package manager. Please install manually these above missing libraries."
            $PRINTF "$SUCCESS\n\n%s\n\e[0m" "Cleaning up source code and exiting shell script. Please wait..."
            cleansource
            exit

        fi

        # Changing library filenames within SLADE binary, in order to be found.
        if [ "$BUILD" = "$BUILDPATH/slade" ]; then

            for l in $(ldd "$SRB2BINARYLNXPATH" | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ {print $1}' | sort -u); do

                if [ ! -x "$(which patchelf 2> /dev/null)" ]; then

                    if [ -x "$(which emerge 2> /dev/null)" ]; then

                        $SUDO emerge patchelf > /dev/null

                    elif [ -x "$(which pacman 2> /dev/null)" ]; then

                        $SUDO pacman -Sy patchelf > /dev/null

                    elif [ -x "$(which apt-get 2> /dev/null)" ]; then

                        $SUDO apt-get install -y patchelf > /dev/null

                    elif [ -x "$(which zypper 2> /dev/null)" ]; then

                        $SUDO zypper install -y patchelf > /dev/null

                    elif [ -x "$(which dnf 2> /dev/null)" ]; then

                        $SUDO dnf install --best --skip-broken -y patchelf > /dev/null

                    elif [ -x "$(which xbps-install 2> /dev/null)" ]; then

                        $SUDO xbps-install -Sy patchelf > /dev/null

                    fi

                fi

                $SUDO patchelf --replace-needed "$l" $(find /usr/lib* -name $(printf "%s\n" "$l" | gawk '{gsub(".so.*","");print $0".so"}') | head -n1 | gawk -F'/' '{print $NF}') "$SRB2BINARYLNXPATH" 2> /dev/null

            done

        fi

        $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Installation of $BUILDNAME's dependencies is successful."

    fi

    # Installing missing libraries for musl based distros.
    if [ -n "$(ldd $SRB2BINARYLNXPATH 2>&1 | gawk -F':' '/No such file or directory/ && !/symbol not found/ {print $1}' | gawk '{print $NF}' | sort -u)" ]; then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing missing dependencies for $BUILDNAME to the system. Please wait..."

        if [ -n "$(ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':' '/No such file or directory/ && !/symbol not found/ {print $1}' | gawk '{print $NF}' | sort -u)" ]; then

            PACKAGE=$(ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':' '/No such file or directory/ && !/symbol not found/ {print $1}' | gawk '{print $NF}' | sort -u)

        elif [ -n "$(ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u)" ]; then

            PACKAGE=$(ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u)

        fi

        PACKAGE=$(for l in $PACKAGE; do

            if [ -x "$(which apk 2> /dev/null)" ]; then

                if [ ! -x "$(which apk-file 2> /dev/null)" ]; then

                    $SUDO apk add apk-file > /dev/null

                fi

                apk-file "$l" | gawk '!/PACKAGE/ {print $2}' | sort -u

            elif [ -x "$(which xbps-install 2> /dev/null)" ]; then

                if [ ! -x "$(which xlocate 2> /dev/null)" ]; then

                    $SUDO xbps-install -Sy xtools > /dev/null

                fi

                xlocate -S > /dev/null

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

                    xlocate "$l" | gawk '!/-devel-|primus/ && /-32bit-/ {print $1}' | gawk '!a[$0]++ {print}'

                else

                    xlocate "$l" | gawk '!/-devel-|-32bit-|primus/ {print $1}' | gawk '!a[$0]++ {print}'

                fi

            fi

        done)

        if [ -x "$(which apk 2> /dev/null)" ]; then

            $SUDO apk add --force-broken-world $PACKAGE 2> /dev/null

        elif [ -x "$(which xbps-install 2> /dev/null)" ]; then

            $SUDO xbps-install -Sy $PACKAGE 2> /dev/null

        else

            ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':' '/No such file or directory/ && !/symbol not found/ {print $1}' | gawk '{print $NF}' | sort -u
            $PRINTF "$NOTICE\n%s\n\e[0m" "Script can't detect package manager. Please install manually these above missing libraries."
            $PRINTF "$SUCCESS\n\n%s\n\e[0m" "Cleaning up source code and exiting shell script. Please wait..."
            cleansource
            exit

        fi

        $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Installation of $BUILDNAME's dependencies is successful."

    fi
}

installtolist() {
    # Making list of installed files.
    mkdir -p "$SRB2BLDROOT/installed"
    cat > "$SRB2BLDROOT/installed/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')" << INSTALL
$SRB2ASSETLNXPATH
$SRB2BINARYLNXPATH
$SRB2DESKTOPLNXPATH
$SRB2DESKTOPOPENGLLNXPATH
$SRB2ICONLNXPATH
$SRB2WINPATH
$SRB2WINMENUPATH
$SRB2MACPATH
$SRB2MACLINK
$COMREVFILEPATH
---------------
$CONF
INSTALL

    gawk -i inplace 'NF{print}' "$SRB2BLDROOT/installed/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')"

    COMREV=$(git -C "$BUILD" rev-parse --short HEAD)
    $PRINTF "%s\n" "$COMREV" > "$BUILD/.comrev"

    if [ -n "$SRB2BINARYLNXPATH" ]; then

        SRB2PATH="$SRB2BINARYLNXPATH"

    elif [ -n "$SRB2MACPATH" ]; then

        SRB2PATH="$SRB2MACPATH and $SRB2MACLINK"

    elif [ -n "$SRB2WINPATH" ]; then

        SRB2PATH="$SRB2WINPATH"

    fi

    $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Installation of $BUILDNAME is successful and is located at $SRB2PATH path."
}

installtomacos() {
    # Exporting environment variables for compiling, installing game and libraries on macOS.
    export MACOSX_DEPLOYMENT_TARGET="$MACOSVER"
    export SDKROOT="$SDKROOT"
    export MACPORTPREFIX="$MACPORTPREFIX"
    export LIBRARY_PATH="/usr/lib:/usr/local/lib:$HOMEBREWPREFIX/lib:$MACPORTPREFIX/lib:$LIBRARY_PATH"
    export C_INCLUDE_PATH="/usr/include:/usr/local/include:$HOMEBREWPREFIX/include:$MACPORTPREFIX/include:$C_INCLUDE_PATH"
    export CPLUS_INCLUDE_PATH="$C_INCLUDE_PATH"
    export PKG_CONFIG_PATH="/usr/lib/pkgconfig:/usr/local/lib/pkgconfig:$HOMEBREWPREFIX/lib/pkgconfig:$MACPORTPREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
    export STOW_DIR="/usr/local/stow"

    # Have commit revision as part of name for App Bundle.
    COMREV=$(git -C "$BUILD" rev-parse --short HEAD)

    # Change prefix depending on, if library is in $HOMEBREWPREFIX/lib or $MACPORTPREFIX/lib or /usr/local/lib.

    if [ -f "$HOMEBREWPREFIX/lib/libSDL2.dylib" ]; then

        LIBSDL2PREFIX="$HOMEBREWPREFIX"

    elif [ -f "$MACPORTPREFIX/lib/libSDL2.dylib" ]; then

        LIBSDL2PREFIX="$MACPORTPREFIX"

    else

        LIBSDL2PREFIX="/usr/local"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libgme.dylib" ]; then

        LIBGMEPREFIX="$HOMEBREWPREFIX"

    elif [ -f "$MACPORTPREFIX/lib/libgme.dylib" ]; then

        LIBGMEPREFIX="$MACPORTPREFIX"

    else

        LIBGMEPREFIX="/usr/local"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libopenmpt.dylib" ]; then

        LIBOPENMPTPREFIX="$HOMEBREWPREFIX"

    elif [ -f "$MACPORTPREFIX/lib/libopenmpt.dylib" ]; then

        LIBOPENMPTPREFIX="$MACPORTPREFIX"

    else

        LIBOPENMPTPREFIX="/usr/local"

    fi

    # Upgrade build. Making sure, that there are only used compilation flags.
    if [ -n "$UPGRADE" ]; then

        export CONF="$(gawk '/---------------/ {gsub("---------------","");getline;print}' "$SRB2BLDROOT/installed/$UPGRADE")"

    # Otherwise set compilation flags, build and install as usual.
    else

        # Warning for MacOS users.
        $PRINTF "$NOTICE\n%s\n\e[0m" "WARNING for macOS users! This script makes changes from rpath to absolute paths within some libraries installed from Homebrew, MacPorts or compiled (mostly should affects libraries compiled by user), that are associated with SRB2 binary, so installing or making App Bundles would be successful. In the future this could make unexpected results with apps or SRB2 builds, that depend on those libraries. Possible changes that would be applied. Save those below commands to text file and revert those changes after process:

        sudo ln -sf /Library/Developer/CommandLineTools/usr/lib/clang/*/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib /usr/local/lib/libclang_rt.ubsan_osx_dynamic.dylib
        sudo install_name_tool -change "@rpath/libclang_rt.ubsan_osx_dynamic.dylib" "/usr/local/lib/libclang_rt.ubsan_osx_dynamic.dylib" /usr/local/lib/libgme.dylib

        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "/usr/local/lib/libbrotlicommon.dylib" /usr/local/lib/libbrotlidec.dylib
        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "/usr/local/lib/libbrotlicommon.dylib" /usr/local/lib/libbrotlienc.dylib

        sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "/usr/local/lib/libSDL2.dylib" /usr/local/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libSDL2-2.0.dylib" "/usr/local/lib/libSDL2.dylib" /usr/local/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libmodplug.dylib" "/usr/local/lib/libmodplug.dylib" /usr/local/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libmodplug.dylib" "/usr/local/lib/libmodplug.dylib" /usr/local/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbis.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbisfile.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libopenmpt.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbis.dylib
        sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbisfile.dylib
        sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libopenmpt.dylib
        sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" $HOMEBREWPREFIX/lib/libbrotlidec.dylib
        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" $HOMEBREWPREFIX/lib/libbrotlienc.dylib

        sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$MACPORTPREFIX/lib/libbrotlicommon.dylib" $MACPORTPREFIX/lib/libbrotlidec.dylib
        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$MACPORTPREFIX/lib/libbrotlicommon.dylib" $MACPORTPREFIX/lib/libbrotlienc.dylib

        sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib

Press y/yes to continue, or n/no or ctrl+c to quit."

        $PRINTF "$PROMPT\n%s\e[0m" "> "
        read -r CONFIRM

        if [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

            # Add compilation flags.
            $PRINTF "$MESSAGE\n%s\n\e[0m" "Please enter $BUILDNAME's space separated compilation flags and then press enter, or just press enter to begin compiling. Default command and flags for compilation:"

            if [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

                cat "$BUILD/README.md"
                $PRINTF "$NOTICE%s\n\e[0m" "make -k -j$(($(nproc) + 1)) -C "$BUILD" YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

                cmake -LAH -S "$BUILD" -B "$BUILD/build" 2>&1 | gawk '{if(f)print} /-- Cache values/{f=1}' 2> /dev/null
                $PRINTF "$NOTICE%s\n\e[0m" "cmake -S $BUILD -B $BUILD/build -DwxWidgets_CONFIG_EXECUTABLE=$(which wx-config wx-config-gtk3 $MACPORTPREFIX/Library/Frameworks/wxWidgets.framework/Versions/wxWidgets/*/bin/wx-config 2> /dev/null | head -n1) -DCMAKE_OSX_SYSROOT=$SDKROOT -DCMAKE_OSX_DEPLOYMENT_TARGET=$MACOSVER -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            else

                # Display content of CMakeLists for a good view of available compilation flags.
                cmake -LAH -S "$BUILD" -B "$BUILD/build" 2>&1 | gawk '{if(f)print} /-- Cache values/{f=1}' 2> /dev/null
                $PRINTF "$NOTICE%s\n\e[0m" "cmake -S $BUILD -B $BUILD/build -DCMAKE_OSX_SYSROOT=$SDKROOT -DCMAKE_OSX_DEPLOYMENT_TARGET=$MACOSVER -DCPACK_PACKAGE_DESCRIPTION_SUMMARY=$BUILDNAME -DCPACK_PACKAGE_FILE_NAME=$BUILDNAME-$COMREV -DCMAKE_BUILD_TYPE=Release -DSRB2_CPACK_GENERATOR=DragNDrop -DCMAKE_INSTALL_PREFIX=/usr/local/opt/srb2-apps -DSDL2_INCLUDE_DIR=$LIBSDL2PREFIX/include/SDL2 -DSDL2_LIBRARY=$LIBSDL2PREFIX/lib/libSDL2.dylib -DGME_INCLUDE_DIR=$LIBGMEPREFIX/include/gme -DGME_LIBRARY=$LIBGMEPREFIX/lib/libgme.dylib -DOPENMPT_INCLUDE_DIR=$LIBOPENMPTPREFIX/include/libopenmpt -DOPENMPT_LIBRARY=$LIBOPENMPTPREFIX/lib/libopenmpt.dylib -DCMAKE_SKIP_RPATH=ON -DCMAKE_SKIP_INSTALL_RPATH=ON YOUR-COMPILATION-FLAGS-WILL-BE-HERE"

            fi

            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r CONF

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "Exiting."
            exit

        fi

        # Some checks, if the build's certain compilation flags were entered.
        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_PNG=OFF/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_PNG:BOOL=OFF/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISPNG=

        else

            ISPNG=libpng

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_GME=OFF/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_GME:BOOL=OFF/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISGME=

        else

            ISGME=libgme

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_OPENMPT=OFF/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_OPENMPT:BOOL=OFF/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISOPENMPT=

        else

            ISOPENMPT=libopenmpt

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_SDL2_USEMIXER=OFF/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_SDL2_USEMIXER:BOOL=OFF/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISSDL2MIXER=

        else

            ISSDL2MIXER=libsdl2_mixer

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_MIXERX=ON/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_MIXERX:BOOL=ON/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISSDL2MIXERX=libsdl2_mixerx

        else

            ISSDL2MIXERX=

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_DISCORDRPC=ON/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_DISCORDRPC:BOOL=ON/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISDISCORDRPC=libdiscord-rpc

        else

            ISDISCORDRPC=

        fi

    fi

    # Download and extract assets.
    if [ -z "$(find "$BUILD/build/assets/installer/"* 2> /dev/null | head -n1)" ] && ([ "$BUILD" != "$BUILDPATH/wadcli" ] && [ "$BUILD" != "$BUILDPATH/slade" ]); then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading and extracting $BUILDNAME's assets. Please wait..."

        if [ "$GITVER" != "$GITDEFVER" ]; then

            extractmacoscustomassets

        else

            extractmacosassets

        fi

    fi

    $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing missing dependencies. Please wait..."
    sudo_ping

    # Fixing permission conflicts between compiled libraries and installed from package manager.
    if [ "$(stat -f %u /usr/local/stow 2> /dev/null)" = "0" ]; then

        sudo chown -R $(whoami) /usr/local/stow

    fi

    if [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

        if [ "$(which port 2> /dev/null)" ]; then

            sudo port -Nc install libfmt

        else

            brew install -f fmt

        fi

    elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

        if [ -n "$(which port 2> /dev/null)" ]; then

            sudo port -Nc install ftgl glew fluidsynth gtk3 freeimage sfml libmodplug $(port -q search wxwidgets-[0-9] | tail -n1) lua

        else

            brew install -f ftgl glew fluidsynth gtk+ freeimage sfml libmodplug wxwidgets lua

        fi

    else

        # Download libpng's source code, build and install it.
        if [ "$ISPNG" = "libpng" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libpng/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libpng's source code. Please wait..."
                git clone git://git.code.sf.net/p/libpng/code.git --recursive --branch "v$MACOSPNGVER" "$SRB2BLDROOT/libraries/libpng"

            else

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libpng's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libpng" clean -qdfx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libpng" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libpng" checkout -q master
                git -C "$SRB2BLDROOT/libraries/libpng" pull --recurse-submodules --rebase --autostash
                git -C "$SRB2BLDROOT/libraries/libpng" checkout -q "v$MACOSPNGVER"

            fi

            if ([ ! -f "/usr/local/lib/libpng.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libpng.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libpng.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libpng/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libpng" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libpng/.comrev" 2> /dev/null)" ]); then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libpng. Please wait..."
                mkdir -p "$SRB2BLDROOT/libraries/libpng/build"
                cmake -S "$SRB2BLDROOT/libraries/libpng" -B "$SRB2BLDROOT/libraries/libpng/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libpng -DCMAKE_MACOSX_RPATH=OFF
                cmake --build "$SRB2BLDROOT/libraries/libpng/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
                sudo -E cmake --install "$SRB2BLDROOT/libraries/libpng/build"
                sudo -E stow -v --adopt libpng
                COMREV=$(git -C "$SRB2BLDROOT/libraries/libpng" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libpng/.comrev"

            fi

        fi

        # Download libogg's source code, build and install it.
        if [ "$ISOPENMPT" = "libopenmpt" ] || [ "$ISSDL2MIXER" = "libsdl2_mixer" ] || [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libogg/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libogg's source code. Please wait..."
                git clone https://gitlab.xiph.org/xiph/ogg.git --recursive --branch "v$MACOSOGGVER" "$SRB2BLDROOT/libraries/libogg"

            else

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libogg's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libogg" clean -qdfx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libogg" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libogg" checkout -q master
                git -C "$SRB2BLDROOT/libraries/libogg" pull --recurse-submodules --rebase --autostash
                git -C "$SRB2BLDROOT/libraries/libogg" checkout -q "v$MACOSOGGVER"

            fi

            if ([ ! -f "/usr/local/lib/libogg.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libogg.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libogg.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libogg/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libogg" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libogg/.comrev" 2> /dev/null)" ]); then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libogg. Please wait..."
                mkdir -p "$SRB2BLDROOT/libraries/libogg/build"
                cmake -S "$SRB2BLDROOT/libraries/libogg" -B "$SRB2BLDROOT/libraries/libogg/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=true -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libogg -DCMAKE_MACOSX_RPATH=OFF
                cmake --build "$SRB2BLDROOT/libraries/libogg/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
                sudo -E cmake --install "$SRB2BLDROOT/libraries/libogg/build"
                sudo -E stow -v --adopt libogg
                COMREV=$(git -C "$SRB2BLDROOT/libraries/libogg" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libogg/.comrev"

            fi

        fi

        # Download libvorbis' source code, build and install it.
        if [ "$ISOPENMPT" = "libopenmpt" ] || [ "$ISSDL2MIXER" = "libsdl2_mixer" ] || [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libvorbis/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libvorbis' source code. Please wait..."
                git clone https://gitlab.xiph.org/xiph/vorbis.git --recursive --branch "v$MACOSVORBISVER" "$SRB2BLDROOT/libraries/libvorbis"

            else

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libvorbis' source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libvorbis" clean -qdfx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libvorbis" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libvorbis" checkout -q master
                git -C "$SRB2BLDROOT/libraries/libvorbis" pull --recurse-submodules --rebase --autostash
                git -C "$SRB2BLDROOT/libraries/libvorbis" checkout -q "v$MACOSVORBISVER"

            fi

            if ([ ! -f "/usr/local/lib/libvorbis.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libvorbis.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libvorbis.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libvorbis/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libvorbis" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libvorbis/.comrev" 2> /dev/null)" ]); then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libvorbis. Please wait..."
                cd "$SRB2BLDROOT/libraries/libvorbis" || exit
                ./autogen.sh
                ./configure --prefix=/usr/local/stow/libvorbis
                make -k -j$(($(sysctl -n hw.logicalcpu) + 1))
                sudo -E make install
                sudo -E stow -v --adopt libvorbis
                COMREV=$(git -C "$SRB2BLDROOT/libraries/libvorbis" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libvorbis/.comrev"
                cd "$BUILD" || exit

            fi

        fi

        # Download libmpg123's source code, build and install it.
        if [ "$ISOPENMPT" = "libopenmpt" ] || [ "$ISSDL2MIXER" = "libsdl2_mixer" ] || [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libmpg123/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libmpg123's source code. Please wait..."
                git clone https://github.com/madebr/mpg123.git --recursive --branch "$MACOSMPG123VER" "$SRB2BLDROOT/libraries/libmpg123"

            else

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libmpg123's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libmpg123" clean -qdfx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libmpg123" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libmpg123" checkout -q master
                git -C "$SRB2BLDROOT/libraries/libmpg123" pull --recurse-submodules --rebase --autostash
                git -C "$SRB2BLDROOT/libraries/libmpg123" checkout -q "$MACOSMPG123VER"

            fi

            if ([ ! -f "/usr/local/lib/libmpg123.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libmpg123.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libmpg123.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libmpg123/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libmpg123" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libmpg123/.comrev" 2> /dev/null)" ]); then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libmpg123. Please wait..."
                cd "$SRB2BLDROOT/libraries/libmpg123" || exit
                autoreconf -iv
                ./configure --prefix=/usr/local/stow/libmpg123
                make -k -j$(($(sysctl -n hw.logicalcpu) + 1))
                sudo -E make install
                sudo -E stow -v --adopt libmpg123
                COMREV=$(git -C "$SRB2BLDROOT/libraries/libmpg123" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libmpg123/.comrev"
                cd "$BUILD" || exit

            fi

        fi

        # Download libmodplug's source code, build and install it.
        if [ "$ISOPENMPT" = "libopenmpt" ] || [ "$ISSDL2MIXER" = "libsdl2_mixer" ] || [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libmodplug/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libmodplug's source code. Please wait..."
                git clone https://github.com/Konstanty/libmodplug.git --recursive --branch "$MACOSMODPLUGVER" "$SRB2BLDROOT/libraries/libmodplug"

            else

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libmodplug's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libmodplug" clean -qdfx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libmodplug" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libmodplug" checkout -q master
                git -C "$SRB2BLDROOT/libraries/libmodplug" pull --recurse-submodules --rebase --autostash
                git -C "$SRB2BLDROOT/libraries/libmodplug" checkout -q "$MACOSMODPLUGVER"

            fi

            if ([ ! -f "/usr/local/lib/libmodplug.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libmodplug.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libmodplug.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libmodplug/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libmodplug" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libmodplug/.comrev" 2> /dev/null)" ]); then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libmodplug. Please wait..."
                mkdir -p "$SRB2BLDROOT/libraries/libmodplug/build"
                cmake -S "$SRB2BLDROOT/libraries/libmodplug" -B "$SRB2BLDROOT/libraries/libmodplug/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=true -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libmodplug -DCMAKE_MACOSX_RPATH=OFF
                cmake --build "$SRB2BLDROOT/libraries/libmodplug/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
                sudo -E cmake --install "$SRB2BLDROOT/libraries/libmodplug/build"
                sudo -E stow -v --adopt libmodplug
                COMREV=$(git -C "$SRB2BLDROOT/libraries/libmodplug" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libmodplug/.comrev"

            fi

        fi

        # Download libSDL2's source code, build and install it.
        if [ ! -d "$SRB2BLDROOT/libraries/libsdl2/.git" ]; then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libSDL2's source code. Please wait..."
            git clone https://github.com/libsdl-org/SDL.git --recursive --branch "release-$MACOSSDL2VER" "$SRB2BLDROOT/libraries/libsdl2"

        else

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libSDL2's source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libsdl2" clean -qdfx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libsdl2" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/libsdl2" checkout -q main
            git -C "$SRB2BLDROOT/libraries/libsdl2" pull --recurse-submodules --rebase --autostash
            git -C "$SRB2BLDROOT/libraries/libsdl2" checkout -q "release-$MACOSSDL2VER"

        fi

        if ([ ! -f "/usr/local/lib/libSDL2.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libSDL2.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libSDL2.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libsdl2/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libsdl2" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libsdl2/.comrev" 2> /dev/null)" ]); then

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libSDL2. Please wait..."
            mkdir -p "$SRB2BLDROOT/libraries/libsdl2/build"
            cmake -S "$SRB2BLDROOT/libraries/libsdl2" -B "$SRB2BLDROOT/libraries/libsdl2/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DSDL_HIDAPI_JOYSTICK=ON -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libsdl2 -DCMAKE_MACOSX_RPATH=OFF
            cmake --build "$SRB2BLDROOT/libraries/libsdl2/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
            sudo -E cmake --install "$SRB2BLDROOT/libraries/libsdl2/build"
            sudo -E stow -v --adopt libsdl2
            COMREV=$(git -C "$SRB2BLDROOT/libraries/libsdl2" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libsdl2/.comrev"

        fi

        # Download libSDL2_mixer's source code, build and install it.
        if [ "$ISSDL2MIXER" = "libsdl2_mixer" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libsdl2-mixer/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libSDL2_mixer's source code. Please wait..."
                git clone https://github.com/libsdl-org/SDL_mixer.git --recursive --branch "release-$MACOSSDL2MIXERVER" "$SRB2BLDROOT/libraries/libsdl2-mixer"

            else

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libSDL2_mixer's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" clean -qdfx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" checkout -q main
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" pull --recurse-submodules --rebase --autostash
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" checkout -q "release-$MACOSSDL2MIXERVER"

            fi

            if ([ ! -f "/usr/local/lib/libSDL2_mixer.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libSDL2_mixer.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libSDL2_mixer.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libsdl2-mixer/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libsdl2-mixer/.comrev" 2> /dev/null)" ]); then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libSDL2_mixer. Please wait..."
                cd "$SRB2BLDROOT/libraries/libsdl2-mixer" || exit
                ./configure \
                    --disable-dependency-tracking \
                    --disable-music-flac \
                    --disable-music-flac-shared \
                    --enable-music-midi \
                    --disable-music-midi-fluidsynth \
                    --disable-music-midi-fluidsynth-shared \
                    --enable-music-midi-native \
                    --disable-music-midi-timidity \
                    --enable-music-mod \
                    --disable-music-mod-mikmod \
                    --disable-music-mod-mikmod-shared \
                    --enable-music-mod-modplug \
                    --disable-music-mod-modplug-shared \
                    --enable-music-mp3 \
                    --enable-music-mp3-mpg123 \
                    --disable-music-mp3-mpg123-shared \
                    --enable-music-ogg \
                    --disable-music-ogg-shared \
                    --disable-music-opus \
                    --disable-music-opus-shared \
                    --enable-music-wave \
                    --prefix=/usr/local/stow/libsdl2-mixer
                make -k -j$(($(sysctl -n hw.logicalcpu) + 1))
                sudo -E make install
                sudo -E stow -v --adopt libsdl2-mixer
                COMREV=$(git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libsdl2-mixer/.comrev"
                cd "$BUILD" || exit

            fi

        fi

        # Download libSDL2_mixerX's source code, build and install it.
        if [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libsdl2-mixerx/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libSDL2_mixerX's source code. Please wait..."
                git clone https://github.com/WohlSoft/SDL-Mixer-X.git --recursive --branch "$MACOSSDL2MIXERXVER" "$SRB2BLDROOT/libraries/libsdl2-mixerx"

            else

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libSDL2_mixerX's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" clean -qdfx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q master
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" pull --recurse-submodules --rebase --autostash
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q "$MACOSSDL2MIXERXVER"

            fi

            if ([ ! -f "/usr/local/lib/libSDL2_mixer_ext.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libSDL2_mixer_ext.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libSDL2_mixer_ext.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev" 2> /dev/null)" ]); then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libSDL2_mixerX. Please wait..."
                mkdir -p "$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
                cmake -S "$SRB2BLDROOT/libraries/libsdl2-mixerx" -B "$SRB2BLDROOT/libraries/libsdl2-mixerx/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DDOWNLOAD_AUDIO_CODECS_DEPENDENCY=OFF -DAUDIO_CODECS_BUILD_LOCAL_SDL2=OFF -DUSE_SYSTEM_SDL2=ON -DSDL_MIXER_X_STATIC=OFF -DUSE_FLAC=OFF -DUSE_MP3_MAD=OFF -DUSE_MP3_MPG123=OFF -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libsdl2-mixerx -DCMAKE_MACOSX_RPATH=OFF
                cmake --build "$SRB2BLDROOT/libraries/libsdl2-mixerx/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
                sudo -E cmake --install "$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
                sudo -E stow -v --adopt libsdl2-mixerx
                COMREV=$(git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev"

            fi

        fi

        # Download libopenmpt's source code, build and install it.
        if [ "$ISOPENMPT" = "libopenmpt" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libopenmpt/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libopenmpt's source code. Please wait..."
                git clone https://github.com/OpenMPT/openmpt.git --recursive --branch "libopenmpt-$MACOSOPENMPTVER" "$SRB2BLDROOT/libraries/libopenmpt"

            else

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libopenmpt's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libopenmpt" clean -qdfx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libopenmpt" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libopenmpt" checkout -q master
                git -C "$SRB2BLDROOT/libraries/libopenmpt" pull --recurse-submodules --rebase --autostash
                git -C "$SRB2BLDROOT/libraries/libopenmpt" checkout -q "libopenmpt-$MACOSOPENMPTVER"

            fi

            if ([ ! -f "/usr/local/lib/libopenmpt.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libopenmpt.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libopenmpt.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libopenmpt/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libopenmpt" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libopenmpt/.comrev" 2> /dev/null)" ]); then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libopenmpt. Please wait..."
                cd "$SRB2BLDROOT/libraries/libopenmpt" || exit
                gawk -i inplace '{gsub("DYNLINK=1","DYNLINK=0") gsub("SOSUFFIX=.so","SOSUFFIX=.dylib") gsub("STATIC_LIB=1","STATIC_LIB=0") gsub("EXAMPLES=1","EXAMPLES=0") gsub("OPENMPT123=1","OPENMPT123=0") gsub("TEST=1","TEST=0");print}' "$SRB2BLDROOT/libraries/libopenmpt/Makefile"
                make -k -j$(($(sysctl -n hw.logicalcpu) + 1)) NO_PORTAUDIO=1 NO_PORTAUDIOCPP=1 NO_SNDFILE=1 NO_FLAC=1
                #cp -f "$SRB2BLDROOT/libraries/libopenmpt/build/autotools/"* "$SRB2BLDROOT/libraries/libopenmpt"
                #cp -f "$SRB2BLDROOT/libraries/libopenmpt/libopenmpt/Doxyfile" "$SRB2BLDROOT/libraries/libopenmpt/Doxyfile.in"
                #mkdir -p "$SRB2BLDROOT/libraries/libopenmpt/libmodplug"
                #cp -f "$SRB2BLDROOT/libraries/libopenmpt/include/modplug/include/libmodplug/libmodplug.pc.in" "$SRB2BLDROOT/libraries/libopenmpt/libmodplug"
                #autoreconf -iv
                #./configure --without-portaudio --without-portaudiocpp --without-sndfile --without-flac --prefix=/usr/local/stow/libopenmpt
                #make -k -j$(($(sysctl -n hw.logicalcpu) + 1))
                sudo -E make PREFIX=/usr/local/stow/libopenmpt install
                sudo -E stow -v --adopt libopenmpt
                COMREV=$(git -C "$SRB2BLDROOT/libraries/libopenmpt" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libopenmpt/.comrev"
                cd "$BUILD" || exit

            fi

        fi

        # Download libgme's source code, build and install it.
        if [ "$ISGME" = "libgme" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libgme/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libgme's source code. Please wait..."
                git clone https://bitbucket.org/mpyne/game-music-emu.git --recursive --branch "$MACOSGMEVER" "$SRB2BLDROOT/libraries/libgme"

            else

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libgme's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libgme" clean -qdfx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libgme" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libgme" checkout -q master
                git -C "$SRB2BLDROOT/libraries/libgme" pull --recurse-submodules --rebase --autostash
                git -C "$SRB2BLDROOT/libraries/libgme" checkout -q "$MACOSGMEVER"

            fi

            if ([ ! -f "/usr/local/lib/libgme.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libgme.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libgme.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libgme/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libgme" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libgme/.comrev" 2> /dev/null)" ]); then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libgme. Please wait..."
                mkdir -p "$SRB2BLDROOT/libraries/libgme/build"
                cmake -S "$SRB2BLDROOT/libraries/libgme" -B "$SRB2BLDROOT/libraries/libgme/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libgme -DCMAKE_MACOSX_RPATH=OFF
                cmake --build "$SRB2BLDROOT/libraries/libgme/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
                sudo -E cmake --install "$SRB2BLDROOT/libraries/libgme/build"
                sudo -E stow -v --adopt libgme
                COMREV=$(git -C "$SRB2BLDROOT/libraries/libgme" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libgme/.comrev"

            fi

        fi

        # Download DiscordRPC's source code, build and install it.
        if [ "$ISDISCORDRPC" = "libdiscord-rpc" ] && ([ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ] || [ "$BUILD" = "$BUILDPATH/srb2-netplus" ] || [ "$BUILD" = "$BUILDPATH/srb2-vr" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]); then

            if [ ! -d "$SRB2BLDROOT/libraries/discord-rpc/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading DiscordRPC's source code. Please wait..."
                git clone https://github.com/discord/discord-rpc.git --recursive --branch "$MACOSDISCORDRPCVER" "$SRB2BLDROOT/libraries/discord-rpc"

            else

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up DiscordRPC's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/discord-rpc" clean -qdfx -e .comrev
                git -C "$SRB2BLDROOT/libraries/discord-rpc" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/discord-rpc" checkout -q master
                git -C "$SRB2BLDROOT/libraries/discord-rpc" pull --recurse-submodules --rebase --autostash
                git -C "$SRB2BLDROOT/libraries/discord-rpc" checkout -q "$MACOSDISCORDRPCVER"

            fi

            if ([ ! -f "/usr/local/lib/libdiscord-rpc.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libdiscord-rpc.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libdiscord-rpc.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/discord-rpc/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/discord-rpc" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/discord-rpc/.comrev" 2> /dev/null)" ]); then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing DiscordRPC. Please wait..."
                mkdir -p "$SRB2BLDROOT/libraries/discord-rpc/build"
                cmake -S "$SRB2BLDROOT/libraries/discord-rpc" -B "$SRB2BLDROOT/libraries/discord-rpc/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/usr/local/stow/discord-rpc -DCMAKE_MACOSX_RPATH=OFF
                cmake --build "$SRB2BLDROOT/libraries/discord-rpc/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
                sudo -E cmake --install "$SRB2BLDROOT/libraries/discord-rpc/build"
                sudo -E stow -v --adopt discord-rpc
                COMREV=$(git -C "$SRB2BLDROOT/libraries/discord-rpc" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/discord-rpc/.comrev"

            fi

        fi

        # Download libopenvr's source code, build and install it.
        if ([ "$BUILD" = "$BUILDPATH/srb2-vr" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]); then

            if [ ! -d "$SRB2BLDROOT/libraries/libopenvr/.git" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Downloading libopenvr's source code. Please wait..."
                git clone https://github.com/ValveSoftware/openvr.git --recursive --branch "v$MACOSOPENVRVER" "$SRB2BLDROOT/libraries/libopenvr"

            else

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up libopenvr. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libopenvr" clean -qdfx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libopenvr" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libopenvr" checkout -q master
                git -C "$SRB2BLDROOT/libraries/libopenvr" pull --recurse-submodules --rebase --autostash
                git -C "$SRB2BLDROOT/libraries/libopenvr" checkout -q "v$MACOSOPENVRVER"

            fi

            if ([ ! -f "/usr/local/lib/libopenvr_api.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libopenvr_api.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libopenvr_api.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libopenvr/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libopenvr" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libopenvr/.comrev" 2> /dev/null)" ]); then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Building and installing libopenvr. Please wait..."
                mkdir -p "$SRB2BLDROOT/libraries/libopenvr/build"
                cp -rf "$SRB2BLDROOT/libraries/libopenvr/src/vrcommon" "$SRB2BLDROOT/libraries/libopenvr/src/vrcore"
                cmake -S "$SRB2BLDROOT/libraries/libopenvr" -B "$SRB2BLDROOT/libraries/libopenvr/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DBUILD_UNIVERSAL=OFF -DBUILD_SHARED=ON -DCMAKE_INSTALL_PREFIX=/usr/local/stow/libopenvr -DCMAKE_MACOSX_RPATH=OFF
                cmake --build "$SRB2BLDROOT/libraries/libopenvr/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release
                sudo -E cmake --install "$SRB2BLDROOT/libraries/libopenvr/build"
                sudo -E stow -v --adopt libopenvr
                COMREV=$(git -C "$SRB2BLDROOT/libraries/libopenvr" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libopenvr/.comrev"

            fi

        fi

    fi

    # Fixing permission conflicts between compiled libraries and installed from package manager.
    if [ "$(stat -f %u /usr/local/stow 2> /dev/null)" = "0" ]; then

        sudo chown -R $(whoami) /usr/local/stow

    fi

    if [ "$GITVERCONF" = "$GITDEFVER" ]; then

        unset GITVERCONF

    fi

    # Patching CMakeLists.txt to prevent macOS from loading external frameworks prior to libraries installed by Homebrew.
    if [ "$BUILD" != "$BUILDPATH/srb2-2.0" ] && [ "$BUILD" != "$BUILDPATH/srb2-final-demo" ]; then

        gawk -i inplace '{gsub("add_definitions\\(-DMACOSX\\)","add_definitions(-DMACOSX)\n        set(CMAKE_FIND_FRAMEWORK LAST)");print}' "$BUILD/CMakeLists.txt"

        gawk -i inplace '{gsub("set\\(CMAKE_C_FLAGS \\${CMAKE_C_FLAGS} -Wno-trigraphs\\)","");print}' "$BUILD/src/CMakeLists.txt"

    fi

    # Patching SRB2 Uncapped Plus' source code to fix error with implicit declaration of function R_ResetFirstLerp is invalid in C99 [-Werror,-Wimplicit-function-declaration]. Thanks Lach for help with this.
    if [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ]; then

        gawk -i inplace '{gsub("#include \"doomdef.h\"","#include \"r_fps.h\"\n#include \"doomdef.h\"");print}' "$BUILD/src/p_setup.c"

    fi

    # Modify the build's configuration and assets directory names to avoid conflicts between installed builds.
    if [ "$BUILD" = "$BUILDPATH/srb2" ] || [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ] || [ "$BUILD" = "$BUILDPATH/srb2-netplus" ] || [ "$BUILD" = "$BUILDPATH/srb2-vr" ] || [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2\"","#define DEFAULTDIR \"srb2'$GITVERCONF'\"");print}' "$BUILD/src/doomdef.h"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2_21\"","#define DEFAULTDIR \"srb2_2.1\"");print}' "$BUILD/src/doomdef.h"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2\"","#define DEFAULTDIR \"srb2_2.0\"");print}' "$BUILD/src/doomdef.h"

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb21094\"","#define DEFAULTDIR \"srb2fd'$GITVERCONF'\"");print}' "$BUILD/src/doomdef.h"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2kart\"","#define DEFAULTDIR \"srb2kart'$GITVERCONF'\"");print}' "$BUILD/src/doomdef.h"

    elif [ "$BUILD" = "$BUILDPATH/srb2-custom" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2\"","#define DEFAULTDIR \"srb2custom'$GITVERCONF'\"");print}' "$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2kart\"","#define DEFAULTDIR \"srb2custom'$GITVERCONF'\"");print}' "$BUILD/src/doomdef.h"

    fi

    # Compile the build's source code.
    $PRINTF "$MESSAGE\n%s\n\e[0m" "Building $BUILDNAME. Please wait..."
    mkdir -p "$BUILD/build"

    if [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

        make -k -j$(($(nproc) + 1)) -C "$BUILD" $CONF

    elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

        cmake -S "$BUILD" -B "$BUILD/build" -DwxWidgets_CONFIG_EXECUTABLE=$(which wx-config wx-config-gtk3 $MACPORTPREFIX/Library/Frameworks/wxWidgets.framework/Versions/wxWidgets/*/bin/wx-config 2> /dev/null | head -n1) -DCMAKE_OSX_SYSROOT="$SDKROOT" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVERSLADE" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr/local/opt/srb2-apps $CONF
        cmake --build "$BUILD/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release

    else

        cmake -S "$BUILD" -B "$BUILD/build" -DCMAKE_OSX_SYSROOT="$SDKROOT" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCPACK_PACKAGE_DESCRIPTION_SUMMARY="$BUILDNAME" -DCPACK_PACKAGE_FILE_NAME="$BUILDNAME-$GITVER-$COMREV" -DCMAKE_BUILD_TYPE=Release -DSRB2_CPACK_GENERATOR=DragNDrop -DCMAKE_INSTALL_PREFIX=/usr/local/opt/srb2-apps -DCMAKE_EXE_LINKER_FLAGS_RELEASE="-headerpad_max_install_names" -DCMAKE_MODULE_LINKER_FLAGS_RELEASE="-headerpad_max_install_names" -DCMAKE_SHARED_LINKER_FLAGS_RELEASE="-headerpad_max_install_names" -DSDL2_INCLUDE_DIR="$LIBSDL2PREFIX/include/SDL2" -DSDL2_LIBRARY="$LIBSDL2PREFIX/lib/libSDL2.dylib" -DSDL2_MIXER_INCLUDE_DIR="/opt/local/include/SDL2" -DSDL2_MIXER_LIBRARY="$LIBSDL2PREFIX/lib/libSDL2_mixer.dylib" -DGME_INCLUDE_DIR="$LIBGMEPREFIX/include/gme" -DGME_LIBRARY="$LIBGMEPREFIX/lib/libgme.dylib" -DOPENMPT_INCLUDE_DIR="$LIBOPENMPTPREFIX/include/libopenmpt" -DOPENMPT_LIBRARY="$LIBOPENMPTPREFIX/lib/libopenmpt.dylib" -DCMAKE_SKIP_RPATH=ON -DCMAKE_SKIP_INSTALL_RPATH=ON $CONF
        cmake --build "$BUILD/build" -j$(($(sysctl -n hw.logicalcpu) + 1)) --config Release

    fi

    if [ "$BUILD" != "$BUILDPATH/wadcli" ] && [ "$BUILD" != "$BUILDPATH/slade" ]; then

        # Get app icon.
        mkdir -p "$BUILD/build/bin/$BUILDNAME.app/Contents/Resources"
        makeicns -in "$BUILD/src/win32/Srb2win.ico" -64 -out "$BUILD/build/bin/$BUILDNAME.app/Contents/Resources/Srb2mac.icns" 2> /dev/null
        gawk -i inplace -v RS= '{sub("<key>CFBundleIconFile</key>\n	<string></string>","<key>CFBundleIconFile</key>\n	<string>Srb2mac</string>");print}' "$BUILD/build/bin/$BUILDNAME.app/Contents/Info.plist"

        # Create /usr/local/lib, if does not exist.
        if [ ! -d /usr/local/lib ]; then

            sudo mkdir -p /usr/local/lib

        fi

        # Fix paths of installed libraries.
        if [ -f "$(find /Library/Developer/CommandLineTools/usr/lib/clang -name libclang_rt.ubsan_osx_dynamic.dylib | head -n1)" ]; then

            sudo ln -sf /Library/Developer/CommandLineTools/usr/lib/clang/*/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib /usr/local/lib/libclang_rt.ubsan_osx_dynamic.dylib
            sudo install_name_tool -change "@rpath/libclang_rt.ubsan_osx_dynamic.dylib" "/usr/local/lib/libclang_rt.ubsan_osx_dynamic.dylib" /usr/local/lib/libgme.dylib

        fi

        if [ -f /usr/local/lib/libbrotlicommon.dylib ]; then

            sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "/usr/local/lib/libbrotlicommon.dylib" /usr/local/lib/libbrotlidec.dylib
            sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "/usr/local/lib/libbrotlicommon.dylib" /usr/local/lib/libbrotlienc.dylib

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" ]; then

            sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" $HOMEBREWPREFIX/lib/libbrotlidec.dylib
            sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" $HOMEBREWPREFIX/lib/libbrotlienc.dylib

        fi

        if [ -f "$MACPORTPREFIX/lib/libbrotlicommon.dylib" ]; then

            sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$MACPORTPREFIX/lib/libbrotlicommon.dylib" $MACPORTPREFIX/lib/libbrotlidec.dylib
            sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$MACPORTPREFIX/lib/libbrotlicommon.dylib" $MACPORTPREFIX/lib/libbrotlienc.dylib

        fi

        if [ -f /usr/local/lib/libSDL2_mixer.dylib ]; then

            sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "/usr/local/lib/libSDL2.dylib" /usr/local/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libSDL2-2.0.dylib" "/usr/local/lib/libSDL2.dylib" /usr/local/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "@rpath/libmodplug.dylib" "/usr/local/lib/libmodplug.dylib" /usr/local/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libmodplug.dylib" "/usr/local/lib/libmodplug.dylib" /usr/local/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libSDL2_mixer.dylib

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libSDL2_mixer.dylib" ]; then

            sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "@rpath/libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib

        fi

        if [ -f "$MACPORTPREFIX/lib/libSDL2_mixer.dylib" ]; then

            sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "@rpath/libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib

        fi

        if [ -f /usr/local/lib/libvorbis.dylib ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbis.dylib
            sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbis.dylib

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libvorbis.dylib" ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbis.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbis.dylib

        fi

        if [ -f "$MACPORTPREFIX/lib/libvorbis.dylib" ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbis.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbis.dylib

        fi

        if [ -f /usr/local/lib/libvorbisfile.dylib ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbisfile.dylib
            sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libvorbisfile.dylib

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libvorbisfile.dylib" ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbisfile.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbisfile.dylib

        fi

        if [ -f "$MACPORTPREFIX/lib/libvorbisfile.dylib" ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbisfile.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbisfile.dylib

        fi

        if [ -f /usr/local/lib/libopenmpt.dylib ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libopenmpt.dylib
            sudo install_name_tool -change "libogg.0.dylib" "/usr/local/lib/libogg.dylib" /usr/local/lib/libopenmpt.dylib

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libopenmpt.dylib" ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libopenmpt.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libopenmpt.dylib

        fi

        if [ -f "$MACPORTPREFIX/lib/libopenmpt.dylib" ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libopenmpt.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libopenmpt.dylib

        fi

        # Fix linking of libraries to build's binary.
        if [ -f /usr/local/lib/libSDL2.dylib ]; then

            install_name_tool -change "@rpath/libSDL2-2.0.dylib" "/usr/local/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libSDL2-2.0.dylib" "/usr/local/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libSDL2.dylib" ]; then

            install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libSDL2.dylib" ]; then

            install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f /usr/local/lib/libmodplug.dylib ]; then

            install_name_tool -change "@rpath/libmodplug.dylib" "/usr/local/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libmodplug.dylib" "/usr/local/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libmodplug.dylib" ]; then

            install_name_tool -change "@rpath/libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libmodplug.dylib" ]; then

            install_name_tool -change "@rpath/libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f /usr/local/lib/libopenmpt.dylib ]; then

            install_name_tool -change "bin/libopenmpt.dylib" "/usr/local/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libopenmpt.dylib" "/usr/local/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libopenmpt.dylib" ]; then

            install_name_tool -change "bin/libopenmpt.dylib" "$HOMEBREWPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libopenmpt.dylib" "$HOMEBREWPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libopenmpt.dylib" ]; then

            install_name_tool -change "bin/libopenmpt.dylib" "$MACPORTPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libopenmpt.dylib" "$MACPORTPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f /usr/local/lib/libgme.dylib ]; then

            install_name_tool -change "@rpath/libgme.0.dylib" "/usr/local/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libgme.0.dylib" "/usr/local/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libgme.dylib" ]; then

            install_name_tool -change "@rpath/libgme.0.dylib" "$HOMEBREWPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libgme.0.dylib" "$HOMEBREWPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libgme.dylib" ]; then

            install_name_tool -change "@rpath/libgme.0.dylib" "$MACPORTPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libgme.0.dylib" "$MACPORTPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f /usr/local/lib/libpng.dylib ]; then

            install_name_tool -change "@rpath/libpng16.16.dylib" "/usr/local/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libpng16.16.dylib" "/usr/local/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libpng.dylib" ]; then

            install_name_tool -change "@rpath/libpng16.16.dylib" "$HOMEBREWPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libpng16.16.dylib" "$HOMEBREWPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libpng.dylib" ]; then

            install_name_tool -change "@rpath/libpng16.16.dylib" "$MACPORTPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libpng16.16.dylib" "$MACPORTPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f /usr/local/lib/libdiscord-rpc.dylib ]; then

            install_name_tool -change "@rpath/libdiscord-rpc.dylib" "/usr/local/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libdiscord-rpc.dylib" "/usr/local/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libdiscord-rpc.dylib" ]; then

            install_name_tool -change "@rpath/libdiscord-rpc.dylib" "$HOMEBREWPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libdiscord-rpc.dylib" "$HOMEBREWPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libdiscord-rpc.dylib" ]; then

            install_name_tool -change "@rpath/libdiscord-rpc.dylib" "$MACPORTPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libdiscord-rpc.dylib" "$MACPORTPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f /usr/local/lib/libopenvr_api.dylib ]; then

            install_name_tool -change "@rpath/libopenvr_api.dylib" "/usr/local/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libopenvr_api.dylib" "/usr/local/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libopenvr_api.dylib" ]; then

            install_name_tool -change "@rpath/libopenvr_api.dylib" "$HOMEBREWPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libopenvr_api.dylib" "$HOMEBREWPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libopenvr_api.dylib" ]; then

            install_name_tool -change "@rpath/libopenvr_api.dylib" "$MACPORTPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libopenvr_api.dylib" "$MACPORTPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

    fi

    # Building App Bundle.
    if [ "$APPBUNDLE" = 1 ]; then

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Building $BUILDNAME's App Bundle. Please wait..."

        if [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

            mkdir -p "$BUILD/build/WADCLI"
            mv -f "$BUILD/build/wadcli" "$BUILD/build/WADCLI"
            cd "$BUILD/build/WADCLI"
            ln -sf /Applications Application
            cd "$BUILD"
            hdiutil create -srcfolder "$BUILD/WADCLI" "$BUILD/build/WADCLI.dmg"

        elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

            mkdir -p "$BUILD/build/$BUILDNAME-$GITVER-$COMREV" "$BUILD/build/slade.app/Contents/Frameworks"
            APPBUNDLELIBS=$(otool -L "$BUILD/build/slade.app/Contents/MacOS/slade" | gawk '/.dylib/ && !/usr\/lib/ {print $1}')
            cp -f $APPBUNDLELIBS "$BUILD/build/slade.app/Contents/Frameworks"

            for l in $APPBUNDLELIBS; do

                LIBNAME=$(printf "%s\n" "$l" | gawk -F'/' '{print $NF}')
                install_name_tool -change "$l" "@executable_path/../Frameworks/$LIBNAME" "$BUILD/build/slade.app/Contents/MacOS/slade"

            done

            mv -f "$BUILD/build/slade.app" "$BUILD/build/$BUILDNAME-$GITVER-$COMREV/$BUILDNAME.app"
            cd "$BUILD/build/$BUILDNAME-$GITVER-$COMREV"
            ln -sf /Applications Application
            cp -f "$BUILD/LICENSE" "$BUILD/build/$BUILDNAME-$GITVER-$COMREV"
            cd "$BUILD"
            hdiutil create -srcfolder "$BUILD/build/$BUILDNAME-$GITVER-$COMREV" -format UDZO -fs HFS+ "$BUILD/build/$BUILDNAME.dmg"

        else

            make -k -j$(($(sysctl -n hw.logicalcpu) + 1)) -C "$BUILD/build" package

        fi

    # Installing build's binary, assets, libraries, icons and desktop file to the system.
    else

        SRB2MACPATH="/usr/local/opt/srb2-apps/$BUILDNAME.app"
        $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's binary, assets, libraries, icons and desktop file to the system. Please wait..."

        if [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

            sudo mkdir -p /usr/local/opt/srb2-apps
            sudo mv -f "$BUILD/wadcli" /usr/local/opt/srb2-apps

        elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

            sudo mkdir -p /usr/local/opt/srb2-apps
            sudo mv -f "$BUILD/build/slade.app" "$SRB2MACPATH"

        else

            sudo -E make -C "$BUILD/build" install

        fi

        # Saving configuration flags for future upgrades.
        $PRINTF "%s\n" "$CONF" > "$BUILD/conf"

        if [ -n "$(cat "$BUILD/conf")" ]; then

            CONF=$(cat "$BUILD/conf")

        fi

        # Adding path to commit revision file.
        COMREVFILEPATH="$BUILD/.comrev"

        # Making symbolic link to .app file in /Applications.
        SRB2MACLINK="/Applications/$BUILDNAME.app"
        sudo rm -rf "$SRB2MACLINK"
        sudo ln -sf "$SRB2MACPATH" "$SRB2MACLINK"

    fi
}

installtowindows() {
    # Saving configuration flags to variable.
    if [ -n "$(cat "$BUILD/conf")" ]; then

        CONF=$(cat "$BUILD/conf")

    fi

    # Adding path to commit revision file.
    COMREVFILEPATH="$BUILD/.comrev"

    # Installing build's binary, assets, libraries, icons and desktop files to the system.
    $PRINTF "$MESSAGE\n%s\n\e[0m" "Installing $BUILDNAME's binary, assets, libraries, icons and desktop files to the system. Please wait..."

    if [ "$BUILD" = "$BUILDPATH/srb2" ]; then

        SRB2WINDIR="SRB2"
        SRB2WINMENUDIR="Sonic Robo Blast 2"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null | head -n1) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/libgcc_s_sjlj"*.dll "$BUILD/build/AppDir/usr/lib/libstdc++"*.dll "$BUILD/build/AppDir/usr/lib/libfluidsynth"*.dll "$BUILD/build/AppDir/usr/lib/openmpt-"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ]; then

        SRB2WINDIR="SRB2 Uncapped Plus"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Uncapped PLUS"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null | head -n1) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/libgcc_s_sjlj"*.dll "$BUILD/build/AppDir/usr/lib/libstdc++"*.dll "$BUILD/build/AppDir/usr/lib/libfluidsynth"*.dll "$BUILD/build/AppDir/usr/lib/openmpt-"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-netplus" ]; then

        SRB2WINDIR="SRB2 NetPlus"
        SRB2WINMENUDIR="Sonic Robo Blast 2 NetPlus"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null | head -n1) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/libgcc_s_sjlj"*.dll "$BUILD/build/AppDir/usr/lib/libstdc++"*.dll "$BUILD/build/AppDir/usr/lib/libfluidsynth"*.dll "$BUILD/build/AppDir/usr/lib/openmpt-"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-vr" ]; then

        SRB2WINDIR="SRB2 VR"
        SRB2WINMENUDIR="Sonic Robo Blast 2 VR"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null | head -n1) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/libgcc_s_sjlj"*.dll "$BUILD/build/AppDir/usr/lib/libstdc++"*.dll "$BUILD/build/AppDir/usr/lib/libfluidsynth"*.dll "$BUILD/build/AppDir/usr/lib/openmpt-"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -openvr -win" > "$SRB2WINPATH/$SRB2WINDIR (OpenVR).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        SRB2WINDIR="SRB2 v2.1 Legacy"
        SRB2WINMENUDIR="Sonic Robo Blast 2 v2.1 Legacy"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null | head -n1) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/exchndl.dll" "$BUILD/build/AppDir/usr/lib/libFLAC"*.dll "$BUILD/build/AppDir/usr/lib/libmodplug"*.dll "$BUILD/build/AppDir/usr/lib/libmpg123"*.dll "$BUILD/build/AppDir/usr/lib/libogg"*.dll "$BUILD/build/AppDir/usr/lib/libopus"*.dll "$BUILD/build/AppDir/usr/lib/libopusfile"*.dll "$BUILD/build/AppDir/usr/lib/libvorbis"*.dll "$BUILD/build/AppDir/usr/lib/libvorbisfile"*.dll "$BUILD/build/AppDir/usr/lib/mgwhelp.dll" "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        SRB2WINDIR="SRB2 v2.0"
        SRB2WINMENUDIR="Sonic Robo Blast 2 v2.0"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null | head -n1) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/r_opengl.dll" "$BUILD/build/AppDir/usr/lib/fmod.dll" "$SRB2WINPATH"
        touch "$SRB2WINPATH/md2.dat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        SRB2WINDIR="SRB2 Final Demo"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Final Demo"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null | head -n1) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/libgcc_s_sjlj"*.dll "$BUILD/build/AppDir/usr/lib/libstdc++"*.dll "$BUILD/build/AppDir/usr/lib/libfluidsynth"*.dll "$BUILD/build/AppDir/usr/lib/openmpt-"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        SRB2WINDIR="SRB2 Persona"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Persona"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null | head -n1) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/libgcc_s_sjlj"*.dll "$BUILD/build/AppDir/usr/lib/libstdc++"*.dll "$BUILD/build/AppDir/usr/lib/libfluidsynth"*.dll "$BUILD/build/AppDir/usr/lib/openmpt-"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ]; then

        SRB2WINDIR="SRB2 Kart"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Kart"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null | head -n1) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/mgwhelp.dll" "$BUILD/build/AppDir/usr/lib/libvorbis"*.dll "$BUILD/build/AppDir/usr/lib/libvorbisfile"*.dll "$BUILD/build/AppDir/usr/lib/libopus"*.dll "$BUILD/build/AppDir/usr/lib/libopusfile"*.dll "$BUILD/build/AppDir/usr/lib/libogg"*.dll "$BUILD/build/AppDir/usr/lib/libmpg123"*.dll "$BUILD/build/AppDir/usr/lib/libmodplug"*.dll "$BUILD/build/AppDir/usr/lib/libFLAC"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ]; then

        SRB2WINDIR="SRB2 Kart Moe Mansion"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Kart Moe Mansion"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null | head -n1) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/mgwhelp.dll" "$BUILD/build/AppDir/usr/lib/libvorbis"*.dll "$BUILD/build/AppDir/usr/lib/libvorbisfile"*.dll "$BUILD/build/AppDir/usr/lib/libopus"*.dll "$BUILD/build/AppDir/usr/lib/libopusfile"*.dll "$BUILD/build/AppDir/usr/lib/libogg"*.dll "$BUILD/build/AppDir/usr/lib/libmpg123"*.dll "$BUILD/build/AppDir/usr/lib/libmodplug"*.dll "$BUILD/build/AppDir/usr/lib/libFLAC"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        SRB2WINDIR="SRB2 Kart VR"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Kart VR"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null | head -n1) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/mgwhelp.dll" "$BUILD/build/AppDir/usr/lib/libvorbis"*.dll "$BUILD/build/AppDir/usr/lib/libvorbisfile"*.dll "$BUILD/build/AppDir/usr/lib/libopus"*.dll "$BUILD/build/AppDir/usr/lib/libopusfile"*.dll "$BUILD/build/AppDir/usr/lib/libogg"*.dll "$BUILD/build/AppDir/usr/lib/libmpg123"*.dll "$BUILD/build/AppDir/usr/lib/libmodplug"*.dll "$BUILD/build/AppDir/usr/lib/libFLAC"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -openvr -win" > "$SRB2WINPATH/$SRB2WINDIR (OpenVR).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-custom" ]; then

        SRB2WINDIR="SRB2 Custom"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Custom"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -type f 2> /dev/null | head -n1) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/$ASSETAPPDIR/"* "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"

        if [ -f "$(find "$BUILD/build/AppDir/usr/lib" -name "libgcc_s_sjlj"*.dll -type f 2> /dev/null | head -n1)" ]; then

            cp -rf "$BUILD/build/AppDir/usr/lib/libgcc_s_sjlj"*.dll "$BUILD/build/AppDir/usr/lib/libstdc++"*.dll "$BUILD/build/AppDir/usr/lib/libfluidsynth"*.dll "$BUILD/build/AppDir/usr/lib/openmpt-"*.dll "$SRB2WINPATH"

        else

            cp -rf "$BUILD/build/AppDir/usr/lib/mgwhelp.dll" "$BUILD/build/AppDir/usr/lib/libvorbis"*.dll "$BUILD/build/AppDir/usr/lib/libvorbisfile"*.dll "$BUILD/build/AppDir/usr/lib/libopus"*.dll "$BUILD/build/AppDir/usr/lib/libopusfile"*.dll "$BUILD/build/AppDir/usr/lib/libogg"*.dll "$BUILD/build/AppDir/usr/lib/libmpg123"*.dll "$BUILD/build/AppDir/usr/lib/libmodplug"*.dll "$BUILD/build/AppDir/usr/lib/libFLAC"*.dll "$SRB2WINPATH"

        fi

        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

        SRB2WINDIR="wadcli"
        SRB2WINMENUDIR="wadcli"
        SRB2WINBIN=$(find "$BUILD" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/$SRB2WINBIN" "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN" > "$SRB2WINPATH/$SRB2WINDIR.bat"

    elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

        SRB2WINDIR="slade"
        SRB2WINMENUDIR="slade"
        SRB2WINBIN=$(find "$BUILD" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        DEPS=$(while read -r FILE; do
            find "$BUILD/build/AppDir/usr/lib" -name "$FILE"
        done < "$BUILD/deps")
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/$SRB2WINBIN" "$SRB2WINPATH"
        cp -rf $DEPS "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN" > "$SRB2WINPATH/$SRB2WINDIR.bat"

    fi

    # Using VBScript to create menu entry for Windows.
    if [ "$BUILD" = "$BUILDPATH/wadcli" ] || [ "$BUILD" = "$BUILDPATH/slade" ]; then

        cat > "$BUILD/build/CreateShortcut.vbs" << WINMENUSHORTCUT
Set oWS = CreateObject("WScript.Shell")
strHomeFolder = oWS.ExpandEnvironmentStrings("%USERPROFILE%")

Set oFSO = CreateObject("Scripting.FileSystemObject")
oFSO.CreateFolder strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR"

Set oWS = WScript.CreateObject("WScript.Shell")
sLinkFile = strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR\\$SRB2WINDIR.bat.lnk"
Set oLink = oWS.CreateShortcut(sLinkFile)
oLink.TargetPath = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINDIR.bat"
oLink.WorkingDirectory = strHomeFolder & "\\$SRB2WINDIR"
oLink.IconLocation = strHomeFolder & "\\$SRB2WINDIR\\$SRB2WINBIN"
oLink.Save
WINMENUSHORTCUT

    else

        cat > "$BUILD/build/CreateShortcut.vbs" << WINMENUSHORTCUT
Set oWS = CreateObject("WScript.Shell")
strHomeFolder = oWS.ExpandEnvironmentStrings("%USERPROFILE%")

Set oFSO = CreateObject("Scripting.FileSystemObject")
oFSO.CreateFolder strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR"

Set oWS = WScript.CreateObject("WScript.Shell")
sLinkFile = strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR\\$SRB2WINDIR (Software).bat.lnk"
Set oLink = oWS.CreateShortcut(sLinkFile)
oLink.TargetPath = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINDIR (Software).bat"
oLink.WorkingDirectory = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR"
oLink.IconLocation = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINBIN"
oLink.Save

sLinkFile = strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR\\$SRB2WINDIR (OpenGL).bat.lnk"
Set oLink = oWS.CreateShortcut(sLinkFile)
oLink.TargetPath = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINDIR (OpenGL).bat"
oLink.WorkingDirectory = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR"
oLink.IconLocation = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINBIN"
oLink.Save
WINMENUSHORTCUT

    fi

    if [ "$BUILD" = "$BUILDPATH/srb2-vr" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        cat >> "$BUILD/build/CreateShortcut.vbs" << WINMENUSHORTCUT
sLinkFile = strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR\\$SRB2WINDIR (OpenVR).bat.lnk"
Set oLink = oWS.CreateShortcut(sLinkFile)
oLink.TargetPath = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINDIR (OpenVR).bat"
oLink.WorkingDirectory = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR"
oLink.IconLocation = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINBIN"
oLink.Save
WINMENUSHORTCUT

    fi

    cscript "$BUILD/build/CreateShortcut.vbs" 2> /dev/null
}

listasset() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/assets" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find downloaded assets."
        exit

    fi

    # List downloaded assets.
    find "$SRB2BLDROOT/assets" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | gawk -F'/' '{print $NF}' | sort
}

listbuild() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/builds" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find downloaded builds."
        exit

    fi

    # List downloaded source code.
    find "$SRB2BLDROOT/builds" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | gawk -F'/' '{print $NF}' | sort
}

listconfig() {
    clear
    if [ -z "$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find installed builds."
        exit

    fi

    # List configuration flags for installed build.
    $PRINTF "$MESSAGE%s\n\e[0m" "Please choose installed build by typing number and then pressing enter. Press enter or ctrl+c to quit."
    array=$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)
    arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            CONF=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
            $PRINTF "%s\n" ""
            gawk '/---------------/ {gsub("---------------","");getline;print}' "$CONF"
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

listinstalled() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find installed builds."
        exit

    fi

    # List files for installed build.
    $PRINTF "$MESSAGE%s\n\e[0m" "Please choose installed build by typing number and then pressing enter. Press enter or ctrl+c to quit."
    array=$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)
    arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            CONF=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
            $PRINTF "%s\n" ""
            gawk '/^/,/---------------/ {gsub("---------------","");print}' "$CONF"
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

preparebuild() {
    # Make directories for storing essential files.
    $PRINTF "$MESSAGE\n%s\n\e[0m" "Preparing directories to store $BUILDNAME's source code, assets and libraries. Please wait..."
    if [ "$OS" = "Darwin" ]; then

        mkdir -p "$SRB2BLDROOT/builds" "$SRB2BLDROOT/assets" "$SRB2BLDROOT/libraries" "$BUILD/assets/installer"

    else

        mkdir -p "$SRB2BLDROOT/builds" "$SRB2BLDROOT/assets" "$SRB2BLDROOT/libraries" "$BUILD/build/AppDir/usr/bin" "$BUILD/build/AppDir/usr/games" "$BUILD/build/AppDir/usr/lib" "$BUILD/build/AppDir/usr/share/applications"

        if [ "$BUILD" = "$BUILDPATH/srb2-kart" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

            ASSETAPPDIR="SRB2Kart"
            mkdir -p "$BUILD/build/AppDir/usr/games/$ASSETAPPDIR"

        elif [ "$BUILD" != "$BUILDPATH/wadcli" ] && [ "$BUILD" != "$BUILDPATH/slade" ]; then

            ASSETAPPDIR="SRB2"
            mkdir -p "$BUILD/build/AppDir/usr/games/$ASSETAPPDIR"

        fi

    fi

    cd "$BUILD" || exit

    if [ "$BUILD" != "$BUILDPATH/wadcli" ] && [ "$BUILD" != "$BUILDPATH/slade" ]; then

        if [ "$GITVER" != "$GITDEFVER" ]; then

            # Set branch in build's configuration directory name.
            GITVERCONF="$GITVER"

            # Set asset's path, if branch was set to other than default.
            if [ -z "$SRB2ASSETPATH" ] || [ "$BUILD" != "$BUILDPATH/srb2-custom" ]; then

                $PRINTF "$MESSAGE\n%s\e[0m" "Please enter $BUILDNAME's assets path, or just press enter to download and extract the latest SRB2/SRB2Kart stable release assets. Supported links/paths:
	- websites with direct link to file, for example, \"https://github.com/STJr/SRB2/releases/download/SRB2_release_2.2.10/SRB2-v2210-Full.zip\",
	- mega.nz,
	- drive.google.com,
	- dropbox.com,
	- full path to downloaded archived file in formats supported by p7zip (https://www.7-zip.org) or full path to directory with build's assets, for example $HOME/Downloads/SRB2.zip for Linux and macOS or C:\Downloads\SRB2.zip for Windows.
"
                $PRINTF "$PROMPT\n%s\e[0m" "> "
                read -r SRB2ASSETPATH

            fi

            # Assume default branch and latest SRB2/SRB2Kart assets, if entered nothing in prompt.
            if [ -z "$SRB2ASSETPATH" ]; then

                $PRINTF "$MESSAGE\n%s\n\e[0m" "Assuming the latest SRB2/SRB2Kart release assets for $BUILDNAME."
                GITVER="$GITDEFVER"

            # Set to custom asset's path locally or remotely.
            else

                # Fixing Windows path to source code to be found by script.
                if [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]; then

                    SRB2ASSETPATH=$($PRINTF "%s\n" "$SRB2ASSETPATH" | gawk 'gsub("\\\\","\\\\");{print}' | gawk '!a[$0]++ {print}')

                fi

                if [ -n "$(find "$SRB2ASSETPATH" 2> /dev/null | head -n1)" ]; then

                    FILETYPE=$(find "$SRB2ASSETPATH" 2> /dev/null | head -n1 | gawk -F'.' '{print $NF}')
                    $PRINTF "$MESSAGE\n%s\n\e[0m" "Copying assets. Please wait..."
                    sleep 1

                    # Copy directory with assets to script's data path.
                    if [ "$(file -b "$SRB2ASSETPATH" 2> /dev/null)" = "directory" ]; then

                        if [ "$OS" = "Darwin" ]; then

                            cp -rf "$SRB2ASSETPATH/"* "$BUILD/build/assets/installer/$ASSETAPPDIR"

                        else

                            cp -rf "$SRB2ASSETPATH/"* "$BUILD/build/AppDir/usr/games/$ASSETAPPDIR"

                        fi

                    # Copy archived file of assets to script's data path.
                    else

                        cp -rf "$SRB2ASSETPATH" "$SRB2BLDROOT/assets/$(printf "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')-$GITVER.$FILETYPE"

                    fi

                fi

            fi

        fi

    fi
}

sudo_ping() {
    # Make sudo to extend password timeout.
    if [ -n "$SUDO_PID" ]; then

        if [ "$1" = stop ]; then

            kill "$SUDO_PID"
            return

        else

            return

        fi

    fi

    sudo -v

    if [ $? -eq 1 ]; then

        return

    fi

    while true; do

        sudo -v
        sleep 30

    done &
    SUDO_PID=$!

    # Clean the build's source code and exit shell script in case of error or cancelling script.
    if [ "$OS" = "Darwin" ]; then

        trap 'sudo_ping stop ; $PRINTF "$SUCCESS\n\n%s\n\e[0m" "Cleaning up source code and exiting shell script. Please wait..." ; cleansource ; exit' 0 1 2 3 6 15

    else

        trap 'sudo_ping stop; exit' 0 1 2 3 6 15

    fi
}

upgrade() {
    clear

    checkuserid

    if [ -z "$(find "$BUILDPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | gawk -F'/' '{print $NF}' | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find installed builds."
        exit

    fi

    # Make a loop to find the SRB2 source code directories and then update them one by one.
    for u in $(find "$BUILDPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | gawk -F'/' '{print $NF}' | sort); do

        export BUILD="$BUILDPATH/$u"

        buildname

        $PRINTF "$MESSAGE\n%s\n\e[0m" "Updating and cleaning up $BUILDNAME's source code. Please wait..."
        cleansource
        git -C "$BUILD" pull --recurse-submodules --rebase --autostash

        if [ -f "$BUILD/.comrev" ] && [ "$(git -C "$BUILD" rev-parse --short HEAD)" != "$(cat "$BUILD/.comrev")" ]; then

            export UPGRADE="$u"

            $PRINTF "$MESSAGE\n%s\n\e[0m" "Upgrading $BUILDNAME. Please wait..."

            buildname

            preparebuild

            if [ "$OS" = "Darwin" ]; then

                installtomacos

                installtolist

            else

                if [ "$OS" = "Linux" ]; then

                    sudo_ping

                fi

                dockerentry

                dockerrun

            fi

            if ([ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW" ]) && [ -d "$BUILD/build/AppDir" ]; then

                installtowindows

                installtolist

                $PRINTF "$SUCCESS\n\n%s\n\e[0m" "Cleaning up source code and exiting shell script. Please wait..."
                cleansource

            elif [ "$OS" = "Linux" ] && [ -d "$BUILD/build/AppDir" ]; then

                installtolinux

                $PRINTF "$SUCCESS\n\n%s\n\e[0m" "Cleaning up source code and exiting shell script. Please wait..."
                cleansource

            fi

        fi

    done && $PRINTF "$SUCCESS\n%s\n\e[0m\a" "Upgrading is successful."
}

usage() {
    clear

    $PRINTF "%s\n" "
Build and install SRB2/SRB2Kart from source.

Usage: srb2bld [OPTIONS]
  OPTIONS:
     -h, --help                             Show this help text.
     -ab, --appbundle                       Compile and create distributable App Bundle of SRB2/SRB2Kart build, which is packaged in DMG file (macOS only).
     -ai, --appimage                        Compile and create distributable AppImage of SRB2/SRB2Kart build (Linux only).
     -c, --compatibility                    Display compatibility table of compiling SRB2/SRB2Kart builds for each operating system.
     -i, --install                          Compile and install SRB2/SRB2Kart build.
     -la, --listasset                       List downloaded SRB2/SRB2Kart assets.
     -lb, --listbuild                       List downloaded SRB2/SRB2Kart builds.
     -lc, --listconfig                      List compilation flags of installed SRB2/SRB2Kart builds.
     -li, --listinstalled                   List installed SRB2/SRB2Kart builds.
     -ra, --removeasset                     Remove downloaded asset for SRB2/SRB2Kart build.
     -rb, --removebuild                     Remove downloaded source code for SRB2/SRB2Kart build.
     -ui, --uninstall                       Uninstall SRB2/SRB2Kart build.
     -up, --upgrade                         Upgrade installed SRB2/SRB2Kart build.

  EXAMPLES:
     1. Compile and install SRB2/SRB2Kart build:
            srb2bld --install

     2. Compile and create AppImage of SRB2/SRB2Kart build (Linux only):
            srb2bld --appimage

     3. List installed SRB2/SRB2Kart builds:
            srb2bld --listinstalled

     4. Uninstall SRB2/SRB2Kart build:
            srb2bld --uninstall

     5. Display compatibility table of compiling SRB2/SRB2Kart builds for each operating system:
            srb2bld --compatibility

  NOTES:
     1. Old builds like SRB2 v2.0 and SRB2 Final Demo may not build/run properly on modern Linux distributions/macOS/Windows.

     2. WARNING for macOS users! This script makes changes from rpath to absolute paths within some libraries installed from Homebrew, MacPorts or compiled (mostly should affects libraries compiled by user), that are associated with SRB2 binary, so installing or making App Bundles would be successful. In the future this could make unexpected results with apps or SRB2 builds, that depend on those libraries.

     3. If you want to compile some builds with DiscordRPC support (SRB2 Uncapped Plus, SRB2 NetPlus, SRB2 Kart, SRB2 Kart Moe Mansion and SRB2 Kart VR), then type \"HAVE_DISCORDRPC=1\" (Linux/Windows) or \"-DSRB2_CONFIG_HAVE_DISCORDRPC=ON\" (macOS), when the script asks about optional compilation flags (using \"srb2bld --install\" command).

     4. If on Linux you get error with \"/dev/fuse\" or FUSE when running script, then load fuse module with \"sudo modprobe fuse\". You can write \"fuse\" in configuration file, usually in file \"/etc/modules\" or \"/etc/modules-load.d/fuse.conf\" or \"/etc/conf.d/modules/fuse.conf\", to automatically load this module at boot.

     5. If 64-bit Linux system has issues with creating or loading \"Sonic Robo Blast 2 Final Demo\" (AppImage or installed), make sure you have installed 32-bit versions of FUSE and glibc:
         - Debian/Ubuntu/Debian based/Ubuntu based: sudo dpkg --add-architecture i386 && sudo apt update && sudo apt install fuse:i386 libc6:i386 zlib1g:i386

     6. If Linux system has issue with running build because of not found compiled libraries, even though they are installed, set export LD_LIBRARY_PATH=\"/usr/local/lib:\$LD_LIBRARY_PATH\" in \"~/.bash_profile\" or \"~/.zshrc\".

     7. There are couple of patches applied within source code of games. Their purpose is to prevent conflicts of installing/running of multiple builds overlapping each other with the same names of directories for storing assets and configuration/saves. Other patches include fixing compilation for some builds on particular systems.

     8. If you choose branch other than default, configuration directory's name will be changed, for example \".srb2\" will become \".srb2udmf\", if \"udmf\" was chosen. Still remember to make backup of configuration/save files, before upgrading to next release of SRB2/SRB2Kart build, if you chose default branch or kept previously chosen different branch.

     9. In order to compile and install custom SRB2/SRB2Kart build (assuming it is not a very old one) from local or remote repository, write environment variables in shell's configuration file,
 like \".bash_profile\" or \".zshrc\", which are:

          - SRB2GITPATH - path to local or remote repository,

          - SRB2GITVER - chosen branch to download build from remote repository,

          - SRB2ASSETPATH - path to assets from local or remote path (supported links/paths:
               - websites with direct link to file, for example, \"https://github.com/STJr/SRB2/releases/download/SRB2_release_2.2.10/SRB2-v2210-Full.zip\",
               - mega.nz,
               - drive.google.com,
               - dropbox.com,
               - full path to downloaded archived file in formats supported by p7zip (https://www.7-zip.org) or full path to directory with build's assets, fo
r example $HOME/Downloads/SRB2.zip for Linux and macOS or C:\Downloads\SRB2.zip for Windows.)

          EXAMPLES:
               1. export SRB2GITPATH=\"https://github.com/STJr/SRB2\"

               2. export SRB2GITPATH=\"https://git.do.srb2.org/TehRealSalt/SRB2\"

               3. export SRB2GITPATH=\"\$HOME/Builds/SRB2\"

               4. export SRB2GITPATH=\"C:\Builds\SRB2\"

               5. export SRB2GITVER=\"udmf\"

               6. export SRB2GITVER=\"master\"

               7. export SRB2ASSETPATH=\"https://github.com/STJr/SRB2/releases/download/SRB2_release_2.2.10/SRB2-v2210-Full.zip\"

               8. export SRB2ASSETPATH=\"https://mega.nz/file/JQswBDAA#IPXWeTmrXrI9YZx6zUznJQ2uIAHryv_WP1JxWfnKbts\"

               9. export SRB2ASSETPATH=\"https://drive.google.com/file/d/1Vc-lHph8MxlnfaBZnv0NNpoFKhehmce6\"

               10. export SRB2ASSETPATH=\"https://www.dropbox.com/s/5neoderzan6mbh3/SRB2PERSONA%20v1.3.3%20Full%20Installer.exe\"

               11. export SRB2ASSETPATH=\"\$HOME/Downloads/SRB2-Full.zip\"

               12. export SRB2ASSETPATH=\"C:\Downloads\SRB2-Full.zip\"

               13. export SRB2ASSETPATH=\"\$HOME/Downloads/SRB2-Full\"

               14. export SRB2ASSETPATH=\"C:\Downloads\SRB2-Full\"

          Then choose \"Build SRB2 Custom\", when running script.
"
}

case "$1" in

    -h | --help)

        usage

        ;;

    "")

        defaultmessage

        ;;

    -ab | --appbundle)

        appbundle

        ;;

    -ai | --appimage)

        appimage

        ;;

    -c | --compatibility)

        compatibility

        ;;

    -i | --install)

        chooseinstall

        ;;

    -la | --listasset)

        listasset

        ;;

    -lb | --listbuild)

        listbuild

        ;;

    -lc | --listconfig)

        listconfig

        ;;

    -li | --listinstalled)

        listinstalled

        ;;

    -ra | --removeasset)

        chooseremoveasset

        ;;

    -rb | --removebuild)

        chooseremovebuild

        ;;

    -ui | --uninstall)

        chooseuninstall

        ;;

    -up | --upgrade)

        upgrade

        ;;

esac
