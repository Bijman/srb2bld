#!/bin/sh

#alias gawk="gawk --posix"

if [ "$SRB2BLDDEBUG" = "1" ]; then

    set -e -x

else

    set -e

fi

# Set environment variables.
ARGS="$*"
ARCH=$(uname -m)
OS=$(uname)
LANG="en_US.UTF-8"

if [ "$OS" = "Darwin" ]; then

    NCPU=$(sysctl -n hw.logicalcpu)
    PRINTF="printf"

else

    NCPU=$(nproc)
    PRINTF=$(which -a printf 2> /dev/null | gawk '/bin/ {print}' | head -n1)

fi

if [ -n "$SRB2BLDNCPU" ]; then

    NCPU="$SRB2BLDNCPU"

fi

COMPTABLEURL="https://gist.githubusercontent.com/Bijman/dae1e123800af25ef28689bd644a4516/raw"
FAILURE="\e[1;91m"
SUCCESS="\e[1;92m"
NOTICE="\e[1;93m"
MESSAGE="\e[1;94m"
PROMPT="\e[1;97m"

# Linux specific environment variables for compatibility reasons.
if [ "$OS" = "Linux" ]; then

    LNXOSID=$(gawk -F'=' '/^ID_LIKE=/ {gsub("\"",""); print $NF}' /etc/os-release)
    LNXOSNAME=$(gawk -F'=' '/^NAME=/ {gsub("\"",""); print $NF}' /etc/os-release)
    ISREADONLY=$(gawk '($2 == "/" || $2 == "/sysroot") && / ro,/ {print}' /proc/mounts 2> /dev/null)

fi

IS64=$($PRINTF "%s\n" "$ARCH" | gawk 'match($0, /64/) {print substr($0, RSTART, RLENGTH)}')
USER=$(whoami)

# Set root directory for builds, assets, libraies etc.
if [ "$OS" = "Darwin" ]; then

    SRB2BLDROOT="$HOME/Library/srb2bld"

elif [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW64" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MINGW32" ] || [ "$($PRINTF "%s\n" "$OS" | gawk -F'_' '{print $1}')" = "MSYS" ]; then

    OS="Windows"
    USER=$(whoami)
    HOME=$($PRINTF "%s\n" "$USERPROFILE" | gawk '{gsub("\\\\","/"); gsub(":/Users","/Users"); gsub("^","/"); print}')
    SRB2BLDROOT="$HOME/AppData/Roaming/srb2bld"

else

    SRB2BLDROOT="$HOME/.local/share/srb2bld"

fi

# Determine installation prefix from user's input.
if [ -n "$($PRINTF "%s\n" "$ARGS" | gawk 'match($0, / -u -| -u$| --user -| --user$/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$ISREADONLY" ]; then

    if [ "$OS" = "Linux" ]; then

        SRB2BLDPREFIX="$HOME/.local"

    elif [ "$OS" = "Darwin" ]; then

        SRB2BLDPREFIX="$HOME/Local"

    else

        SRB2BLDPREFIX="/usr/local"

        # Create prefix path.
        if [ ! -d "$SRB2BLDPREFIX" ] && [ "$OS" != "Windows" ]; then

            if [ "$SRB2BLDPREFIX" != "/usr/local" ]; then

                mkdir -p "$SRB2BLDPREFIX"

            else

                if [ -x "$(command -v doas 2> /dev/null)" ]; then

                    SUDO="doas"

                else

                    SUDO="sudo"

                fi

                $SUDO mkdir -p "$SRB2BLDPREFIX"

            fi

        fi

    fi

else

    if [ "$OS" = "Darwin" ]; then

        SRB2BLDPREFIX="/usr/local/opt/srb2-apps"

    else

        SRB2BLDPREFIX="/usr/local"

    fi

    # Create prefix path.
    if [ ! -d "$SRB2BLDPREFIX" ] && [ "$OS" != "Windows" ]; then

        if [ "$SRB2BLDPREFIX" != "/usr/local" ]; then

            mkdir -p "$SRB2BLDPREFIX"

        else

            if [ -x "$(command -v doas 2> /dev/null)" ]; then

                SUDO="doas"

            else

                SUDO="sudo"

            fi

            $SUDO mkdir -p "$SRB2BLDPREFIX"

        fi

    fi

fi

BUILDPATH="$SRB2BLDROOT/builds"
GITOPTS="-j $NCPU -c https.postBuffer=1048576000"
OSVIRTOPTS="--rm -it --security-opt label=disable --security-opt seccomp=unconfined --cap-add CAP_DAC_OVERRIDE --cap-add CAP_FOWNER --cap-add CAP_AUDIT_WRITE"
UBUVER="bionic"    # Ubuntu 18.04 LTS
UBUSOFTVER="focal" # Ubuntu 20.04 LTS
UBUUZBVER="bionic" # Ubuntu 18.04 LTS
SRB2NETPLUSASSETURL="https://github.com/STJr/SRB2/releases/download/SRB2_release_2.2.9/SRB2-v229-Patch.zip"
SRB2RPHYSASSETURL="https://api.github.com/repos/hazepastel/srb2/releases"
SRB2TSOURDT3RDASSETURL="https://api.github.com/repos/StarManiaKG/The-Story-Of-Uncapped-Revengence-Discord-the-3rd/releases/latest"
SRB2VRASSETURL="https://github.com/STJr/SRB2/releases/download/SRB2_release_2.2.9/SRB2-v229-Patch.zip"
SRB2LEGACYASSETURL="https://github.com/STJr/SRB2/releases/download/SRB2_release_2.1.25/SRB2-v2125-Installer.exe"
SRB220ASSETURL="https://archive.org/download/srb20ya-v20/SRB2_v206.exe"
SRB2FINALDEMOASSETURL="https://archive.org/download/srb20ya-finaldemo/FinalDemo1094-2008.exe"
SRB2JTEASSETURL="https://archive.org/download/SRB2JTE-69-1/srb2jte.zip"
SRB2PERSONAASSETURL="https://mb.srb2.org/addons/166/download"
SRB2KARTHEPASSETURL="https://mb.srb2.org/addons/5254/download"
SRB2KARTNEPTUNEASSETURL="https://api.github.com/repos/NepDisk/srb2k-neptune/releases/latest"
MINGWCCVER="gcc"
MINGWCXXVER="g++"
MINGWOLDCCVER="gcc-4.9-win32"
ANDROIDSDKVER="jdk11"
VCPKG_ROOT="/tmp/vcpkg"

# If you set CCACHE_DIR, this path will be used for cache from previous compilations and speed up recompilation.
if [ -d "$CCACHE_DIR" ]; then

    CCACHE_DIR="$CCACHE_DIR"

elif [ -n "$CCACHE_DIR" ]; then

    CCACHE_DIR="$CCACHE_DIR"
    mkdir -p "$CCACHE_DIR"

else

    CCACHE_DIR="$HOME/.cache/ccache"
    mkdir -p "$CCACHE_DIR"

fi

if [ "$OS" = "Windows" ]; then

    if [ -d "$VCPKG_CACHE_DIR" ]; then

        VCPKG_CACHE_DIR="$HOME/.cache/vcpkg"
        mkdir -p "$VCPKG_CACHE_DIR"

    elif [ -n "$VCPKG_CACHE_DIR" ]; then

        VCPKG_CACHE_DIR="$VCPKG_CACHE_DIR"
        mkdir -p "$VCPKG_CACHE_DIR"

    else

        VCPKG_CACHE_DIR="$HOME/.cache/vcpkg"
        mkdir -p "$VCPKG_CACHE_DIR"

    fi

fi

if [ "$(ldd --version 2>&1 | gawk 'match($0, /musl/) {print substr($0, RSTART, RLENGTH)}' | gawk '!a[$0]++ {print}')" = "musl" ]; then

    GCCVER="gcc"
    GCCOLDVER="gcc-6"
    GXXVER="g++"
    LIBC="musl"

else

    GCCVER="gcc-13"
    GCCOLDVER="gcc-5"
    GXXOLDVER="g++-5"
    GXXVER="g++-13"
    RINGRACERSGCCVER="gcc-10"
    RINGRACERSGXXVER="g++-10"
    SLADEGCCOLDVER="gcc-9"
    SLADEGXXOLDVER="g++-9"

fi

LNXFMODVER="fmodapi375linux"
LNXBACKTRACEVER="master"
LNXPNGVER="master"
LNXPNG12VER="libpng12"
LNXSDL2MIXERXVER="2.5.0"
LNXOPENMPTVER="libopenmpt-0.6.12"
LNXGMEVER="0.6.3"
LNXFLUIDSYNTHVER="2.2.0"
LNXDISCORDRPCVER="master"
LNXOPENVRVER="1.10.30"
LNXLZFVER="master"
LNXZDBSPVER="master"
LNXMONOVER="6.6.0"
LNXMONOUBUVER="18.04"
LNXWXGTK30PKG="libwxgtk3.0-gtk3-dev libwxgtk-media3.0-gtk3-dev libwxgtk-webview3.0-gtk3-dev"
LNXWXGTKPKG="libwxbase3.2-0-unofficial libwxbase3.2unofficial-dev libwxgtk3.2-0-unofficial libwxgtk3.2unofficial-dev wx3.2-headers wx-common libwxgtk-media3.2-0-unofficial libwxgtk-media3.2unofficial-dev libwxgtk-webview3.2-0-unofficial libwxgtk-webview3.2unofficial-dev libwxgtk-webview3.2-0-unofficial-dbg libwxbase3.2-0-unofficial-dbg libwxgtk3.2-0-unofficial-dbg libwxgtk-media3.2-0-unofficial-dbg wx3.2-i18n wx3.2-examples"
LNXDEPOTTOOLSVER="main"
LNXSKIAVER="aseprite-m102"
LNXVCPKGVER="master"

if [ "$OS" = "Darwin" ]; then

    MACOSVER="10.9"
    MACOSVERSLADE="11"
    MACOSPNGVER="1.6.37"
    MACOSOGGVER="1.3.5"
    MACOSVORBISVER="1.3.7"
    MACOSMPG123VER="master"
    MACOSMODPLUGVER="master"
    MACOSSDL2VER="release-2.24.x"
    #    MACOSSDL2MIXERVER="release-2.0.4"
    MACOSSDL2MIXERVER="release-2.6.0"
    MACOSSDL2MIXERXVER="2.5.0"
    MACOSOPENMPTVER="0.4.12"
    MACOSGMEVER="0.6.2"
    MACOSDISCORDRPCVER="master"
    MACOSOPENVRVER="1.10.30"
    MACOSLZFVER="master"
    MACOSMONOVER="6.6.0"
    MACOSDEPOTTOOLSVER="main"
    MACOSSKIAVER="aseprite-m102"
    MACOSVCPKGVER="master"

    if [ -x "$(command -v brew 2> /dev/null)" ]; then

        HOMEBREWPREFIX=$(brew --prefix)

    fi

    MACPORTPREFIX="/opt/local"

fi

checkuseropt() {
    # Blocking access to option -u/--user for building bundles in Linux.
    if ([ -n "$ANDROID" ] || [ -n "$APPBUNDLE" ] || [ -n "$APPIMAGE" ] || [ -n "$FLATPAK" ] || [ -n "$UPGRADE" ]) && [ -n "$($PRINTF "%s\n" "$ARGS" | gawk 'match($0, / -u$| --user$/) {print substr($0, RSTART, RLENGTH)}')" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Currently building with option $($PRINTF "%s\n" "$ARGS" | gawk '{print $1}') is not supported with -u/--user. Exiting."
        exit

    fi
}

checkuserid() {
    # Check id of login running this script.
    if [ "$(id -u)" -eq 0 ]; then

        $PRINTF "$NOTICE%s\n\e\n[0m" "WARNING: It is not recommended to run srb2bld as root. Press ctrl+c to quit and run again script as user in \"docker\" group or continue."

    fi
}

checkreadonly() {
    # Check if root filesystem is mounted read-only.
    if [ "$OS" = "Linux" ] && [ -n "$ISREADONLY" ]; then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e\n[0m" "Detected read-only root filesystem. Assuming \"$SRB2BLDPREFIX\" as install path to builds, assets and storage to containers."

    fi
}

android() {
    clear

    # Blocking access to this option for users that have OS other than Linux and Windows.
    if [ "$OS" != "Linux" ] && [ "$OS" != "Windows" ] && [ -z "$(ldd --version 2>&1 | gawk '/Free Software Foundation/ {print}')" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Currently building APKs is only available for Linux and Windows. Exiting."
        exit

    fi

    # We have to set this in order to make APK in Docker/Podman container.
    ANDROID=1

    checkuseropt

    # Set current working directory.
    ANDPWD="$(pwd)"

    # If you set GRADLE_USER_HOME, this path will be used for cache from previous compilations and speed up recompilation.
    if [ -d "$GRADLE_USER_HOME" ]; then

        GRADLE_USER_HOME="$GRADLE_USER_HOME"

    elif [ -n "$GRADLE_USER_HOME" ] && [ ! -d "$GRADLE_USER_HOME" ]; then

        GRADLE_USER_HOME="$GRADLE_USER_HOME"
        mkdir -p "$GRADLE_USER_HOME"

    else

        GRADLE_USER_HOME="$HOME/.cache/gradle"
        mkdir -p "$GRADLE_USER_HOME"

    fi

    chooseandroidbuild

    buildvar

    fetchupdatebuild

    choosebranchcommit

    if [ ! -x "$BUILD/android/gradlew" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Couldn't find gradlew script at path \"$BUILD/android\". Exiting."
        exit

    fi

    preparebuild

    setsudo

    preparecontainer

    containerentry

    if [ "$OS" = "Linux" ]; then

        sudo_ping

    fi

    settrap

    containerrun

    # Set name of AppImage in message.
    APKNAME=$(find "$BUILD/android/app/build/outputs/apk/gameFull/debug" -name "*.apk" 2> /dev/null | gawk -F'/' '{print $NF}')

    # Move created APK to working directory.
    mv -f "$BUILD/android/app/build/outputs/apk/gameFull/debug/"*.apk "$ANDPWD" 2> /dev/null
    $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "Android APK for $BUILDNAME is done. Look for \"$APKNAME\" in \"$ANDPWD\" path."
}

appbundle() {
    clear

    # Blocking access to this option for users that uses OS other than macOS since App Bundles are macOS exclusive.
    if [ "$OS" != "Darwin" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Currently building App Bundles is only available for macOS. Exiting."
        exit

    fi

    # We have to set this in order to make App Bundle in installtomacos function.
    APPBUNDLE=1

    checkuseropt

    # Set current working directory.
    MACOSPWD="$(pwd)"

    choosebuild

    buildvar

    fetchupdatebuild

    choosebranchcommit

    preparebuild

    setsudo

    settrap

    installtomacos

    # Set name of App Bundle in message.
    APPBUNDLENAME=$(find "$BUILD/build" -name "*.dmg" 2> /dev/null | gawk -F'/' '{print $NF}' | sort | head -n1)

    # Rename App Bundle and move it to working directory.
    if [ -d "$BUILD/build/package" ]; then

        mv -f "$BUILD/build/package/$APPBUNDLENAME" "$MACOSPWD/$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","_"); print}')-$GITVER-$COMREV.dmg"

    else

        mv -f "$BUILD/build/$APPBUNDLENAME" "$MACOSPWD/$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","_"); print}')-$GITVER-$COMREV.dmg"

    fi

    $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "App Bundle for $BUILDNAME is done. Look for \"$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","_"); print}')-$GITVER-$COMREV.dmg\" in \"$MACOSPWD\" path."
}

appimage() {
    clear

    # Blocking access to this option for users that have OS other than Linux since AppImages are Linux exclusive.
    if [ "$OS" != "Linux" ] || [ -z "$(ldd --version 2>&1 | gawk '/Free Software Foundation/ {print}')" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Currently building AppImages is only available for Linux with glibc. Exiting."
        exit

    fi

    # We have to set this in order to make AppImage in Docker/Podman container.
    APPIMAGE=1

    checkuseropt

    # Set current working directory.
    LNXPWD="$(pwd)"

    choosebuild

    buildvar

    fetchupdatebuild

    choosebranchcommit

    preparebuild

    setsudo

    preparecontainer

    containerentry

    sudo_ping

    settrap

    containerrun

    # Export commit revision name before creating AppImage.
    export VERSION="$GITVER-$(git -C "$BUILD" rev-parse --short HEAD)"

    # Build AppImageTool for NixOS
    if [ "$LNXOSNAME" = "NixOS" ]; then

        cat > "$BUILD/appimagetool.nix" << NIX
{ pkgs ? import <nixpkgs> {} }:
pkgs.appimageTools.wrapType2 {
  name = "AppImageTool";
  src = $BUILD/appimagetool;
}
NIX

        nix build --extra-experimental-features 'nix-command flakes' -f "$BUILD/appimagetool.nix"

        # Create AppImage from prepared AppDir.
        cd "$BUILD" || exit
        "$BUILD/result/bin/AppImageTool" -n "$BUILD/build/AppDir" 2> /dev/null

        # Set name of AppImage in message.
        APPIMAGENAME=$(find "$BUILD" -name "*.AppImage" 2> /dev/null | gawk -F'/' '{print $NF}')

    else

        # Create AppImage from prepared AppDir (package file is required to work).
        cd "$BUILD" || exit
        "$BUILD/appimagetool" -n "$BUILD/build/AppDir" 2> /dev/null

        # Set name of AppImage in message.
        APPIMAGENAME=$(find "$BUILD" -name "*.AppImage" 2> /dev/null | gawk -F'/' '{print $NF}')

    fi

    # Move created AppImage to working directory.
    mv -f "$BUILD/$APPIMAGENAME" "$LNXPWD" 2> /dev/null

    $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "AppImage for $BUILDNAME is done. Look for \"$APPIMAGENAME\" in \"$LNXPWD\" path. For NixOS users, please install appimage-run and use command \"appimage-run $APPIMAGENAME\"."
}

buildvar() {
    # Setting variables for build.
    if [ "$BUILD" = "$BUILDPATH/srb2" ]; then

        BUILDNAME="Sonic Robo Blast 2"
        GITDEFVER="master"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/STJr/SRB2.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-android" ]; then

        BUILDNAME="Sonic Robo Blast 2"
        GITDEFVER="android-port"
        GITVER="$GITDEFVER"
        GITURL="https://github.com/SRB2-Mobile/SRB2-Android.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-android-bitten" ]; then

        BUILDNAME="Sonic Robo Blast 2 bitten"
        GITDEFVER="bitten-master"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/bitten2up/SRB2-Android.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ]; then

        BUILDNAME="Sonic Robo Blast 2 Uncapped PLUS"
        GITDEFVER="uncapped-plus"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/X.organic/SRB2-modified.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-netplus" ]; then

        BUILDNAME="Sonic Robo Blast 2 NetPlus"
        GITDEFVER="master"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/JohnFrostFox/netplus.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-rphys" ] || [ "$BUILD" = "$BUILDPATH/srb2-android-rphys" ]; then

        BUILDNAME="Sonic Robo Blast 2 Reveries"

        if [ "$BUILD" = "$BUILDPATH/srb2-android-rphys" ]; then

            GITDEFVER="rphys-android"

        else

            GITDEFVER="reveries"

        fi

        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/pastel/SRB2.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-tsourdt3rd" ]; then

        BUILDNAME="Sonic Robo Blast 2 TSoURDt3rd"
        GITDEFVER="main"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/StarManiaKG/The-Story-of-Uncapped-Revengence-Discord-the-3rd.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-vr" ]; then

        BUILDNAME="Sonic Robo Blast 2 VR"
        GITDEFVER="openvr"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/chreas/srb-2-vr.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        BUILDNAME="Sonic Robo Blast 2 v2.1 Legacy"
        GITDEFVER="master"
        GITVER="$GITDEFVER"
        GITURL="https://github.com/P-AS/srb2-legacy.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        BUILDNAME="Sonic Robo Blast 2 v2.0"
        GITDEFVER="master"
        GITVER="$GITDEFVER"
        GITURL="https://github.com/STJr/SRB2-Public.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        BUILDNAME="Sonic Robo Blast 2 Final Demo"
        GITDEFVER="master"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/SteelT/SRB2-OLD.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

        BUILDNAME="Sonic Robo Blast 2 JTE"
        GITDEFVER="SRB2JTE"
        GITVER="$GITDEFVER"
        GITURL="https://github.com/Bijman/SRB2-Archive.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        BUILDNAME="Sonic Robo Blast 2 Persona"
        GITDEFVER="srb2p_22"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/SinnamonLat/SRB2.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ]; then

        BUILDNAME="Sonic Robo Blast 2 Kart"
        GITDEFVER="master"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/KartKrew/Kart-Public.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ]; then

        BUILDNAME="Sonic Robo Blast 2 Kart Moe Mansion"
        GITDEFVER="moe-mansion"
        GITVER="$GITDEFVER"
        GITURL="https://gitlab.com/himie/kart-public.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-galaxy" ]; then

        BUILDNAME="Sonic Robo Blast 2 Kart Galaxy"
        GITDEFVER="Galaxy-Redux"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/Galactice/Kart-Public.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-hep" ]; then

        BUILDNAME="Sonic Robo Blast 2 Kart HEP"
        GITDEFVER="Glalxy"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/haya_/Kart-Public.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-saturn" ]; then

        BUILDNAME="Sonic Robo Blast 2 Kart Saturn"
        GITDEFVER="Saturn"
        GITVER="$GITDEFVER"
        GITURL="https://github.com/Indev450/SRB2Kart-Saturn.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-neptune" ]; then

        BUILDNAME="Sonic Robo Blast 2 Kart Neptune"
        GITDEFVER="stacking"
        GITVER="$GITDEFVER"
        GITURL="https://github.com/NepDisk/srb2k-neptune.git"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        BUILDNAME="Sonic Robo Blast 2 Kart VR"
        GITDEFVER="openvr"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/chreas/kart-public-vr.git"

    elif [ "$BUILD" = "$BUILDPATH/ring-racers" ]; then

        BUILDNAME="Ring Racers"
        GITDEFVER="master"
        GITVER="$GITDEFVER"
        GITURL="https://git.srb2.org/KartKrew/RingRacers.git"

    elif [ "$BUILD" = "$BUILDPATH/ring-racers-noire" ]; then

        BUILDNAME="Ring Racers Noire"
        GITDEFVER="Noire"
        GITVER="$GITDEFVER"
        GITURL="https://github.com/NepDisk/RingRacers-Noire.git"

    elif [ "$(dirname $BUILD)" = "$BUILDPATH/srb2-custom" ]; then

        BUILDNAME="Sonic Robo Blast 2 Custom $CUSTOMDIR"

    elif [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

        BUILDNAME="wadcli"
        GITDEFVER="main"
        GITVER="$GITDEFVER"
        GITURL="https://github.com/JugadorXEI/wadcli.git"

    elif [ "$BUILD" = "$BUILDPATH/kartmaker" ]; then

        BUILDNAME="kartmaker (SRB2Kart)"
        GITDEFVER="master"
        GITVER="$GITDEFVER"
        GITURL="https://github.com/BombchuLink/kartmaker.git"

    elif [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ]; then

        BUILDNAME="kartmaker (Ring Racers)"
        GITDEFVER="main"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/KartKrew/kartmaker.git"

    elif [ "$BUILD" = "$BUILDPATH/followermaker" ]; then

        BUILDNAME="followermaker (Ring Racers)"
        GITDEFVER="main"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/Superstarxalien/followermaker.git"

    elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

        BUILDNAME="SLADE"
        GITDEFVER="master"
        GITVER="$GITDEFVER"
        GITURL="https://github.com/sirjuddington/SLADE.git"

    elif [ "$BUILD" = "$BUILDPATH/ultimatezonebuilder" ]; then

        BUILDNAME="Ultimate Zone Builder"
        GITDEFVER="master"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/STJr/UltimateZoneBuilder.git"

    elif [ "$BUILD" = "$BUILDPATH/highvoltagering" ]; then

        BUILDNAME="High Voltage Ring"
        GITDEFVER="master"
        GITVER="$GITDEFVER"
        GITURL="https://git.do.srb2.org/KartKrew/high-voltage-ring.git"

    elif [ "$BUILD" = "$BUILDPATH/aseprite" ]; then

        BUILDNAME="Aseprite"
        GITDEFVER="main"
        GITVER="$GITDEFVER"
        GITURL="https://github.com/aseprite/aseprite.git"

    fi
}

choosebranchcommit() {
    GITDEFVER=$($PRINTF "%s\n" "$GITVER" | gawk '{print $NF}')

    if [ -n "$($PRINTF "%s\n" "$ARGS" | gawk 'match($0, / -t -| -t$| --tag -| --tag$/) {print substr($0, RSTART, RLENGTH)}')" ]; then

        GITVER=$(git -C "$BUILD" tag | tail -n1)

    else

        GITVER="$GITDEFVER"

    fi

    # Choose Git branch.
    $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please choose branch by typing number and then pressing enter, or just press enter to continue with default branch, which is \"$GITVER\". To quit, press ctrl+c."
    $PRINTF "$NOTICE%s\n\e[0m" "WARNING: By choosing different branch other than default, compilation or running compiled build may fail."

    if [ -n "$($PRINTF "%s\n" "$ARGS" | gawk 'match($0, / -t -| -t$| --tag -| --tag$/) {print substr($0, RSTART, RLENGTH)}')" ]; then

        array=$(git -C "$BUILD" tag | gawk '!/^ |^'$(git -C "$BUILD" rev-parse --abbrev-ref HEAD)'$/ {gsub("^ |^* ",""); print}' | sort -V)
        arrayname=$($PRINTF "$(git -C "$BUILD" tag | gawk '!/^ |^'$(git -C "$BUILD" rev-parse --abbrev-ref HEAD)'$/ {gsub("^ ","\\e[1;92m* \\e[0m"); print}')\n" | sort -V)

    else

        array=$(git -C "$BUILD" branch -a | gawk -F'/' '!/->/ {print $NF}' | gawk '!/^ |^'$(git -C "$BUILD" rev-parse --abbrev-ref HEAD)'$/ {gsub("^ |^* ",""); print}')
        arrayname=$($PRINTF "$(git -C "$BUILD" branch -a | gawk -F'/' '!/->/ {print $NF}' | gawk '!/^ |^'$(git -C "$BUILD" rev-parse --abbrev-ref HEAD)'$/ {gsub("^ ","\\e[1;92m* \\e[0m"); print}')\n")
        COMMIT=1

    fi

    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            GITVER=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
            if [ -d "$BUILD/.git" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Switching to branch \"$GITVER\"."

                if [ -n "$GITVER" ]; then

                    git -C "$BUILD" checkout -q "$GITVER"

                fi

            fi
            break

        else

            if [ -d "$BUILD/.git" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Switching to branch \"$GITVER\"."

                if [ -n "$GITVER" ]; then

                    git -C "$BUILD" checkout -q "$GITVER"

                fi

            fi
            break

        fi

    done

    if [ "$COMMIT" = "1" ]; then

        # Choose Git commit.
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please choose commit by typing number and then pressing enter, or just press enter to continue with the latest commit, which is $(git -C $BUILD log --format=%h | head -n1). To quit, press ctrl+c."
        $PRINTF "$NOTICE%s\n\e[0m" "WARNING: By choosing different commit other than default, compilation or running compiled build may fail."
        sleep 2
        array="$(git -C "$BUILD" log --format="%h")"
        arrayname="$(GIT_PAGER="" git -C "$BUILD" log --format="%h (%s, %ad)")"
        count="$(echo "$array" | wc -l)"
        n=""
        echo "$arrayname" | gawk '{print NR")", $0}'
        while true; do

            $PRINTF "#? "
            read -r n

            if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

                COMREV=$(echo "$array" | gawk NR=="${n}")
                if [ -d "$BUILD/.git" ]; then

                    $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Switching to commit \"$COMREV\"."

                    if [ -n "$GITVER" ]; then

                        git -C "$BUILD" checkout -q "$COMREV"

                    fi

                fi
                break

            else

                if [ -d "$BUILD/.git" ]; then

                    $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Switching to commit \"$GITVER\"."

                    if [ -n "$GITVER" ]; then

                        git -C "$BUILD" checkout -q "$GITVER"

                    fi

                fi
                break

            fi

        done

    fi
}

choosebuild() {
    clear

    checkuserid

    checkreadonly

    # Choose and download build.
    while

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."
        for loop in "Build SRB2" "Build SRB2 Uncapped Plus" "Build SRB2 NetPlus" "Build SRB2 Reveries (rphys)" "Build SRB2 TSoURDt3rd" "Build SRB2 VR" "Build SRB2 v2.1 Legacy" "Build SRB2 v2.0" "Build SRB2 Final Demo" "Build SRB2 JTE" "Build SRB2 Persona" "Build SRB2 Kart" "Build SRB2 Kart Moe Mansion" "Build SRB2 Kart Galaxy" "Build SRB2 Kart HEP" "Build SRB2 Kart Saturn" "Build SRB2 Kart Neptune" "Build SRB2 Kart VR" "Build Ring Racers" "Build Ring Racers Noire" "Build SRB2 Custom" "Build wadcli" "Build kartmaker (SRB2 Kart)" "Build kartmaker (Ring Racers)" "Build followermaker (Ring Racers)" "Build SLADE" "Build Ultimate Zone Builder" "Build High Voltage Ring" "Build Aseprite with Kart Builder"; do $PRINTF "%s\n" "$((i += 1))) $loop"; done
        $PRINTF "#? "
        read -r choose
    do

        unset i
        case "$choose" in

            "1")

                BUILD="$BUILDPATH/srb2"
                break

                ;;

            "2")

                BUILD="$BUILDPATH/srb2-uncapped-plus"
                break

                ;;

            "3")

                BUILD="$BUILDPATH/srb2-netplus"
                break

                ;;

            "4")

                BUILD="$BUILDPATH/srb2-rphys"
                break

                ;;

            "5")

                BUILD="$BUILDPATH/srb2-tsourdt3rd"
                break

                ;;

            "6")

                BUILD="$BUILDPATH/srb2-vr"
                break

                ;;

            "7")

                BUILD="$BUILDPATH/srb2-2.1-legacy"
                break

                ;;

            "8")

                BUILD="$BUILDPATH/srb2-2.0"
                break

                ;;

            "9")

                BUILD="$BUILDPATH/srb2-final-demo"
                break

                ;;

            "10")

                BUILD="$BUILDPATH/srb2-jte"
                break

                ;;

            "11")

                BUILD="$BUILDPATH/srb2-persona"
                break

                ;;

            "12")

                BUILD="$BUILDPATH/srb2-kart"
                break

                ;;

            "13")

                BUILD="$BUILDPATH/srb2-kart-moe-mansion"
                break

                ;;

            "14")

                BUILD="$BUILDPATH/srb2-kart-galaxy"
                break

                ;;

            "15")

                BUILD="$BUILDPATH/srb2-kart-hep"
                break

                ;;

            "16")

                BUILD="$BUILDPATH/srb2-kart-saturn"
                break

                ;;

            "17")

                BUILD="$BUILDPATH/srb2-kart-neptune"
                break

                ;;

            "18")

                BUILD="$BUILDPATH/srb2-kart-vr"
                break

                ;;

            "19")

                BUILD="$BUILDPATH/ring-racers"
                break

                ;;

            "20")

                BUILD="$BUILDPATH/ring-racers-noire"
                break

                ;;

            "21")

                custombuild
                break

                ;;

            "22")

                BUILD="$BUILDPATH/wadcli"
                break

                ;;

            "23")

                BUILD="$BUILDPATH/kartmaker"
                break

                ;;

            "24")

                BUILD="$BUILDPATH/kartmaker-ring-racers"
                break

                ;;

            "25")

                BUILD="$BUILDPATH/followermaker"
                break

                ;;

            "26")

                BUILD="$BUILDPATH/slade"
                break

                ;;

            "27")

                BUILD="$BUILDPATH/ultimatezonebuilder"
                break

                ;;

            "28")

                BUILD="$BUILDPATH/highvoltagering"
                break

                ;;

            "29")

                BUILD="$BUILDPATH/aseprite"
                break

                ;;

            *)

                $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                exit

                ;;

        esac

    done
}

chooseandroidbuild() {
    clear

    checkuserid

    checkreadonly

    # Choose and download build.
    while

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please choose by typing number and then pressing enter. Press enter or ctrl+c to quit."
        for loop in "Build SRB2" "Build SRB2 bitten" "Build SRB2 Reveries (rphys)" "Build SRB2 Custom"; do $PRINTF "%s\n" "$((i += 1))) $loop"; done
        $PRINTF "#? "
        read -r choose
    do

        unset i
        case "$choose" in

            "1")

                BUILD="$BUILDPATH/srb2-android"
                break

                ;;

            "2")

                BUILD="$BUILDPATH/srb2-android-bitten"
                break

                ;;

            "3")

                BUILD="$BUILDPATH/srb2-android-rphys"
                break

                ;;

            "4")

                custombuild
                break
                ;;

            *)

                $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                exit

                ;;

        esac

    done
}

chooseinstall() {
    clear

    # Install build.
    if [ "$OS" != "Linux" ] && [ "$OS" != "Darwin" ] && [ "$OS" != "Windows" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Currently building and installing is only available for Linux, macOS and Windows. Exiting."
        exit

    fi

    choosebuild

    buildvar

    fetchupdatebuild

    choosebranchcommit

    preparebuild

    setsudo

    settrap

    # Check whether SDKROOT environment variable is set or not.
    if [ "$OS" = "Darwin" ]; then

        if [ -z "$SDKROOT" ]; then

            $PRINTF "$FAILURE%s\n\e[0m" "ERROR: No SDKROOT is set. Add SDKROOT environment variable to macOS SDK full path. Usually macOS .sdk file is located in /Library/Developer/CommandLineTools/SDKs path, if you installed Homebrew. Exiting."
            exit

        fi

        installtomacos

        installtolist

    else

        preparecontainer

        containerentry

        if [ "$OS" = "Linux" ]; then

            sudo_ping

        fi

        containerrun

    fi

    if [ "$OS" = "Windows" ] && ([ -f "$(find "$BUILD/bin" -name "*.exe" 2> /dev/null | head -n1)" ] || [ -f "$(find "$BUILD/build" -mindepth 1 -maxdepth 1 -executable -type f 2> /dev/null | head -n1)" ] || [ -f "$(find "$BUILD" -mindepth 1 -maxdepth 1 -executable -type f 2> /dev/null | head -n1)" ]); then

        installtowindows

        installtolist

    elif [ "$OS" = "Linux" ] && ([ -f "$(find "$BUILD/build/AppDir/usr/bin" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ] || [ -f "$(find $BUILD/build -mindepth 1 -maxdepth 1 -executable -type f 2> /dev/null | head -n1)" ] || [ -f "$(find "$BUILD" -mindepth 1 -maxdepth 1 -executable -type f 2> /dev/null | head -n1)" ]); then

        installtolinux

    fi
}

chooseremoveasset() {
    if [ -z "$(find "$SRB2BLDROOT/assets" -mindepth 1 -maxdepth 1 -type f 2> /dev/null)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find assets."
        exit

    fi

    # Remove asset.
    while true; do

        clear
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please choose asset by typing number and then pressing enter. Press enter or ctrl+c to quit."
        array=$(find "$SRB2BLDROOT/assets" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)
        arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
        count="$($PRINTF "%s\n" "$array" | wc -l)"
        n=""
        $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Are you sure you want to remove this asset? Enter \"yes/Yes\" or \"no/No\" (\"y/Y\" or \"n/N\")."
            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r CONFIRM

            if [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

                SRB2ASSETLNXPATH=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
                SRB2ASSETLNXNAME=$($PRINTF "%s\n" "$arrayname" | gawk NR=="${n}")
                rm -fv "$SRB2ASSETLNXPATH"
                $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "Removing $SRB2ASSETLNXNAME is successful."

            fi

            exec "$0" --removeasset

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

chooseremovebuild() {
    if [ -z "$(find "$SRB2BLDROOT/builds" -mindepth 1 -maxdepth 1 -type d 2> /dev/null)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find builds."
        exit

    fi

    # Remove build.
    while true; do

        clear
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please choose build by typing number and then pressing enter. Press enter or ctrl+c to quit."
        array=$(find "$SRB2BLDROOT/builds" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | sort)
        arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
        count="$($PRINTF "%s\n" "$array" | wc -l)"
        n=""
        $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            if [ "$($PRINTF "%s\n" "$array" | gawk NR=="${n}" | gawk -F'/' '{print $NF}')" = "srb2-custom" ]; then

                while true; do

                    clear
                    $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please choose custom build by typing number and then pressing enter. Press enter or ctrl+c to quit."
                    array=$($PRINTF "$(find "$SRB2BLDROOT/builds/srb2-custom" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | sort)\nBack" | gawk 'NF{print}')
                    arrayname=$($PRINTF "$array" | gawk -F'/' '{print $NF}')
                    count="$($PRINTF "%s\n" "$array" | wc -l)"
                    n=""
                    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
                    $PRINTF "#? "
                    read -r n

                    if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

                        if [ "$($PRINTF "%s\n" "$array" | gawk NR=="${n}" | gawk -F'/' '{print $NF}')" = "Back" ]; then

                            exec "$0" --removebuild

                        fi

                        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Are you sure you want to remove this build's directory? Enter \"yes/Yes\" or \"no/No\" (\"y/Y\" or \"n/N\")."
                        $PRINTF "$PROMPT\n%s\e[0m" "> "
                        read -r CONFIRM

                        if [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

                            BUILDPATH=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
                            BUILDNAME=$($PRINTF "%s\n" "$arrayname" | gawk NR=="${n}")
                            rm -rfv "$BUILDPATH"
                            unset BUILDPATH

                            if [ -z "$(find "$SRB2BLDROOT/builds/srb2-custom" -mindepth 1 -maxdepth 1 -type d 2> /dev/null)" ]; then

                                rm -rfv "$SRB2BLDROOT/builds/srb2-custom"

                            fi

                            $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "Removing $BUILDNAME is successful."

                        fi

                    else

                        $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
                        exit

                    fi

                done

            fi

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Are you sure you want to remove this build's directory? Enter \"yes/Yes\" or \"no/No\" (\"y/Y\" or \"n/N\")."
            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r CONFIRM

            if [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

                BUILDPATH=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
                BUILDNAME=$($PRINTF "%s\n" "$arrayname" | gawk NR=="${n}")
                rm -rfv "$BUILDPATH"
                $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "Removing $BUILDNAME is successful."

            fi

            exec "$0" --removebuild

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

chooseremovedep() {
    setsudo

    if [ -z "$(find "$SRB2BLDROOT/libraries" -mindepth 1 -maxdepth 1 -type d 2> /dev/null)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find dependencies."
        exit

    fi

    # Remove dependencies for build, which were compiled from Docker/Podman container.
    while true; do

        clear
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please choose asset by typing number and then pressing enter. Press enter or ctrl+c to quit."
        array=$(find "$SRB2BLDROOT/libraries" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | gawk -F'/' '{print $NF}' | sort)
        arrayname="$array"
        count="$($PRINTF "%s\n" "$array" | wc -l)"
        n=""
        $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Are you sure you want to remove this asset? Enter \"yes/Yes\" or \"no/No\" (\"y/Y\" or \"n/N\")."
            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r CONFIRM

            if [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

                SRB2DEPLNXNAME=$($PRINTF "%s\n" "$arrayname" | gawk NR=="${n}")

                if [ -d "$SRB2BLDPREFIX/stow/$SRB2DEPLNXNAME" ]; then

                    cd "$SRB2BLDPREFIX/stow" || exit
                    $SUDO stow -Dv "$SRB2DEPLNXNAME"

                fi

                if [ "$OS" = "Windows" ]; then

                    rm -rfv "$SRB2BLDPREFIX/stow/$SRB2DEPLNXNAME" "$SRB2BLDROOT/libraries/$SRB2DEPLNXNAME"

                else

                    $SUDO rm -rfv "$SRB2BLDPREFIX/stow/$SRB2DEPLNXNAME" "$SRB2BLDROOT/libraries/$SRB2DEPLNXNAME"

                fi

                $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "Removing $SRB2DEPLNXNAME is successful."

            fi

            exec "$0" --removedep

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

chooseuninstall() {
    if [ -z "$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find installed builds."
        exit

    fi

    # Uninstall build from the system.
    while true; do

        clear
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please choose installed package by typing number and then pressing enter. Press enter or ctrl+c to quit."
        array=$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)
        arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
        count="$($PRINTF "%s\n" "$array" | wc -l)"
        n=""
        $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            BUILDINSTALLED=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
            INSTALLEDFILES=$(gawk '/\/nix\/store|\/usr\/local|\/home\/'$USER'\/.local|\/home\/'$USER'\/Local|\/home\/'$USER'\/SRB2 Games|\/home\/'$USER'\/SRB2 Software|\/Start Menu\/Programs/ {print}' "$BUILDINSTALLED")
            $PRINTF "$PROMPT\n%s\n\e[0m" "$INSTALLEDFILES"
            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Above files will be uninstalled. Are you sure you want to that? Enter \"yes/Yes\" or \"no/No\" (\"y/Y\" or \"n/N\")."
            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r CONFIRM

            if [ "$OS" = "Windows" ] && ([ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]); then

                gawk -i inplace -v RS= '{gsub("---------------\n[A-Z]*=1|---------------",""); print}' "$BUILDINSTALLED"

                while read -r FILE; do
                    rm -rfv "$FILE"
                done < "$BUILDINSTALLED"

                rm -f "$BUILDINSTALLED"

                if [ -z "$(find "$HOME/SRB2 Games" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

                    rm -rfv "$HOME/SRB2 Games"

                elif [ -z "$(find "$HOME/SRB2 Software" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

                    rm -rfv "$HOME/SRB2 Software"

                fi

                $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "Uninstallation of $($PRINTF "%s\n" "$BUILDINSTALLED" | gawk -F'/' '{print $NF}') is successful."

            elif [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

                SRB2BLDPREFIX="$(gawk 'match($0, /\/usr\/local|\/home\/'$USER'\/.local|\/home\/'$USER'\/Local|\/home\/'$USER'\/SRB2 Games|\/home\/'$USER'\/SRB2 Software/) {print substr($0, RSTART, RLENGTH)}' "$BUILDINSTALLED" | head -n1)"

                gawk -i inplace -v RS= '{gsub("---------------\n[A-Z]*=1|---------------",""); print}' "$BUILDINSTALLED"

                setsudo

                if [ "$LNXOSNAME" = "NixOS" ]; then

                    $SUDO nix profile remove $(head -n1 "$BUILDINSTALLED")

                else

                    while read -r FILE; do
                        $SUDO rm -rfv "$FILE"
                    done < "$BUILDINSTALLED"

                fi

                rm -f "$BUILDINSTALLED"

                if [ -z "$(find $SRB2BLDPREFIX -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

                    $SUDO rm -rfv "$SRB2BLDPREFIX"

                fi

                # Refreshing menu icons.
                if [ -x "$(command -v gtk-update-icon-cache 2> /dev/null)" ]; then

                    $SUDO gtk-update-icon-cache -qft "$SRB2BLDPREFIX/share/icons/hicolor"

                elif [ -x "$(find /usr/bin -name "kbuildsycoca*" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

                    $SUDO "$(find /usr/bin -name "kbuildsycoca*" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" --noincremental

                fi

                $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "Uninstallation of $($PRINTF "%s\n" "$BUILDINSTALLED" | gawk -F'/' '{print $NF}') is successful."

            fi

            exec "$0" --uninstall

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

cleansource() {
    # Clean build's directory after compiling.
    git -C "$BUILD" clean -qdffx -e .comrev
    git -C "$BUILD" reset -q --hard

    if [ "$LNXOSNAME" = "NixOS" ]; then

        rm -rf "/tmp/flake-build"

    fi
}

compatibility() {
    clear

    # Show compatibility table for compiling SRB2 builds for each OS.
    curl -sL "$COMPTABLEURL"
    $PRINTF "%s\n"
}

containerentry() {
    # Prepare containers path.
    if [ ! -d "$SRB2BLDROOT/containers/srb2-games-linux-glibc-container)" ]; then

        mkdir -p "$SRB2BLDROOT/containers/srb2-games-linux-glibc-container"

    fi

    # Create entrypoint shell script for Docker/Podman container.
    cat > "$SRB2BLDROOT/containers/srb2-games-linux-glibc-container/Entrypoint" << ENTRYPOINT
#!/bin/sh

    if [ "$SRB2BLDDEBUG" = "1" ]; then

        set -e -x

    else

        set -e

    fi

    # Added environment variables for Docker/Podman container.
    export HOSTUSER="$USER"
    export ARGS="$ARGS"
    export PRINTF=\$(which -a printf 2> /dev/null | gawk '/bin/ {print}' | head -n1)
    export ARCH="$ARCH"
    export OS="$OS"
    export NCPU="$NCPU"
    export LNXOSNAME="$LNXOSNAME"
    export IS64="$IS64"
    export ISREADONLY="$ISREADONLY"
    export ISNET="$ISNET"
    export LIBC="$LIBC"
    export OSVIRT=\$(\$PRINTF "%s\n" "$OSVIRT" | gawk 'match(\$0, /podman/) {print substr(\$0, RSTART, RLENGTH)}')
    export SRB2BLDROOT="$SRB2BLDROOT"
    export BUILDPATH="$BUILDPATH"
    export BUILD="$BUILD"
    export BUILDMAIN="$BUILD"
    export CUSTOMDIR="$CUSTOMDIR"
    export GITOPTS="$GITOPTS"
    export GITVERCONF="$GITVERCONF"
    export GITVER="$GITVER"
    export GITDEFVER="$GITDEFVER"
    export FILETYPE="$FILETYPE"
    export SRB2RPHYSASSETURL="$SRB2RPHYSASSETURL"
    export SRB2TSOURDT3RDASSETURL="$SRB2TSOURDT3RDASSETURL"
    export SRB2VRASSETURL="$SRB2VRASSETURL"
    export SRB2LEGACYASSETURL="$SRB2LEGACYASSETURL"
    export SRB220ASSETURL="$SRB220ASSETURL"
    export SRB2FINALDEMOASSETURL="$SRB2FINALDEMOASSETURL"
    export SRB2JTEASSETURL="$SRB2JTEASSETURL"
    export SRB2PERSONAASSETURL="$SRB2PERSONAASSETURL"
    export SRB2KARTHEPASSETURL="$SRB2KARTHEPASSETURL"
    export SRB2KARTNEPTUNEASSETURL="$SRB2KARTNEPTUNEASSETURL"
    export SRB2BLDDEVMODE="$SRB2BLDDEVMODE"
    export SRB2BLDGITVER="$SRB2BLDGITVER"
    export SRB2BLDASSETPATH="$SRB2BLDASSETPATH"
    export SRB2BLDEXTRAASSETPATH="$SRB2BLDEXTRAASSETPATH"
    export ASSETAPPDIR="$ASSETAPPDIR"
    export ANDROID="$ANDROID"
    export APPIMAGE="$APPIMAGE"
    export FLATPAK="$FLATPAK"
    export COMMIT="$COMMIT"
    export UPGRADEBUILD="$UPGRADEBUILD"
    export GCCVER="$GCCVER"
    export GXXVER="$GXXVER"
    export GCCOLDVER="$GCCOLDVER"
    export GXXOLDVER="$GXXOLDVER"
    export RINGRACERSGCCVER="$RINGRACERSGCCVER"
    export RINGRACERSGXXVER="$RINGRACERSGXXVER"
    export SLADEGCCOLDVER="$SLADEGCCOLDVER"
    export SLADEGXXOLDVER="$SLADEGXXOLDVER"
    export MINGWCCVER="$MINGWCCVER"
    export MINGWCXXVER="$MINGWCXXVER"
    export MINGWOLDCCVER="$MINGWOLDCCVER"
    export MINGWOLDCXXVER="$MINGWOLDCXXVER"
    export STOW_DIR="$SRB2BLDPREFIX/stow"
    export CCACHE_DIR="$CCACHE_DIR"
    export GRADLE_USER_HOME="$GRADLE_USER_HOME"
    export VCPKG_ROOT="$VCPKG_ROOT"

    # Set prefix path to /usr to make sure files within AppImage can be found.
    if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" = "NixOS" ]; then

        export SRB2BLDPREFIX="/usr"

    else

        export SRB2BLDPREFIX="$SRB2BLDPREFIX"

    fi

    export LIBRARY_PATH="\$SRB2BLDPREFIX/lib"
    export PKG_CONFIG_PATH="\$SRB2BLDPREFIX/lib/pkgconfig"
    export PATH="\$SRB2BLDROOT/libraries/depot_tools:\$SRB2BLDPREFIX/bin:\$PATH"
    export DEBIAN_FRONTEND="noninteractive"
    export SRB2BLDNOCCACHE="$SRB2BLDNOCCACHE"

    # Remove musl variable for Ultimate Zone Builder and High Voltage Ring to compile in glibc environment.
    if [ "\$LIBC" = "musl" ] && ([ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ] || [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]); then

       unset LIBC

    fi

    # Add -lexecinfo to LDFLAGS for musl based Linux OS to make building successful.
    if [ "\$LIBC" = "musl" ]; then

        export LDFLAGS="\$LDFLAGS -lexecinfo"

    fi

    # Some old Docker/Podman images don't have up-to-date SSL certifications, so this is workaround.
    # export GIT_SSL_NO_VERIFY=1

    # Fixes issue "method https has died unexpectedly", when installing package from https repository.
    export GNUTLS_CPUID_OVERRIDE="0x1"

    if [ "\$SRB2BLDNOCCACHE" != "1" ]; then

        # Setting paths to ccache compilers, in order to speed up compiling.
        if [ "\$LIBC" = "musl" ]; then

            export CCACHE_BIN_PATH="/usr/lib/ccache/bin/"

        else

            export CCACHE_BIN_PATH="/usr/lib/ccache/"

        fi

    fi

    # Alias for curl with set GITHUB_TOKEN, if you encounter rate limiting after some amount using GitHub's API requests.
    if [ -n "$GITHUB_TOKEN" ]; then

        alias curl="curl -u :$GITHUB_TOKEN"

    else

        alias curl="curl"

    fi

    # Correcting compiled library permissions when running -u/--user or having read-only filesystem.
    if [ "\$OS" = "Linux" ] && [ "\$OSVIRT" = "podman" ] && ([ -n "\$(\$PRINTF "%s\n" "\$ARGS" | gawk 'match(\$0, / -u -| -u\$| --user -| --user\$/) {print substr(\$0, RSTART, RLENGTH)}')" ] || [ -n "\$(\$PRINTF "%s\n" "\$SRB2BLDPREFIX" | gawk 'match(\$0, /\/home\/'\$HOSTUSER'\/.local|\/home\/'\$HOSTUSER'\/SRB2 Games|\/home\/'\$HOSTUSER'\/SRB2 Software/) {print substr(\$0, RSTART, RLENGTH)}')" ]) && ([ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$ANDROID" != "1" ]) || [ -n "\$ISREADONLY" ]; then

        sudo find -L "\$SRB2BLDPREFIX/bin" "\$SRB2BLDPREFIX/include" "\$SRB2BLDPREFIX/lib" "\$SRB2BLDROOT/libraries" "$HOME/.cache/ccache" ! -group root -exec chown -R root:root {} \; 2> /dev/null || true

    fi

    # Setting trap signal for correcting compiled build's source code, libraries etc. permissions when running -u/--user or having read-only filesystem.
    if [ "\$OSVIRT" = "podman" ] && ([ -n "\$(\$PRINTF "%s\n" "\$ARGS" | gawk 'match(\$0, / -u -| -u\$| --user -| --user\$/) {print substr(\$0, RSTART, RLENGTH)}')" ] || [ -n "\$(\$PRINTF "%s\n" "\$SRB2BLDPREFIX" | gawk 'match(\$0, /\/home\/'\$HOSTUSER'\/.local|\/home\/'\$HOSTUSER'\/SRB2 Games|\/home\/'\$HOSTUSER'\/SRB2 Software/) {print substr(\$0, RSTART, RLENGTH)}')" ]) && ([ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$ANDROID" != "1" ]) || [ -n "\$ISREADONLY" ]; then

        trap '[ $? = 0 ] && \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Correcting permissions to $BUILDNAME'\''s source code. Please wait..." && [ "\$(basename \$BUILD)" = "ring-racers" ] && export BUILD="\$BUILDMAIN" ; sudo find -L "\$BUILD" ! -group root -exec sudo chown -R root:root {} \; ; [ -d "\$SRB2BLDPREFIX/lib" ] && sudo find -L "\$SRB2BLDPREFIX/bin" "\$SRB2BLDPREFIX/include" "\$SRB2BLDPREFIX/lib" "\$SRB2BLDROOT/libraries" "$HOME/.cache/ccache" ! -group root -exec chown -R root:root {} \; 2> /dev/null || true && \$PRINTF "\n$PROMPT==> $FAILURE%s\n\e[0m" "ERROR: Build didn'\''t finish due to error or cancelling process." ; exit 1' 0 1 2 3 6 15

    else

        trap '[ $? = 0 ] && \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Correcting permissions to $BUILDNAME'\''s source code. Please wait..." && [ "\$(basename \$BUILD)" = "ring-racers" ] && export BUILD="\$BUILDMAIN" ; sudo find -L "\$BUILD" -group root -exec chown -R srb2bld:srb2bld {} \; && \$PRINTF "\n$PROMPT==> $FAILURE%s\n\e[0m" "ERROR: Build didn'\''t finish due to error or cancelling process." ; exit 1' 0 1 2 3 6 15

    fi

    # Added repository to safe directories since Git v2.35.
    git config --global --add safe.directory "\$BUILD"

    # Added this git config to avoid errors "Filename too long", while cleaning up source code.
    git -C "\$BUILD" config core.longpaths true
    git -C "\$BUILD" config advice.nameTooLong false

    extractassets() {
        if [ "\$BUILD" = "\$BUILDPATH/srb2" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-rphys" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-tsourdt3rd" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$ANDROID" = "1" ]; then

            if [ "\$BUILD" = "\$BUILDPATH/srb2-rphys" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-android-rphys" ]; then

                SRB2RPHYSASSETURL=\$(curl -s "\$SRB2RPHYSASSETURL" | gawk -F'"' '/browser_download_url.*-windows.zip/ {print \$4}' | head -n1)
                if [ -n "\$ISNET" ] && [ "\$(curl -X GET -sLI "\$SRB2RPHYSASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2rphys.zip" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2rphys.zip"
                    curl -RL "\$SRB2RPHYSASSETURL" -o "\$SRB2BLDROOT/assets/SRB2rphys.zip"

                fi

                if [ "\$ANDROID" = "1" ]; then

                    7z x -y "\$SRB2BLDROOT/assets/SRB2rphys.zip" "*.pk3" "*.wad" -o"\$BUILD/android/app/src/main/assets"

                else

                    7z x -y "\$SRB2BLDROOT/assets/SRB2rphys.zip" "*.pk3" "*.wad" -o"\$BUILD/build/AppDir/usr/games/SRB2"

                fi

            elif [ "\$BUILD" = "\$BUILDPATH/srb2-tsourdt3rd" ]; then

                SRB2TSOURDT3RDASSETURL=\$(curl -s "\$SRB2TSOURDT3RDASSETURL" | gawk -F'"' '/browser_download_url.*TSoURDt3rd.zip/ {print \$4}')
                if [ -n "\$ISNET" ] && [ "\$(curl -X GET -sLI "\$SRB2TSOURDT3RDASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2TSoURDt3rd.zip" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2TSoURDt3rd.zip"
                    curl -RL "\$SRB2TSOURDT3RDASSETURL" -o "\$SRB2BLDROOT/assets/SRB2TSoURDt3rd.zip"

                fi

                if [ "\$ANDROID" = "1" ]; then

                    7z e -y -r "\$SRB2BLDROOT/assets/SRB2TSoURDt3rd.zip" "*.pk3" -o"\$BUILD/android/app/src/main/assets"

                else

                    7z e -y -r "\$SRB2BLDROOT/assets/SRB2TSoURDt3rd.zip" "*.pk3" -o"\$BUILD/build/AppDir/usr/games/SRB2"

                fi

            fi

            extractsrb2assets

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

            SRB2ASSETETAG=\$(curl -X GET -sLI "\$SRB2PERSONAASSETURL" | gawk -F'etag: ' '{IGNORECASE=1} /etag/ {gsub("\r|\\"",""); print \$NF}' 2> /dev/null | tail -n1)
            if [ -n "\$ISNET" ] && [ "\$SRB2ASSETETAG" != "\$(7z l "\$SRB2BLDROOT/assets/SRB2P_MP.zip" 2> /dev/null | gawk '/Comment/ {print \$NF}')" ]; then

                rm -f "\$SRB2BLDROOT/assets/SRB2P_MP.zip"
                curl -RL "\$SRB2PERSONAASSETURL" -o "\$SRB2BLDROOT/assets/SRB2P_MP.zip"
                zip -z "\$SRB2BLDROOT/assets/SRB2P_MP.zip" << EOF
\$SRB2ASSETETAG
EOF

            fi

            7z x -y "\$SRB2BLDROOT/assets/SRB2P_MP.zip" "*.pk3" "*.wad" -o"\$BUILD/build/AppDir/usr/games/SRB2"
            extractsrb2assets

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

            if [ -n "\$ISNET" ]; then

                curl -RLC - "\$SRB2LEGACYASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-2.1.exe"

            fi

            7z x -y "\$SRB2BLDROOT/assets/SRB2-2.1.exe" "*.srb" "*.dta" "*.dat" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            # Copying libraries for Windows version of SRB2 builds.
            if [ "\$OS" = "Windows" ]; then

                if [ "\$IS64" = "64" ]; then

                    cp -f "\$BUILD/libs/dll-binaries/x86_64/"*.dll "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/libopenmpt/bin/x86_64/mingw"
                    cp -f "\$BUILD/libs/libopenmpt/bin/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/x86_64-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2_mixer/x86_64-w64-mingw32/bin/"*.dll "\$BUILD/build/AppDir/usr/lib"

                else

                    cp -f "\$BUILD/libs/dll-binaries/i686/"*.dll "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/libopenmpt/bin/x86/mingw"
                    cp -f "\$BUILD/libs/libopenmpt/bin/x86/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2_mixer/i686-w64-mingw32/bin/"*.dll "\$BUILD/build/AppDir/usr/lib"

                fi

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ -n "\$ISNET" ]; then

                curl -RLC - "\$SRB220ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-2.0.exe"

            fi

            7z x -y "\$SRB2BLDROOT/assets/SRB2-2.0.exe" "*.plr" "*.dta" "*.wpn" "*.srb" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            if [ "\$OS" = "Windows" ]; then

                7z x -y "\$SRB2BLDROOT/assets/SRB2-2.0.exe" "*.dll" -o"\$BUILD/build/AppDir/usr/lib"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]; then

            if [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]; then

                if [ -n "\$ISNET" ]; then

                    curl -RLC - "\$SRB2JTEASSETURL" -o "\$SRB2BLDROOT/assets/SRB2JTE.zip"

                fi

                7z x -y "\$SRB2BLDROOT/assets/SRB2JTE.zip" "*.wad" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            fi

            if [ -n "\$ISNET" ]; then

                curl -RLC - "\$SRB2FINALDEMOASSETURL" -o "\$SRB2BLDROOT/assets/SRB2FinalDemo.exe"

            fi

            7z x -y "\$SRB2BLDROOT/assets/SRB2FinalDemo.exe" "*.plr" "*.dta" "*.wpn" "*.srb" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            if [ "\$OS" = "Windows" ]; then

                if [ -n "\$ISNET" ]; then

                    SRB2ASSETURL=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print \$4}')
                    if [ "\$(curl -X GET -sLI "\$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2-Latest.zip" 2> /dev/null)" ]; then

                        rm -f "\$SRB2BLDROOT/assets/SRB2-Latest.zip"
                        curl -RL "\$SRB2ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-Latest.zip"

                    fi

                fi

                7z x -y "\$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.dll" -o"\$BUILD/build/AppDir/usr/lib"
                mv -f "\$BUILD/build/AppDir/usr/lib/SDL2_mixer_ext.dll" "\$BUILD/build/AppDir/usr/lib/SDL2_mixer.dll"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/ring-racers" ] || [ "\$BUILD" = "\$BUILDPATH/ring-racers-noire" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-galaxy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-hep" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-saturn" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-neptune" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

            if [ "\$BUILD" = "\$BUILDPATH/srb2-kart-hep" ]; then

                SRB2ASSETETAG=\$(curl -X GET -sLI "\$SRB2KARTHEPASSETURL" | gawk -F'etag: ' '{IGNORECASE=1} /etag/ {gsub("\r|\\"",""); print \$NF}' 2> /dev/null | tail -n1)
                if [ -n "\$ISNET" ] && [ "\$SRB2ASSETETAG" != "\$(7z l "\$SRB2BLDROOT/assets/SRB2KartHEP.zip" 2> /dev/null | gawk '/Comment/ {print \$NF}')" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2KartHEP.zip"
                    curl -RL "\$SRB2KARTHEPASSETURL" -o "\$SRB2BLDROOT/assets/SRB2KartHEP.zip"
                    zip -z "\$SRB2BLDROOT/assets/SRB2KartHEP.zip" << EOF
\$SRB2ASSETETAG
EOF

                fi

                7z e -y "\$SRB2BLDROOT/assets/SRB2KartHEP.zip" "*/*.kart" -o"\$BUILD/build/AppDir/usr/games/SRB2Kart"

            elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-neptune" ]; then

                SRB2KARTNEPTUNEASSETURL=\$(curl -s "\$SRB2KARTNEPTUNEASSETURL" | gawk -F'"' '/browser_download_url.*64Bit.zip/ {print \$4}')
                if [ "\$(curl -X GET -sLI "\$SRB2KARTNEPTUNEASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2KartNeptune.zip" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2KartNeptune.zip"
                    curl -RL "\$SRB2KARTNEPTUNEASSETURL" -o "\$SRB2BLDROOT/assets/SRB2KartNeptune.zip"

                fi

                7z e -y "\$SRB2BLDROOT/assets/SRB2KartNeptune.zip" "*/*.kart" -o"\$BUILD/build/AppDir/usr/games/SRB2Kart"

            fi

            extractsrb2kartassets

        elif [ "\$(dirname \$BUILD)" = "\$BUILDPATH/srb2-custom" ]; then

            if [ "\$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print \$2}' "\$BUILD/src/doomdef.h" 2> /dev/null)" = "SRB2" ]; then

                extractsrb2assets

            else

                extractsrb2kartassets

            fi

        fi
    }

    extractcustomassets() {
        BUILDPREFIX=\$(\$PRINTF "%s\n" "\$BUILD" | gawk -F'/' '{print \$NF}')

        # Download and extract assets for custom build.
        if [ -z "\$ISNET" ] && [ -n "\$SRB2BLDASSETPATH" ]; then

            FILETYPE=\$(find "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER."* 2> /dev/null | gawk -F'.' '{print \$NF}' | head -n1)
            SRB2BLDASSETPATH="\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE"

        elif [ -n "\$ISNET" ] && [ -n "\$SRB2BLDASSETPATH" ]; then

            if [ -n "\$(find "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER."* 2> /dev/null | head -n1)" ] && [ "\$(curl -X GET -sLI "\$SRB2BLDASSETPATH" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" = "\$(stat -c %s "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER."* 2> /dev/null)" ]; then

                FILETYPE=\$(find "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER."* 2> /dev/null | gawk -F'.' '{print \$NF}' | head -n1)
                SRB2BLDASSETPATH="\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE"

            elif [ -n "\$(\$PRINTF "%s\n" "\$SRB2BLDASSETPATH" | gawk '/drive.google.com/ {print}')" ]; then

                SRB2ASSETID=\$(\$PRINTF "%s\n" "\$SRB2BLDASSETPATH" | gawk '{gsub("https://drive.google.com/file/d/|/view|?usp=sharing",""); print}')
                SRB2BLDASSETPATH="https://drive.google.com/uc?export=download&confirm=t&id=\$SRB2ASSETID"
                FILETYPE=\$(curl -X GET -sLI "https://drive.google.com/uc?export=download&confirm=t&id=\$SRB2ASSETID" | gawk -F'.' '/content-disposition:/ {gsub("\r|\"",""); print \$NF}')

            elif [ -n "\$(\$PRINTF "%s\n" "\$SRB2BLDASSETPATH" | gawk '/mega.nz/ {print}')" ]; then

                # Using megafetch script to obtain data to decrypt asset pack from mega.nz.
                curl -sL https://gist.githubusercontent.com/Bijman/b791993783e2fb80d3e98a3a19b6e6e8/raw/4fb91369313eaa8d67fe911fdcc08797ca432517/megafetch.sh -o "\$BUILD/megafetch"
                chmod 755 "\$BUILD/megafetch"
                MEGANZURL=\$("\$BUILD/megafetch" "\$SRB2BLDASSETPATH" | gawk '/userstorage.mega.co.nz/ {print}')
                MEGANZFILENAME=\$("\$BUILD/megafetch" "\$SRB2BLDASSETPATH" | gawk 'NR==2')
                MEGANZHEX=\$("\$BUILD/megafetch" "\$SRB2BLDASSETPATH" | gawk 'NR==3')
                MEGANZHEXRAW=\$("\$BUILD/megafetch" "\$SRB2BLDASSETPATH" | gawk 'NR==4')
                SRB2BLDASSETPATH="\$MEGANZURL"
                FILETYPE=\$(\$PRINTF "%s\n" "\$MEGANZFILENAME" | gawk -F'.' '{print \$NF}')

            else

                SRB2BLDASSETPATH="\$SRB2BLDASSETPATH"

                if [ -n "\$(curl -X GET -sLI "\$SRB2BLDASSETPATH" | gawk -F'.' '/content-disposition:/ {gsub("\r",""); print \$NF}' | head -n1)" ]; then

                    FILETYPE=\$(curl -X GET -sLI "\$SRB2BLDASSETPATH" | gawk -F'.' '/content-disposition:/ {gsub("\r",""); print \$NF}')

                else

                    FILETYPE=\$(find "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER."* 2> /dev/null | gawk -F'.' '{print \$NF}' | head -n1)

                fi

            fi

        elif [ -z "\$SRB2BLDASSETPATH" ]; then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Assuming the latest SRB2/SRB2Kart release assets for $BUILDNAME."
            extractassets

        fi

        if [ -n "\$ISNET" ] && [ -n "\$(curl -vI "\$SRB2BLDASSETPATH" 2>&1 | gawk '/> Host:/ {gsub("\r",""); print \$NF}')" ] && [ "\$(curl -X GET -sLI "\$SRB2BLDASSETPATH" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE" 2> /dev/null)" ]; then

            rm -f "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE"

            if [ -n "\$(\$PRINTF "%s\n" "\$SRB2BLDASSETPATH" | gawk '/drive.google.com/ {print}')" ]; then

                curl -RL "https://drive.google.com/uc?export=download&confirm=t&id=\$SRB2ASSETID" -o"\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE"

            elif [ -n "\$(\$PRINTF "%s\n" "\$SRB2BLDASSETPATH" | gawk '/mega.co.nz/ {print}')" ]; then

                curl -RL "\$MEGANZURL" -o "\$BUILD/\$MEGANZFILENAME"
                cat "\$BUILD/\$MEGANZFILENAME" | openssl enc -d -aes-128-ctr -K "\$MEGANZHEX" -iv "\$MEGANZHEXRAW" > "\$BUILD/\$MEGANZFILENAME.new"
                mv -f "\$BUILD/\$MEGANZFILENAME.new" "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE"

            else

                curl -RL "\$SRB2BLDASSETPATH" -o "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE"

            fi

        fi

        if [ -n "\$(find "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE" 2> /dev/null | head -n1)" ]; then

            if [ "\$ANDROID" = "1" ]; then

                7z x -y "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE" -x!"*.exe" -x!"*.txt" -x!"*.md" -x!"*.dll" -o"\$BUILD/android/app/src/main/assets"

            elif [ "\$OS" = "Windows" ] && [ -d "\$BUILD/libs" ] && [ "\$ANDROID" != "1" ]; then

                if [ "\$IS64" = "64" ]; then

                    cp -f "\$BUILD/libs/curl/lib64/libcurl-x64.dll" "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/libopenmpt/bin/x86_64/mingw"
                    cp -f "\$BUILD/libs/libopenmpt/bin/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/x86_64-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDLMixerX/x86_64-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/dll-binaries/x86_64/Old"
                    cp -f "\$BUILD/libs/dll-binaries/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "/usr/lib/gcc/x86_64-w64-mingw32/"*-win32"/libgcc_s_seh"*.dll "\$BUILD/build/AppDir/usr/lib"

                else

                    cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/libopenmpt/bin/x86/mingw"
                    cp -f "\$BUILD/libs/libopenmpt/bin/x86/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDLMixerX/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                    cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"

                fi

                7z x -y "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE" -x!"*.exe" -x!"*.txt" -x!"*.md" -o"\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR"

            else

                7z x -y "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER.\$FILETYPE" -x!"*.exe" -x!"*.txt" -x!"*.md" -x!"*.dll" -o"\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR"

            fi

            if [ "\$(find "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR" -mindepth 1 -maxdepth 1 2> /dev/null | wc -l)" -eq "1" ]; then

                mv -f "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR/"*/* "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR"

            fi

        fi

        extractextracustomassets

        # Correcting permissions for model directories.
        if [ "\$ANDROID" = "1" ]; then

            find "\$BUILD/android/app/src/main/assets" -type d -exec chmod 755 {} \;

        elif [ -n "\$(find "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | head -n1)" ]; then

            find "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR" -type d -exec chmod 755 {} \;

        fi

    }

    extractextracustomassets() {
        # Download and extract extra assets for custom build.
        if [ -z "\$ISNET" ] && [ -n "\$SRB2BLDEXTRAASSETPATH" ]; then

            FILETYPE=\$(find "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras."* 2> /dev/null | gawk -F'.' '{print \$NF}' | head -n1)
            SRB2BLDEXTRAASSETPATH="\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras.\$FILETYPE"

        elif [ -n "\$ISNET" ] && [ -n "\$SRB2BLDEXTRAASSETPATH" ]; then

            if [ -n "\$(find "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras."* 2> /dev/null | head -n1)" ] && [ "\$(curl -X GET -sLI "\$SRB2BLDEXTRAASSETPATH" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" = "\$(stat -c %s "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras."* 2> /dev/null)" ]; then

                FILETYPE=\$(find "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras."* 2> /dev/null | gawk -F'.' '{print \$NF}' | head -n1)
                SRB2BLDEXTRAASSETPATH="\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras.\$FILETYPE"

            elif [ -n "\$(\$PRINTF "%s\n" "\$SRB2BLDEXTRAASSETPATH" | gawk '/drive.google.com/ {print}')" ]; then

                SRB2ASSETID=\$(\$PRINTF "%s\n" "\$SRB2BLDEXTRAASSETPATH" | gawk '{gsub("https://drive.google.com/file/d/|/view|?usp=sharing",""); print}')
                SRB2BLDEXTRAASSETPATH="https://drive.google.com/uc?export=download&confirm=t&id=\$SRB2ASSETID"
                FILETYPE=\$(curl -X GET -sLI "https://drive.google.com/uc?export=download&confirm=t&id=\$SRB2ASSETID" | gawk -F'.' '/content-disposition:/ {gsub("\r|\"",""); print \$NF}')

            elif [ -n "\$(\$PRINTF "%s\n" "\$SRB2BLDEXTRAASSETPATH" | gawk '/mega.nz/ {print}')" ]; then

                # Using megafetch script to obtain data to decrypt asset pack from mega.nz.
                curl -sL https://gist.githubusercontent.com/Bijman/b791993783e2fb80d3e98a3a19b6e6e8/raw/4fb91369313eaa8d67fe911fdcc08797ca432517/megafetch.sh -o "\$BUILD/megafetch"
                chmod 755 "\$BUILD/megafetch"
                MEGANZURL=\$("\$BUILD/megafetch" "\$SRB2BLDEXTRAASSETPATH" | gawk '/userstorage.mega.co.nz/ {print}')
                MEGANZFILENAME=\$("\$BUILD/megafetch" "\$SRB2BLDEXTRAASSETPATH" | gawk 'NR==2')
                MEGANZHEX=\$("\$BUILD/megafetch" "\$SRB2BLDEXTRAASSETPATH" | gawk 'NR==3')
                MEGANZHEXRAW=\$("\$BUILD/megafetch" "\$SRB2BLDEXTRAASSETPATH" | gawk 'NR==4')
                SRB2BLDEXTRAASSETPATH="\$MEGANZURL"
                FILETYPE=\$(\$PRINTF "%s\n" "\$MEGANZFILENAME" | gawk -F'.' '{print \$NF}')

            else

                SRB2BLDEXTRAASSETPATH="\$SRB2BLDEXTRAASSETPATH"

                if [ -n "\$(curl -X GET -sLI "\$SRB2BLDEXTRAASSETPATH" | gawk -F'.' '/content-disposition:/ {gsub("\r",""); print \$NF}' | head -n1)" ]; then

                    FILETYPE=\$(curl -X GET -sLI "\$SRB2BLDEXTRAASSETPATH" | gawk -F'.' '/content-disposition:/ {gsub("\r",""); print \$NF}')

                else

                    FILETYPE=\$(find "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras."* 2> /dev/null | gawk -F'.' '{print \$NF}' | head -n1)

                fi

            fi

        fi

        if [ -n "\$ISNET" ] && [ -n "\$(curl -vI "\$SRB2BLDEXTRAASSETPATH" 2>&1 | gawk '/> Host:/ {gsub("\r",""); print \$NF}')" ] && [ "\$(curl -X GET -sLI "\$SRB2BLDEXTRAASSETPATH" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras.\$FILETYPE" 2> /dev/null)" ]; then

            rm -f "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras.\$FILETYPE"

            if [ -n "\$(\$PRINTF "%s\n" "\$SRB2BLDEXTRAASSETPATH" | gawk '/drive.google.com/ {print}')" ]; then

                curl -RL "https://drive.google.com/uc?export=download&confirm=t&id=\$SRB2ASSETID" -o"\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras.\$FILETYPE"

            elif [ -n "\$(\$PRINTF "%s\n" "\$SRB2BLDEXTRAASSETPATH" | gawk '/mega.co.nz/ {print}')" ]; then

                curl -RL "\$MEGANZURL" -o "\$BUILD/\$MEGANZFILENAME"
                cat "\$BUILD/\$MEGANZFILENAME" | openssl enc -d -aes-128-ctr -K "\$MEGANZHEX" -iv "\$MEGANZHEXRAW" > "\$BUILD/\$MEGANZFILENAME.new"
                mv -f "\$BUILD/\$MEGANZFILENAME.new" "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras.\$FILETYPE"

            else

                curl -RL "\$SRB2BLDEXTRAASSETPATH" -o "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras.\$FILETYPE"

            fi

        fi

        if [ -n "\$(find "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras.\$FILETYPE" 2> /dev/null | head -n1)" ]; then

            if [ "\$ANDROID" = "1" ]; then

                7z e -y -r "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras.\$FILETYPE" -x!"*.exe" -x!"*.txt" -x!"*.md" -x!"*.dll" -o"\$BUILD/android/app/src/main/assets"

            elif [ "\$OS" = "Windows" ]; then

                7z e -y -r "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras.\$FILETYPE" -x!"*.exe" -x!"*.txt" -x!"*.md" -o"\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR"

            else

                7z e -y -r "\$SRB2BLDROOT/assets/\$BUILDPREFIX-\$GITVER-extras.\$FILETYPE" -x!"*.exe" -x!"*.txt" -x!"*.md" -x!"*.dll" -o"\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR"

            fi

            #Removing empty subdirectories.
            if [ "\$ANDROID" = "1" ]; then

                find "\$BUILD/android/app/src/main/assets" -mindepth 1 -maxdepth 1 -type d ! -name models ! -name mdls -exec rm '{}' -rf \;

            else

                find "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR" -mindepth 1 -maxdepth 1 -type d ! -name models ! -name mdls -exec rm '{}' -rf \;

            fi

            if [ "\$(find "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR" -mindepth 1 -maxdepth 1 2> /dev/null | wc -l)" -eq "1" ]; then

                mv -f "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR/"*/* "\$BUILD/build/AppDir/usr/games/\$ASSETAPPDIR"

            fi

        fi
    }

    extractsrb2assets() {
        SRB2LATESTVER=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases | gawk -F':|_' '/tag_name/ {gsub("\"|,| ",""); print \$NF}' | head -n1)
        SRB2VER=\$(gawk -F'\"' '/SRB2VERSION/ {print \$2}' "\$BUILD/src/version.h" 2> /dev/null || \$PRINTF "%s\n" "\$SRB2LATESTVER")

        if [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

            SRB2VER=\$(gawk -F'- v|- ' '/v[0-9]/ {print \$2}' "\$BUILD/src/config.h.in" 2> /dev/null | gawk '{gsub(" ",""); print}' | tail -n1 || \$PRINTF "%s\n" "\$SRB2LATESTVER")

        fi

        if [ -n "\$SRB2LATESTVER" ] && ([ "\$SRB2VER" != "\$SRB2LATESTVER" ] && [ "\$(\$PRINTF "\$SRB2VER" | gawk '{gsub("\\\.|[a-z]|[A-Z]",""); print}')" -lt "\$(\$PRINTF "\$SRB2LATESTVER" | gawk '{gsub("\\\.|[a-z]|[A-Z]",""); print}')" ]); then

            if [ -n "\$ISNET" ]; then

                SRB2ASSETURL=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases | gawk -F'"' '/'SRB2_release_\$SRB2VER'\/.*Full.zip/ {print \$4}')
                if [ "\$(curl -X GET -sLI "\$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2-Older.zip" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2-Older.zip"
                    curl -RL "\$SRB2ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-Older.zip"

                fi

            fi

            if [ "\$ANDROID" = "1" ]; then

                7z x -y "\$SRB2BLDROOT/assets/SRB2-Older.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"\$BUILD/android/app/src/main/assets"

            else

                7z x -y "\$SRB2BLDROOT/assets/SRB2-Older.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            fi

        else

            if [ -n "\$ISNET" ]; then

                SRB2ASSETURL=\$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print \$4}')
                if [ "\$(curl -X GET -sLI "\$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2-Latest.zip" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2-Latest.zip"
                    curl -RL "\$SRB2ASSETURL" -o "\$SRB2BLDROOT/assets/SRB2-Latest.zip"

                fi

            fi

            if [ "\$ANDROID" = "1" ]; then

                7z x -y "\$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"\$BUILD/android/app/src/main/assets"

            else

                7z x -y "\$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"\$BUILD/build/AppDir/usr/games/SRB2"

            fi

        fi

        if [ "\$ANDROID" = "1" ]; then

            find "\$BUILD/android/app/src/main/assets" -type d -exec chmod 755 {} \;

        else

            find "\$BUILD/build/AppDir/usr/games/SRB2" -type d -exec chmod 755 {} \;

        fi

        if [ "\$OS" = "Windows" ] && [ -d "\$BUILD/libs" ] && [ "\$ANDROID" != "1" ]; then

            if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

                cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/libopenmpt/bin/x86/mingw"
                cp -f "\$BUILD/libs/libopenmpt/bin/x86/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDLMixerX/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"

            elif [ "\$IS64" = "64" ]; then

                cp -f "\$BUILD/libs/curl/lib64/libcurl-x64.dll" "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/libopenmpt/bin/x86_64/mingw"
                cp -f "\$BUILD/libs/libopenmpt/bin/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/x86_64-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDLMixerX/x86_64-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/dll-binaries/x86_64/Old"
                cp -f "\$BUILD/libs/dll-binaries/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "/usr/lib/gcc/x86_64-w64-mingw32/"*-win32"/libgcc_s_seh"*.dll "\$BUILD/build/AppDir/usr/lib"

            else

                cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/libopenmpt/bin/x86/mingw"
                cp -f "\$BUILD/libs/libopenmpt/bin/x86/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDLMixerX/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"

            fi

        fi

    }

    extractsrb2kartassets() {
        if [ "\$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print \$2}' "\$BUILD/src/doomdef.h" 2> /dev/null)" = "RingRacers" ]; then

            RINGRACERSVERS=\$(curl -s https://api.github.com/repos/KartKrewDev/RingRacers/releases | gawk -F':|_' '/tag_name/ {gsub("\"|,| ",""); print \$NF}')
            RINGRACERSLATESTVER=\$(\$PRINTF "%s\n" "\$RINGRACERSVERS" | head -n1)
            RINGRACERSVER=\$(gawk -F'\"' '/SRB2VERSION/ {print \$2}' "\$BUILD/src/version.h" 2> /dev/null || \$PRINTF "%s\n" "\$RINGRACERSLATESTVER")

            if [ -n "\$RINGRACERSLATESTVER" ] && ([ "v\$RINGRACERSVER" != "\$RINGRACERSLATESTVER" ] && [ "\$(\$PRINTF "\$RINGRACERSVER" | gawk '{gsub("\\\.|[a-z]|[A-Z]",""); print}')" -lt "\$(\$PRINTF "\$RINGRACERSLATESTVER" | gawk '{gsub("\\\.|[a-z]|[A-Z]",""); print}')" ]); then

                if [ -n "\$ISNET" ]; then

                    RINGRACERSASSETURL=\$(curl -s https://api.github.com/repos/KartKrewDev/RingRacers/releases | gawk -F'"' '/'\$RINGRACERSVER'\/.*Installer.exe/ {print \$4}')
                    if [ "\$(curl -X GET -sLI "\$RINGRACERSASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/RingRacers-Older.exe" 2> /dev/null)" ]; then

                        rm -f "\$SRB2BLDROOT/assets/RingRacers-Older.exe"
                        curl -RL "\$RINGRACERSASSETURL" -o "\$SRB2BLDROOT/assets/RingRacers-Older.exe"

                    fi

                fi

                7z x -y "\$SRB2BLDROOT/assets/RingRacers-Older.exe" "*.pk3" "*.dat" "data/*" "models/*" -o"\$BUILD/build/AppDir/usr/games/RingRacers"

            else

                if [ -n "\$ISNET" ]; then

                    RINGRACERSASSETURL=\$(curl -s https://api.github.com/repos/KartKrewDev/RingRacers/releases/latest | gawk -F'"' '/browser_download_url.*Installer.exe/ {print \$4}')
                    if [ "\$(curl -X GET -sLI "\$RINGRACERSASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/RingRacers-Latest.exe" 2> /dev/null)" ]; then

                        rm -f "\$SRB2BLDROOT/assets/RingRacers-Latest.exe"
                        curl -RL "\$RINGRACERSASSETURL" -o "\$SRB2BLDROOT/assets/RingRacers-Latest.exe"

                    fi

                fi

                7z x -y "\$SRB2BLDROOT/assets/RingRacers-Latest.exe" "*.pk3" "*.dat" "data/*" "models/*" -o"\$BUILD/build/AppDir/usr/games/RingRacers"

            fi

            find "\$BUILD/build/AppDir/usr/games/RingRacers" -type d -exec chmod 755 {} \;

            if [ "\$OS" = "Windows" ] && [ -d "\$BUILD/libs" ] && [ "\$ANDROID" != "1" ]; then

                if [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

                    cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                    rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                    cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2_mixer/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

                elif [ "\$IS64" = "64" ]; then

                    if [ "\$BUILD" != "\$BUILDPATH/srb2-kart-saturn" ] && [ "\$BUILD" != "\$BUILDPATH/srb2-kart-neptune" ]; then

                        cp -f "\$BUILD/libs/curl/lib64/libcurl-x64.dll" "\$BUILD/build/AppDir/usr/lib"
                        cp -f "\$BUILD/libs/SDL2/x86_64-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                        cp -f "\$BUILD/libs/SDL2_mixer/x86_64-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

                    fi

                        rm -rf "\$BUILD/libs/dll-binaries/x86_64/Old"
                        cp -f "\$BUILD/libs/dll-binaries/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                        cp -f "/usr/lib/gcc/x86_64-w64-mingw32/"*-win32"/libgcc_s_seh"*.dll "\$BUILD/build/AppDir/usr/lib"

                else

                    if [ "\$BUILD" != "\$BUILDPATH/srb2-kart-saturn" ] && [ "\$BUILD" != "\$BUILDPATH/srb2-kart-neptune" ]; then

                        cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                        cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                        cp -f "\$BUILD/libs/SDL2_mixer/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

                    fi

                    rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                    cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"

                fi

            fi

    else

        SRB2KARTVERS=\$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases | gawk -F':|_' '/tag_name/ {gsub("\"|,| ",""); print \$NF}')
        SRB2KARTLATESTVER=\$(\$PRINTF "%s\n" "\$SRB2KARTVERS" | head -n1)
        SRB2KARTVER=\$(gawk -F'- [A-z]*[0-9]*' '/v[0-9]/ {print \$2}' "\$BUILD/src/config.h.in" 2> /dev/null | gawk '{gsub(" ",""); print}' | tail -n1 || \$PRINTF "%s\n" "\$SRB2KARTLATESTVER")

        if [ -n "\$SRB2KARTLATESTVER" ] && ([ "\$SRB2KARTVER" != "\$SRB2KARTLATESTVER" ] && [ "\$(\$PRINTF "\$SRB2KARTVER" | gawk '{gsub("\\\.|[a-z]|[A-Z]",""); print}')" -lt "\$(\$PRINTF "\$SRB2KARTLATESTVER" | gawk '{gsub("\\\.|[a-z]|[A-Z]",""); print}')" ]); then

            if [ -n "\$ISNET" ]; then

                SRB2KARTASSETURL=\$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases | gawk -F'"' '/'\$SRB2KARTVER'\/.*Installer.exe/ {print \$4}')
                if [ "\$(curl -X GET -sLI "\$SRB2KARTASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2Kart-Older.exe" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2Kart-Older.exe"
                    curl -RL "\$SRB2KARTASSETURL" -o "\$SRB2BLDROOT/assets/SRB2Kart-Older.exe"

                fi

            fi

            7z x -y "\$SRB2BLDROOT/assets/SRB2Kart-Older.exe" "*.kart" "*.srb" "*.dat" "mdls/*" -o"\$BUILD/build/AppDir/usr/games/SRB2Kart"

        else

            if [ -n "\$ISNET" ]; then

                SRB2KARTASSETURL=\$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases/latest | gawk -F'"' '/browser_download_url.*Installer.exe/ {print \$4}')
                if [ "\$(curl -X GET -sLI "\$SRB2KARTASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print \$NF}' 2> /dev/null | tail -n1)" != "\$(stat -c %s "\$SRB2BLDROOT/assets/SRB2Kart-Latest.exe" 2> /dev/null)" ]; then

                    rm -f "\$SRB2BLDROOT/assets/SRB2Kart-Latest.exe"
                    curl -RL "\$SRB2KARTASSETURL" -o "\$SRB2BLDROOT/assets/SRB2Kart-Latest.exe"

                fi

            fi

            7z x -y "\$SRB2BLDROOT/assets/SRB2Kart-Latest.exe" "*.kart" "*.srb" "*.dat" "mdls/*" -o"\$BUILD/build/AppDir/usr/games/SRB2Kart"

        fi

        find "\$BUILD/build/AppDir/usr/games/SRB2Kart" -type d -exec chmod 755 {} \;

        if [ "\$OS" = "Windows" ] && [ -d "\$BUILD/libs" ] && [ "\$ANDROID" != "1" ]; then

            if [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

                cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                cp -f "\$BUILD/libs/SDL2_mixer/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

            elif [ "\$IS64" = "64" ]; then

                if [ "\$BUILD" != "\$BUILDPATH/srb2-kart-saturn" ] && [ "\$BUILD" != "\$BUILDPATH/srb2-kart-neptune" ]; then

                    cp -f "\$BUILD/libs/curl/lib64/libcurl-x64.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/x86_64-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2_mixer/x86_64-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

                fi

                rm -rf "\$BUILD/libs/dll-binaries/x86_64/Old"
                cp -f "\$BUILD/libs/dll-binaries/x86_64/"* "\$BUILD/build/AppDir/usr/lib"
                cp -f "/usr/lib/gcc/x86_64-w64-mingw32/"*-win32"/libgcc_s_seh"*.dll "\$BUILD/build/AppDir/usr/lib"

            else

                if [ "\$BUILD" != "\$BUILDPATH/srb2-kart-saturn" ] && [ "\$BUILD" != "\$BUILDPATH/srb2-kart-neptune" ]; then

                    cp -f "\$BUILD/libs/curl/lib32/libcurl.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2/i686-w64-mingw32/bin/SDL2.dll" "\$BUILD/build/AppDir/usr/lib"
                    cp -f "\$BUILD/libs/SDL2_mixer/i686-w64-mingw32/bin/"* "\$BUILD/build/AppDir/usr/lib"

                fi

                rm -rf "\$BUILD/libs/dll-binaries/i686/Old"
                cp -f "\$BUILD/libs/dll-binaries/i686/"* "\$BUILD/build/AppDir/usr/lib"

            fi

        fi

    fi
}

    # Update Docker/Podman container.
    \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating \$(\$PRINTF "%s\n" "\\$OSVIRT" | gawk 'match(\$0, /docker|podman/) {print substr(\$0, RSTART, RLENGTH)}') container. Please wait..."

    if [ -n "\$ISNET" ]; then

        if [ "\$LIBC" = "musl" ] || [ "\$ANDROID" = "1" ]; then

            sudo -E apk update && sudo -E apk upgrade

        else

            sudo -E apt update && sudo -E apt full-upgrade -y

        fi

    fi

    # Download and extract assets.
    if ([ "\$BUILD" != "\$BUILDPATH/wadcli" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker-ring-racers" ] && [ "\$BUILD" != "\$BUILDPATH/followermaker" ] && [ "\$BUILD" != "\$BUILDPATH/slade" ] && [ "\$BUILD" != "\$BUILDPATH/ultimatezonebuilder" ] && [ "\$BUILD" != "\$BUILDPATH/highvoltagering" ] && [ "\$BUILD" != "\$BUILDPATH/aseprite" ]); then

        if [ -n "\$ISNET" ]; then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading and extracting $BUILDNAME's assets. Please wait..."

        else

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Extracting $BUILDNAME's assets. Please wait..."

        fi

        if [ "\$GITVER" != "\$GITDEFVER" ] || [ "\$(dirname \$BUILD)" = "\$BUILDPATH/srb2-custom" ]; then

            extractcustomassets

        else

            extractassets

        fi

    fi

if [ "\$ANDROID" = "1" ]; then

    cd "\$BUILD/android" || exit

    # Running comptime.sh before compiling to avoid errors.
    if [ -x "\$BUILD/comptime.sh" ]; then

        gawk -i inplace '{gsub("\r",""); print}' "\$BUILD/comptime.sh"

    fi

    if [ -x "\$BUILD/android/gradlew" ]; then

        gawk -i inplace '{gsub("\r",""); print}' "\$BUILD/android/gradlew"

    fi

    \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $BUILDNAME's Android APK. Please wait..."

    if [ "\$SRB2BLDNOGRADLECACHE" = "1" ]; then

        "\$BUILD/android/gradlew" assembleDebug --no-build-cache --no-configuration-cache --parallel --max-workers="\$NCPU"

    else

        "\$BUILD/android/gradlew" assembleDebug --build-cache --configuration-cache --parallel --max-workers="\$NCPU"

    fi

else

    \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Patching $BUILDNAME's source code. Please wait..."

    # Modify first line of build script, to avoid issue with running it.
    if [ "\$BUILD" = "\$BUILDPATH/kartmaker" ] || [ "\$BUILD" = "\$BUILDPATH/kartmaker-ring-racers" ] || [ "\$BUILD" = "\$BUILDPATH/followermaker" ]; then

         if [ -n "\$ISNET" ] && [ "\$BUILD" != "\$BUILDPATH/followermaker" ]; then

             curl -RL https://raw.githubusercontent.com/BombchuLink/kartmaker/master/build.sh -o "\$BUILD/build.sh"

         fi

         chmod 755 "\$BUILD/build.sh"
         gawk -i inplace '{gsub("#!/bin/env sh","#!/bin/sh"); print}' "\$BUILD/build.sh"

         if [ "\$OS" = "Windows" ]; then

             gawk -i inplace '{gsub("gcc","'\$CCACHE_BIN_PATH''\$ARCH-w64-mingw32-''\$MINGWCCVER'"); gsub("kartmaker","kartmaker.exe"); gsub("followermaker","followermaker.exe"); gsub("\r",""); print}' "\$BUILD/build.sh"

         fi

    fi

    # Patching headers, source code to avoid compilation failure for builds on Windows.
    if [ "\$OS" = "Windows" ] && [ "\$BUILD" != "\$BUILDPATH/wadcli" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker-ring-racers" ] && [ "\$BUILD" != "\$BUILDPATH/followermaker" ] && [ "\$BUILD" != "\$BUILDPATH/slade" ] && [ "\$BUILD" != "\$BUILDPATH/ultimatezonebuilder" ] && [ "\$BUILD" != "\$BUILDPATH/highvoltagering" ] && [ "\$BUILD" != "\$BUILDPATH/aseprite" ] && [ "\$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print \$2}' "\$BUILD/src/doomdef.h" 2> /dev/null)" != "RingRacers" ]; then

         sudo gawk -i inplace '/#if !defined\(_WIN32\) && !defined\(__CYGWIN__\)/ {suppress=1} /^\$/ {suppress=0} !suppress' /usr/*/include/_mingw.h
         sudo gawk -i inplace '/#ifndef _WIN32/ {suppress=1} /^\$/ {suppress=0} !suppress' /usr/*/include/_mingw_stdarg.h
         sudo gawk -i inplace '/#ifndef _WIN32/ {suppress=1} /^\$/ {suppress=0} !suppress' /usr/*/include/sys/types.h
         sudo gawk -i inplace '/#ifndef _WIN32/ {suppress=1} /^\$/ {suppress=0} !suppress' /usr/*/include/sys/stat.h

         # Removing exchndl dependency for some SRB2/SRB2Kart builds due to linking errors.
         if [ -f "\$BUILD/src/sdl/i_main.c" ] && [ -z "\$(gawk '/#ifdef DRMINGW/ {print}' \$BUILD/src/sdl/i_main.c)" ]; then

             gawk -i inplace '/#include "exchndl.h"/ {suppress=1} /#endif/ {suppress=0} !suppress' "\$BUILD/src/sdl/i_main.c"
             gawk -i inplace '/ExcHndlInit()/ {suppress=1} /}/ {suppress=0} !suppress' "\$BUILD/src/sdl/i_main.c"

         fi

         # Linking windres and dllwrap for compiling specific builds.
         if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ] || [ "\$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print \$2}' "\$BUILD/src/doomdef.h" 2> /dev/null)" = "RingRacers" ]; then

             sudo ln -sf /usr/bin/i686-w64-mingw32-windres /usr/bin/windres
             sudo ln -sf /usr/bin/i686-w64-mingw32-dllwrap /usr/bin/dllwrap
             sudo ln -sf /usr/bin/i686-w64-mingw32-ld /usr/bin/ld

         else

             sudo ln -sf "/usr/bin/\$ARCH-w64-mingw32-windres" /usr/bin/windres
             sudo ln -sf "/usr/bin/\$ARCH-w64-mingw32-dllwrap" /usr/bin/dllwrap
             sudo ln -sf "/usr/bin/\$ARCH-w64-mingw32-ld" /usr/bin/ld

         fi

    fi

    # Removing SDL_OpenURL, because of using outdated SDL2 in Ubuntu 18.04 Docker/Podman container according to issue #21 from https://github.com/bijman/srb2bld/issues/21.
    if [ -f "\$BUILD/src/sdl/i_system.c" ] && [ "\$(gawk 'match(\$0, /SDL_OpenURL/) {print substr(\$0, RSTART, RLENGTH)}' \$BUILD/src/sdl/i_system.c 2> /dev/null)" = "SDL_OpenURL" ]; then

        gawk -i inplace '/if \(buttonid == 1\)/ {suppress=1} /}/ {suppress=0} !suppress' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '/#if SDL_VERSION_ATLEAST\([0-9].*\)/ {suppress=1} /}/ {suppress=0} !suppress' "\$BUILD/src/sdl/i_system.c"

    fi

    # Dirty workaround for SRB2 TSoURDt3rd buffer overflow from main menu.
#    if [ "\$BUILD" = "\$BUILDPATH/srb2-tsourdt3rd" ]; then

#        export CFLAGS="-D_FORTIFY_SOURCE=0"

#    fi

    if [ "\$GITVERCONF" = "\$GITDEFVER" ] && [ -z "\$SRB2BLDGITVER" ]; then

       unset GITVERCONF

    fi

    # Modify the build's configuration and assets directory names to avoid conflicts between installed builds.
    if [ "\$BUILD" = "\$BUILDPATH/srb2" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2\\"","#define DEFAULTDIR \\".srb2'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2\\"","#define DEFAULTDIR \\"srb2'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2","'\$SRB2BLDPREFIX'/share/games/SRB2"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2","'\$SRB2BLDPREFIX'/games/SRB2"); print}' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2\\"","#define DEFAULTDIR \\".srb2'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2\\"","#define DEFAULTDIR \\"srb2'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2","'\$SRB2BLDPREFIX'/share/games/SRB2UncappedPlus"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2","'\$SRB2BLDPREFIX'/games/SRB2UncappedPlus"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2","/usr/share/games/SRB2UncappedPlus"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2","/usr/games/SRB2UncappedPlus"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("\\\\\\\srb2","\\\\srb2uncappedplus"); print}' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2\\"","#define DEFAULTDIR \\".srb2'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2\\"","#define DEFAULTDIR \\"srb2'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2","'\$SRB2BLDPREFIX'/share/games/SRB2NetPlus"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2","'\$SRB2BLDPREFIX'/games/SRB2NetPlus"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2","/usr/share/games/SRB2NetPlus"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2","/usr/games/SRB2NetPlus"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("\\\\\\\srb2","\\\\srb2netplus"); print}' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-rphys" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2\\"","#define DEFAULTDIR \\".srb2'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2\\"","#define DEFAULTDIR \\"srb2'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2","'\$SRB2BLDPREFIX'/share/games/SRB2rphys"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2","'\$SRB2BLDPREFIX'/games/SRB2rphys"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2","/usr/share/games/SRB2rphys"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2","/usr/games/SRB2rphys"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("\\\\\\\srb2","\\\\srb2rphys"); print}' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-tsourdt3rd" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2\\"","#define DEFAULTDIR \\".srb2'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2\\"","#define DEFAULTDIR \\"srb2'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2","'\$SRB2BLDPREFIX'/share/games/SRB2TSoURDt3rd"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2","'\$SRB2BLDPREFIX'/games/SRB2TSoURDt3rd"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2","/usr/share/games/SRB2TSoURDt3rd"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2","/usr/games/SRB2TSoURDt3rd"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("\\\\\\\srb2","\\\\srb2tsourdt3rd"); print}' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2\\"","#define DEFAULTDIR \\".srb2'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2\\"","#define DEFAULTDIR \\"srb2'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2","'\$SRB2BLDPREFIX'/share/games/SRB2VR"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2","'\$SRB2BLDPREFIX'/games/SRB2VR"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2","/usr/share/games/SRB2VR"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2","/usr/games/SRB2VR"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("\\\\\\\srb2","\\\\srb2vr"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("../../libs/openvr/libopenvr_api.so","\$(shell find -L $SRB2BLDPREFIX/lib64 $SRB2BLDPREFIX/lib -name libopenvr_api.so 2> /dev/null | head -n1)"); print}' "\$BUILD/src/Makefile.d/nix.mk"
        \$PRINTF "%s\n" "libs+=\$SRB2BLDROOT/libraries/libopenvr/bin/win32/openvr_api.dll" >> "\$BUILD/src/Makefile.d/win32.mk"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2_21\\"","#define DEFAULTDIR \\".srb2_2.1'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2_21\\"","#define DEFAULTDIR \\"srb2_2.1'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2legacy","'\$SRB2BLDPREFIX'/share/games/SRB2legacy"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2legacy","'\$SRB2BLDPREFIX'/games/SRB2legacy"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2legacy","/usr/share/games/SRB2legacy"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2legacy","/usr/games/SRB2legacy"); print}' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2\\"","#define DEFAULTDIR \\".srb2_2.0'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2\\"","#define DEFAULTDIR \\"srb2_2.0'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/srb2","'\$SRB2BLDPREFIX'/share/games/SRB2-2.0"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/srb2","'\$SRB2BLDPREFIX'/games/SRB2-2.0"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2","/usr/share/games/SRB2-2.0"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/srb2","/usr/games/SRB2-2.0"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("\\\\\\\srb2","\\\\srb2-2.0"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("\\\\$\\\\(CC\\\\) \\\\$\\\\(CFLAGS\\\\) -MM \\\\*.c","\$(CC) \$(CFLAGS) -MM \$(wildcard *.c)"); print}' "\$BUILD/src/Makefile"
        gawk -i inplace '{gsub("\\\\$\\\\(INTERFACE\\\\)/\\\\*.c","\$(wildcard \$(INTERFACE)/*.c)"); print}' "\$BUILD/src/Makefile"
        gawk -i inplace '{gsub("hardware/\\\\*.c","\$(wildcard hardware/*.c)"); print}' "\$BUILD/src/Makefile"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb21094\\"","#define DEFAULTDIR \\".srb2fd'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb21094\\"","#define DEFAULTDIR \\"srb2fd'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2","'\$SRB2BLDPREFIX'/share/games/SRB2FinalDemo"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2","'\$SRB2BLDPREFIX'/games/SRB2FinalDemo"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2","/usr/share/games/SRB2FinalDemo"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2","/usr/games/SRB2FinalDemo"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("\\\\\\\srb2","\\\\srb2finaldemo"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("\\\\$\\\\(CC\\\\) \\\\$\\\\(CFLAGS\\\\) -MM \\\\*.c","\$(CC) \$(CFLAGS) -MM \$(wildcard *.c)"); print}' "\$BUILD/src/makefile"
        gawk -i inplace '{gsub("\\\\$\\\\(INTERFACE\\\\)/\\\\*.c","\$(wildcard \$(INTERFACE)/*.c)"); print}' "\$BUILD/src/makefile"
        gawk -i inplace '{gsub("hardware/\\\\*.c","\$(wildcard hardware/*.c)"); print}' "\$BUILD/src/makefile"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2\\"","#define DEFAULTDIR \\".srb2jte'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2\\"","#define DEFAULTDIR \\"srb2jte'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2","'\$SRB2BLDPREFIX'/share/games/SRB2JTE"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2","'\$SRB2BLDPREFIX'/games/SRB2JTE"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2","/usr/share/games/SRB2JTE"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2","/usr/games/SRB2JTE"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("\\\\\\\srb2","\\\\srb2jte"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("\\\\$\\\\(CC\\\\) \\\\$\\\\(CFLAGS\\\\) -MM \\\\*.c","\$(CC) \$(CFLAGS) -MM \$(wildcard *.c)"); print}' "\$BUILD/src/makefile"
        gawk -i inplace '{gsub("\\\\$\\\\(INTERFACE\\\\)/\\\\*.c","\$(wildcard \$(INTERFACE)/*.c)"); print}' "\$BUILD/src/makefile"
        gawk -i inplace '{gsub("hardware/\\\\*.c","\$(wildcard hardware/*.c)"); print}' "\$BUILD/src/makefile"
        gawk -i inplace '{gsub("char \\\\*pCrypt","char *p1Crypt"); print}' "\$BUILD/src/JTE/SV_Virus.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2\\"","#define DEFAULTDIR \\".srb2persona'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2\\"","#define DEFAULTDIR \\"srb2persona'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2","'\$SRB2BLDPREFIX'/share/games/SRB2Persona"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2","'\$SRB2BLDPREFIX'/games/SRB2Persona"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2","/usr/share/games/SRB2Persona"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2","/usr/games/SRB2Persona"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("\\\\\\\srb2","\\\\srb2persona"); print}' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/ring-racers" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".ringracers\\"","#define DEFAULTDIR \\".ringracers'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"ringracers\\"","#define DEFAULTDIR \\"ringracers'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/RingRacers","'\$SRB2BLDPREFIX'/share/games/RingRacers"); print}' "\$BUILD/src/sdl/i_system.cpp"
        gawk -i inplace '{gsub("/usr/local/games/RingRacers","'\$SRB2BLDPREFIX'/games/RingRacers"); print}' "\$BUILD/src/sdl/i_system.cpp"
        gawk -i inplace '{gsub("! UNCOMMITTED CHANGES !",""); print}' "\$BUILD/src/f_finale.c"
        gawk -i inplace '{gsub("! UNCOMMITTED CHANGES !",""); print}' "\$BUILD/src/d_netcmd.c"

    elif [ "\$BUILD" = "\$BUILDPATH/ring-racers-noire" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".ringracers\\"","#define DEFAULTDIR \\".ringracers'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"ringracers\\"","#define DEFAULTDIR \\"ringracers'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/RingRacers","'\$SRB2BLDPREFIX'/share/games/RingRacersNoire"); print}' "\$BUILD/src/sdl/i_system.cpp"
        gawk -i inplace '{gsub("/usr/local/games/RingRacers","'\$SRB2BLDPREFIX'/games/RingRacersNoire"); print}' "\$BUILD/src/sdl/i_system.cpp"
        gawk -i inplace '{gsub("! UNCOMMITTED CHANGES !",""); print}' "\$BUILD/src/f_finale.c"
        gawk -i inplace '{gsub("! UNCOMMITTED CHANGES !",""); print}' "\$BUILD/src/d_netcmd.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2kart\\"","#define DEFAULTDIR \\".srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2kart\\"","#define DEFAULTDIR \\"srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2Kart","'\$SRB2BLDPREFIX'/share/games/SRB2Kart"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2Kart","'\$SRB2BLDPREFIX'/games/SRB2Kart"); print}' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2kart\\"","#define DEFAULTDIR \\".srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2kart\\"","#define DEFAULTDIR \\"srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2Kart","'\$SRB2BLDPREFIX'/share/games/SRB2KartMoeMansion"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2Kart","'\$SRB2BLDPREFIX'/games/SRB2KartMoeMansion"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2Kart","/usr/share/games/SRB2KartMoeMansion"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2Kart","/usr/games/SRB2KartMoeMansion"); print}' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-galaxy" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2kart\\"","#define DEFAULTDIR \\".srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2kart\\"","#define DEFAULTDIR \\"srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2Kart","'\$SRB2BLDPREFIX'/share/games/SRB2KartGalaxy"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2Kart","'\$SRB2BLDPREFIX'/games/SRB2KartGalaxy"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2Kart","/usr/share/games/SRB2KartGalaxy"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2Kart","/usr/games/SRB2KartGalaxy"); print}' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-hep" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2kart\\"","#define DEFAULTDIR \\".srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2kart\\"","#define DEFAULTDIR \\"srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2Kart","'\$SRB2BLDPREFIX'/share/games/SRB2KartHEP"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2Kart","'\$SRB2BLDPREFIX'/games/SRB2KartHEP"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2Kart","/usr/share/games/SRB2KartHEP"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2Kart","/usr/games/SRB2KartHEP"); print}' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-saturn" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2kart\\"","#define DEFAULTDIR \\".srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2kart\\"","#define DEFAULTDIR \\"srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2Kart","'\$SRB2BLDPREFIX'/share/games/SRB2KartSaturn"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2Kart","'\$SRB2BLDPREFIX'/games/SRB2KartSaturn"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2Kart","/usr/share/games/SRB2KartSaturn"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2Kart","/usr/games/SRB2KartSaturn"); print}' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-neptune" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2kart\\"","#define DEFAULTDIR \\".srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2kart\\"","#define DEFAULTDIR \\"srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2Kart","'\$SRB2BLDPREFIX'/share/games/SRB2KartNeptune"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2Kart","'\$SRB2BLDPREFIX'/games/SRB2KartNeptune"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2Kart","/usr/share/games/SRB2KartNeptune"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2Kart","/usr/games/SRB2KartNeptune"); print}' "\$BUILD/src/sdl/i_system.c"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \\".srb2kart\\"","#define DEFAULTDIR \\".srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"srb2kart\\"","#define DEFAULTDIR \\"srb2kart'\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
        gawk -i inplace '{gsub("/usr/local/share/games/SRB2Kart","'\$SRB2BLDPREFIX'/share/games/SRB2KartVR"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/local/games/SRB2Kart","'\$SRB2BLDPREFIX'/games/SRB2KartVR"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/share/games/SRB2Kart","/usr/share/games/SRB2KartVR"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("/usr/games/SRB2Kart","/usr/games/SRB2KartVR"); print}' "\$BUILD/src/sdl/i_system.c"
        gawk -i inplace '{gsub("../libs/openvr/linux.*","\$(shell find -L $SRB2BLDPREFIX/lib64 $SRB2BLDPREFIX/lib -name libopenvr_api.so 2> /dev/null | head -n1)"); print}' "\$BUILD/src/sdl/Makefile.cfg"

    elif [ "\$(dirname \$BUILD)" = "\$BUILDPATH/srb2-custom" ]; then

        SRB2CASSETDIR=\$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print \$2}' "\$BUILD/src/doomdef.h" 2> /dev/null)
        SRB2CCONFDIR=\$(\$PRINTF "%s\n" "\$SRB2CASSETDIR" | gawk '{print tolower(\$0)}')

        if [ "\$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print \$2}' "\$BUILD/src/doomdef.h" 2> /dev/null)" = "RingRacers" ]; then

            gawk -i inplace '{gsub("#define DEFAULTDIR \\".'\$SRB2CCONFDIR'\\"","#define DEFAULTDIR \\".'\$SRB2CCONFDIR'c'\$CUSTOMDIR''\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
            gawk -i inplace '{gsub("#define DEFAULTDIR \\"'\$SRB2CCONFDIR'\\"","#define DEFAULTDIR \\"'\$SRB2CCONFDIR'c'\$CUSTOMDIR''\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
            gawk -i inplace '{gsub("\"/usr/local/share/games/'\$SRB2CCONFDIR'\"","'\$SRB2BLDPREFIX'/share/games/'\$SRB2CASSETDIR'C'\$CwUSTOMDIR'\""); print}' "\$BUILD/src/sdl/i_system.cpp"
            gawk -i inplace '{gsub("\"/usr/local/games/'\$SRB2CASSETDIR'\"","'\$SRB2BLDPREFIX'/games/'\$SRB2CASSETDIR'C'\$CUSTOMDIR'\""); print}' "\$BUILD/src/sdl/i_system.cpp"
            gawk -i inplace '{gsub("! UNCOMMITTED CHANGES !",""); print}' "\$BUILD/src/f_finale.c"
            gawk -i inplace '{gsub("! UNCOMMITTED CHANGES !",""); print}' "\$BUILD/src/d_netcmd.c"

        else

            gawk -i inplace '{gsub("#define DEFAULTDIR \\".'\$SRB2CCONFDIR'\\"","#define DEFAULTDIR \\".'\$SRB2CCONFDIR'c'\$CUSTOMDIR''\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
            gawk -i inplace '{gsub("#define DEFAULTDIR \\"'\$SRB2CCONFDIR'\\"","#define DEFAULTDIR \\"'\$SRB2CCONFDIR'c'\$CUSTOMDIR''\$GITVERCONF'\\""); print}' "\$BUILD/src/doomdef.h"
            gawk -i inplace '{gsub("\"/usr/local/share/games/'\$SRB2CASSETDIR'\"","\"'\$SRB2BLDPREFIX'/share/games/'\$SRB2CASSETDIR'C'\$CUSTOMDIR'\""); print}' "\$BUILD/src/sdl/i_system.c"
            gawk -i inplace '{gsub("\"/usr/local/games/'\$SRB2CASSETDIR'\"","\"'\$SRB2BLDPREFIX'/games/'\$SRB2CASSETDIR'C'\$CUSTOMDIR'\""); print}' "\$BUILD/src/sdl/i_system.c"
            gawk -i inplace '{gsub("\"/usr/share/games/'\$SRB2CASSETDIR'\"","\"/usr/games/'\$SRB2CASSETDIR'C'\$CUSTOMDIR'\""); print}' "\$BUILD/src/sdl/i_system.c"
            gawk -i inplace '{gsub("\"/usr/games/'\$SRB2CASSETDIR'\"","\"/usr/games/'\$SRB2CASSETDIR'C'\$CUSTOMDIR'\""); print}' "\$BUILD/src/sdl/i_system.c"

        fi

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        gawk -i inplace '/if\(ZIP_COMMAND\)/ {suppress=1} /if\(APPLE\)/ {suppress=0} !suppress' "\$BUILD/dist/CMakeLists.txt"

        if [ \$(git -C "\$BUILD" describe --tags | gawk -F'_|-' '{gsub("\\\.|[a-z]",""); print \$1}' | gawk '{if(\$0 < 1000) {gsub("$","0"); print} else {print}}') -ge "3250" ] && [ "\$LIBC" != "musl" ]; then

            gawk -i inplace '!/REGEX REPLACE "windres"/ {print}' "\$BUILD/cmake/unix.cmake"
            gawk -i inplace '{gsub("\\\\$<BUILD_INTERFACE:|>",""); print}' "\$BUILD/thirdparty/fmt/CMakeLists.txt"

        fi

    elif [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]; then

        gawk -i inplace '{gsub("UDBuilder.default.cfg","HVRBuilder.default.cfg"); print}' "\$BUILD/Source/Core/General/General.cs"

    fi

    # Running comptime.sh before compiling to avoid errors.
    if [ -x "\$BUILD/comptime.sh" ] && [ "\$BUILD" != "\$BUILDPATH/srb2-2.0" ]; then

        gawk -i inplace '{gsub("\r",""); print}' "\$BUILD/comptime.sh"

    fi

    # Add compilation flags.
    if [ "\$OS" = "Windows" ]; then

        if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                # Only 32bit supported for Windows build.
                BLDCMD="make CC="\$CCACHE_BIN_PATH"i686-w64-mingw32-\$MINGWCCVER LD_LIBRARY_PATH=\$SRB2BLDROOT/libraries/libopenvr/bin/linux32 C_INCLUDE_PATH=/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:\$SRB2BLDPREFIX/include/SDL2/. -k -j\$NCPU -C \$BUILD/src MINGW=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1"

            else

                BLDCMD="make CC="\$CCACHE_BIN_PATH"\$ARCH-w64-mingw32-\$MINGWCCVER LD_LIBRARY_PATH=\$SRB2BLDROOT/libraries/libopenvr/bin/linux32 C_INCLUDE_PATH=/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:\$SRB2BLDPREFIX/include/SDL2/. -k -j\$NCPU -C \$BUILD/src MINGW=1 NONX86=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

               # SDL=1 flag is removed because of errors with building it and only 32bit supported for Windows build.
               BLDCMD="make CC="\$CCACHE_BIN_PATH"i686-w64-mingw32-\$MINGWOLDCCVER LD_LIBRARY_PATH=\$SRB2BLDPREFIX/lib/\$ARCH-linux-gnu C_INCLUDE_PATH=\$SRB2BLDPREFIX/i686-w64-mingw32/include/.:/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:/usr/include/.:\$SRB2BLDPREFIX/include/SDL2/. -k -j\$NCPU -C \$BUILD/src MINGW=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1"

            else

               BLDCMD="make CC="\$CCACHE_BIN_PATH"\$ARCH-w64-mingw32-\$MINGWOLDCCVER LD_LIBRARY_PATH=\$SRB2BLDPREFIX/lib/\$ARCH-linux-gnu C_INCLUDE_PATH=\$SRB2BLDPREFIX/\$ARCH-w64-mingw32/include/.:/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:/usr/include/.:\$SRB2BLDPREFIX/include/SDL2/. -k -j\$NCPU -C \$BUILD/src MINGW=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                # Only 32bit supported for Windows build.
                BLDCMD="make CC=i686-w64-mingw32-\$MINGWOLDCCVER LD_LIBRARY_PATH=\$SRB2BLDPREFIX/lib/i386-linux-gnu C_INCLUDE_PATH=/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:\$SRB2BLDPREFIX/include/SDL2/. -k -j\$NCPU -C \$BUILD/src MINGW=1 SDL=1 NOASM=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1"

            else

                BLDCMD="make CC=\$ARCH-w64-mingw32-\$MINGWOLDCCVER LD_LIBRARY_PATH=\$SRB2BLDPREFIX/lib/\$ARCH-linux-gnu C_INCLUDE_PATH=/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:\$SRB2BLDPREFIX/include/SDL2/. -k -j\$NCPU -C \$BUILD/src MINGW=1 NONX86=1 SDL=1 NOASM=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1"

            fi

        elif [ "\$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print \$2}' "\$BUILD/src/doomdef.h" 2> /dev/null)" = "RingRacers" ]; then

            BLDCMD="cmake -S \$BUILD --preset ninja-x86_mingw_static_vcpkg-release -DVCPKG_TARGET_TRIPLET=x86-mingw-static -DCMAKE_C_COMPILER="\$CCACHE_BIN_PATH"i686-w64-mingw32-gcc-posix -DCMAKE_CXX_COMPILER="\$CCACHE_BIN_PATH"i686-w64-mingw32-g++-posix -DCMAKE_MAKE_PROGRAM=/usr/bin/ninja -DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=\$VCPKG_ROOT/scripts/toolchains/mingw.cmake"

        elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

            BLDCMD="make CXX="\$CCACHE_BIN_PATH"\$ARCH-w64-mingw32-\$MINGWCXXVER CPLUS_INCLUDE_PATH=/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:\$SRB2BLDPREFIX/include/. -k -j\$NCPU -C \$BUILD WINDOWS=1"

        elif [ "\$BUILD" = "\$BUILDPATH/kartmaker" ] || [ "\$BUILD" = "\$BUILDPATH/kartmaker-ring-racers" ] || [ "\$BUILD" = "\$BUILDPATH/followermaker" ]; then

            BLDCMD="\$BUILD/build.sh"

        elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

            WX_CONFIG_EXECUTABLE=\$(command -v wx-config wx-config-gtk3 2> /dev/null | head -n1)
            WX_LIBRARIES=\$(find /usr -name libwx_gtk3u*.so.* -printf "%p:" 2> /dev/null)

            cat > "\$BUILD/build/mingw-w64-\$ARCH.cmake" << MINGWCMAKE
# Sample toolchain file for building for Windows from an Ubuntu Linux system.
#
# Typical usage:
#    *) install cross compiler: sudo -E apt-get install mingw-w64
#    *) cd build
#    *) cmake -DCMAKE_TOOLCHAIN_FILE=~/mingw-w64-x86_64.cmake ..
# This is free and unencumbered software released into the public domain.

set(CMAKE_SYSTEM_NAME Windows)
set(TOOLCHAIN_PREFIX \$ARCH-w64-mingw32)

# cross compilers to use for C, C++ and Fortran
set(CMAKE_C_COMPILER \$ARCH-w64-mingw32-gcc)
set(CMAKE_CXX_COMPILER \$ARCH-w64-mingw32-g++)
set(CMAKE_Fortran_COMPILER \$ARCH-w64-mingw32-gfortran)
set(CMAKE_RC_COMPILER \$ARCH-w64-mingw32-windres)

# target environment on the build host system
set(CMAKE_FIND_ROOT_PATH /usr/\$ARCH-w64-mingw32)

# modify default behavior of FIND_XXX() commands
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
MINGWCMAKE
#            BLDCMD="cmake .. -DNO_WEBVIEW=ON -DCMAKE_TOOLCHAIN_FILE=/usr/share/cmake-3.10/Modules/Platform/Windows.cmake -DwxWidgets_CONFIG_EXECUTABLE=\$WX_CONFIG_EXECUTABLE -DwxWidgets_LIBRARIES=\$WX_LIBRARIES -DFREETYPE_LIBRARY=/usr/lib/\$ARCH-linux-gnu/libfreetype.so -DCMAKE_SYSTEM_NAME=Windows -DTOOLCHAIN_PREFIX=\$ARCH-w64-mingw32 -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_CXX_COMPILER="\$CCACHE_BIN_PATH"\$ARCH-w64-mingw32-\$MINGWCXXVER -DCMAKE_C_COMPILER="\$CCACHE_BIN_PATH"\$ARCH-w64-mingw32-\$MINGWCCVER -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\$BUILD/AppDir/usr"
            BLDCMD="cmake .. -DNO_WEBVIEW=ON -DCMAKE_TOOLCHAIN_FILE=\$BUILD/build/mingw-w64-\$ARCH.cmake -DwxWidgets_CONFIG_EXECUTABLE=\$WX_CONFIG_EXECUTABLE -DwxWidgets_LIBRARIES=\$WX_LIBRARIES -DFREETYPE_INCLUDE_DIRS=/usr/include/freetype2/freetype -DFREETYPE_LIBRARY=/usr/lib/\$ARCH-linux-gnu/libfreetype.so -DFTGL_INCLUDE_DIR=/usr/include/FTGL -DFTGL_LIBRARIES=/usr/lib/\$ARCH-linux-gnu/libftgl.so -DFLUIDSYNTH_INCLUDE_DIR=/usr/include/fluidsynth -DFLUIDSYNTH_LIBRARIES=/usr/lib/\$ARCH-linux-gnu/libfluidsynth.so -DFREEIMAGE_INCLUDE_DIR=/usr/include -DFREEIMAGE_LIBRARIES=/usr/lib/\$ARCH-linux-gnu/libfreeimage.so -DSFML_INCLUDE_DIR=/usr/include/SFML -DSFML_MAIN_LIBRARY_SHARED_NONDEBUG=/usr/lib/\$ARCH-linux-gnu/libsfml-system.so -DSFML_AUDIO_INCLUDE_DIR=/usr/include/SFML/Audio -DSFML_AUDIO_LIBRARY_SHARED_NONDEBUG=/usr/lib/\$ARCH-linux-gnu/libsfml-audio.so -DSFML_NETWORK_INCLUDE_DIR=/usr/include/SFML/Network -DSFML_NETWORK_LIBRARY_SHARED_NONDEBUG=/usr/lib/\$ARCH-linux-gnu/libsfml-network.so -DSFML_SYSTEM_INCLUDE_DIR=/usr/include/SFML/System -DSFML_SYSTEM_LIBRARY_SHARED_NONDEBUG=/usr/lib/\$ARCH-linux-gnu/libsfml-system.so -DSFML_WINDOW_INCLUDE_DIR=/usr/include/SFML/Window -DSFML_WINDOW_LIBRARY_SHARED_NONDEBUG=/usr/lib/\$ARCH-linux-gnu/libsfml-window.so -DLUA_INCLUDE_DIR=/usr/include/lua5.3 -DLUA_LIBRARIES=/usr/lib/\$ARCH-linux-gnu/liblua5.3.so -DMPG123_INCLUDE_DIR=/usr/include -DMPG123_LIBRARIES=/usr/lib/\$ARCH-linux-gnu/libmpg123.so -DZLIB_INCLUDE_DIR=/usr/include -DZLIB_LIBRARY=/usr/lib/\$ARCH-linux-gnu/libz.so -DBZIP2_INCLUDE_DIR=/usr/include -DBZIP2_LIBRARIES=/usr/lib/\$ARCH-linux-gnu/libz.so -DCMAKE_SYSTEM_NAME=Windows -DTOOLCHAIN_PREFIX=\$ARCH-w64-mingw32 -DCMAKE_FIND_ROOT_PATH_MODE_PROGRAM=NEVER -DCMAKE_FIND_ROOT_PATH_MODE_LIBRARY=ONLY -DCMAKE_FIND_ROOT_PATH_MODE_INCLUDE=ONLY -DCMAKE_INCLUDE_PATH=/usr/include/\$ARCH-linux-gnu;\$BUILD/thirdparty/fmt/include -DCMAKE_CXX_COMPILER="\$CCACHE_BIN_PATH"\$ARCH-w64-mingw32-\$MINGWCXXVER -DCMAKE_C_COMPILER="\$CCACHE_BIN_PATH"\$ARCH-w64-mingw32-\$MINGWCCVER -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\$BUILD/AppDir/usr"

        elif [ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ] || [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]; then

            BLDCMD="make CXX="\$CCACHE_BIN_PATH"\$MINGWCXXVER CPLUS_INCLUDE_PATH=/usr/include/\$ARCH-linux-gnu/. -k -j\$NCPU -C \$BUILD"

        elif [ "\$BUILD" = "\$BUILDPATH/aseprite" ]; then

            BLDCMD="cmake -S \$BUILD -B \$BUILD/build -DCMAKE_CXX_COMPILER="\$CCACHE_BIN_PATH"clang++ -DCMAKE_C_COMPILER="\$CCACHE_BIN_PATH"clang -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\$BUILD/build/AppDir/usr -DBUILD_TESTING=OFF -DCLIP_TESTS=OFF -DCMARK_TESTS=OFF -DENABLE_TEST=OFF -DENABLE_TESTS=OFF -DFMT_CUDA_TEST=OFF -DFMT_TEST=OFF -DJSON11_BUILD_TESTS=OFF -DLAF_WITH_TESTS=OFF -DOBSERVABLE_TESTS=OFF -DPNG_TESTS=OFF -DUNDO_TESTS=OFF -Dtinyxml2_BUILD_TESTING=OFF -DCMAKE_CXX_FLAGS=-stdlib=libc++ -DCMAKE_EXE_LINKER_FLAGS=-stdlib=libc++ -DLAF_BACKEND=skia -DSKIA_DIR=\$SRB2BLDROOT/libraries/libskia -DSKIA_LIBRARY_DIR=\$SRB2BLDROOT/libraries/libskia/out/Release-x64 -DSKIA_LIBRARY=\$SRB2BLDROOT/libraries/libskia/out/Release-x64/libskia.a -G Ninja"

        else

            if [ "\$ARCH" = "x86_64" ]; then

                BLDCMD="make CC="\$CCACHE_BIN_PATH"x86_64-w64-mingw32-\$MINGWCCVER C_INCLUDE_PATH=/usr/x86_64-w64-mingw32/include/.:/usr/x86_64-linux-gnu/include/.:\$SRB2BLDPREFIX/include/SDL2/.:\$SRB2BLDPREFIX/include/openvr/. -k -j\$NCPU -C \$BUILD/src MINGW64=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1"

            elif [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ]; then

                BLDCMD="make CC="\$CCACHE_BIN_PATH"i686-w64-mingw32-\$MINGWCCVER C_INCLUDE_PATH=/usr/i686-w64-mingw32/include/.:/usr/include/i386-linux-gnu/.:\$SRB2BLDPREFIX/include/SDL2/.:\$SRB2BLDPREFIX/include/openvr/. -k -j\$NCPU -C \$BUILD/src MINGW=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1"

            else

                BLDCMD="make CC="\$CCACHE_BIN_PATH"\$ARCH-w64-mingw32-\$MINGWCCVER C_INCLUDE_PATH=/usr/\$ARCH-w64-mingw32/include/.:/usr/include/\$ARCH-linux-gnu/.:\$SRB2BLDPREFIX/include/SDL2/.:\$SRB2BLDPREFIX/include/openvr/. -k -j\$NCPU -C \$BUILD/src MINGW\$IS64=1 NONX86=1 SDL=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1"

            fi

        fi

    elif [ "\$OS" = "Linux" ]; then

        if [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                BLDCMD="make CC="\$CCACHE_BIN_PATH"\$GCCOLDVER C_INCLUDE_PATH=\$SRB2BLDPREFIX/include/.:\$SRB2BLDPREFIX/include/SDL2/.:/usr/lib/klibc-\$(arch)/include/.:/usr/include/FMOD/.:/usr/include/\$ARCH-linux-gnu/. LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme -k -j\$NCPU -C \$BUILD/src LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1"

            else

                BLDCMD="make CC="\$CCACHE_BIN_PATH"\$GCCOLDVER C_INCLUDE_PATH=\$SRB2BLDPREFIX/include/.:\$SRB2BLDPREFIX/include/SDL2/.:/usr/lib/klibc-\$(arch)/include/.:/usr/include/FMOD/.:/usr/include/\$ARCH-linux-gnu/. LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme -k -j\$NCPU -C \$BUILD/src LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                BLDCMD="make CC="\$CCACHE_BIN_PATH"\$GCCVER C_INCLUDE_PATH=\$SRB2BLDPREFIX/include/.:\$SRB2BLDPREFIX/include/SDL2/.:/usr/lib/klibc-x86/include/.:/usr/include/i386-linux-gnu/. LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme -k -j\$NCPU -C \$BUILD/src LINUX=1"

            else

                BLDCMD="make CC="\$CCACHE_BIN_PATH"\$GCCVER C_INCLUDE_PATH=\$SRB2BLDPREFIX/include/.:\$SRB2BLDPREFIX/include/SDL2/.:/usr/lib/klibc-\$(arch)/include/.:/usr/include/\$ARCH-linux-gnu/. LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme -k -j\$NCPU -C \$BUILD/src LINUX=1 NONX86=1"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                BLDCMD="make CC=\$GCCOLDVER LD_LIBRARY_PATH=\$SRB2BLDPREFIX/lib/. C_INCLUDE_PATH=\$SRB2BLDPREFIX/include/.:\$SRB2BLDPREFIX/include/SDL2/.:/usr/lib/klibc-x86/include/.:/usr/include/i386-linux-gnu/. LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme -k -j\$NCPU -C \$BUILD/src LINUX=1 NOASM=1"

            else

                BLDCMD="make CC=\$GCCOLDVER LD_LIBRARY_PATH=\$SRB2BLDPREFIX/lib/. C_INCLUDE_PATH=\$SRB2BLDPREFIX/include/.:\$SRB2BLDPREFIX/include/SDL2/.:/usr/lib/klibc-\$(arch)/include/.:/usr/include/\$ARCH-linux-gnu/. LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme -k -j\$NCPU -C \$BUILD/src LINUX=1 NONX86=1 NOASM=1"

            fi

        elif [ "\$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print \$2}' "\$BUILD/src/doomdef.h" 2> /dev/null)" = "RingRacers" ]; then

            if [ "\$LIBC" = "musl" ]; then

                GCCVER=gcc
                GXXVER=g++

            else

                GCCVER=\$RINGRACERSGCCVER
                GXXVER=\$RINGRACERSGXXVER

            fi

            BLDCMD="cmake -S \$BUILD -B \$BUILD/build -DCMAKE_CXX_COMPILER="\$CCACHE_BIN_PATH"\$GXXVER -DCMAKE_C_COMPILER="\$CCACHE_BIN_PATH"\$GCCVER -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\$BUILD/build/AppDir/usr -DSRB2_CONFIG_ENABLE_WEBM_MOVIES=OFF -DSRB2_CONFIG_ASAN=OFF -DSRB2_CONFIG_ALWAYS_MAKE_DEBUGLINK=ON -DSRB2_SDL2_EXE_NAME=ringracers"

        elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

            BLDCMD="make CXX="\$CCACHE_BIN_PATH"g++ CPLUS_INCLUDE_PATH=/usr/include/\$ARCH-linux-gnu/.:\$SRB2BLDPREFIX/include/. -k -j\$NCPU -C \$BUILD STATIC=1"

        elif [ "\$BUILD" = "\$BUILDPATH/kartmaker" ] || [ "\$BUILD" = "\$BUILDPATH/kartmaker-ring-racers" ] || [ "\$BUILD" = "\$BUILDPATH/followermaker" ]; then

            BLDCMD="\$BUILD/build.sh"

        elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

            if [ \$(git -C "\$BUILD" describe --tags | gawk -F'_|-' '{gsub("\\\.|[a-z]",""); print \$1}' | gawk '{if(\$0 < 1000) {gsub("$","0"); print} else {print}}') -le "3113" ] && [ "\$LIBC" != "musl" ] || [ "\$ARCH" != "x86_64" ]; then

                sudo -E apt autoremove -y $LNXWXGTKPKG
                sudo -E apt install -y $LNXWXGTK30PKG

                WX_CONFIG_EXECUTABLE=\$(command -v wx-config wx-config-gtk3 2> /dev/null | head -n1)
                WX_LIBRARIES=\$(find /usr -name libwx_gtk3u*.so.* -printf "%p:" 2> /dev/null)

                BLDCMD="cmake .. -DNO_WEBVIEW=ON -DwxWidgets_CONFIG_EXECUTABLE=\$WX_CONFIG_EXECUTABLE -DwxWidgets_LIBRARIES=\$WX_LIBRARIES -DCMAKE_CXX_COMPILER="\$CCACHE_BIN_PATH"\$SLADEGXXOLDVER -DCMAKE_C_COMPILER="\$CCACHE_BIN_PATH"\$SLADEGCCOLDVER -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\$BUILD/build/AppDir/usr"

            else

                WX_CONFIG_EXECUTABLE=\$(command -v wx-config wx-config-gtk3 2> /dev/null | head -n1)
                WX_LIBRARIES=\$(find /usr -name libwx_gtk3u*.so.* -printf "%p:" 2> /dev/null)

                BLDCMD="cmake .. -DNO_WEBVIEW=ON -DwxWidgets_CONFIG_EXECUTABLE=\$WX_CONFIG_EXECUTABLE -DwxWidgets_LIBRARIES=\$WX_LIBRARIES -DCMAKE_CXX_COMPILER="\$CCACHE_BIN_PATH"\$GXXVER -DCMAKE_C_COMPILER="\$CCACHE_BIN_PATH"\$GCCVER -DBUILD_SHARED_LIBS=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\$BUILD/build/AppDir/usr"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ] || [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]; then

            BLDCMD="make CXX="\$CCACHE_BIN_PATH"\$GXXVER CPLUS_INCLUDE_PATH=/usr/include/\$ARCH-linux-gnu/. -k -j\$NCPU -C \$BUILD"

        elif [ "\$BUILD" = "\$BUILDPATH/aseprite" ]; then

            BLDCMD="cmake -S \$BUILD -B \$BUILD/build -DCMAKE_CXX_COMPILER="\$CCACHE_BIN_PATH"clang++ -DCMAKE_C_COMPILER="\$CCACHE_BIN_PATH"clang -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=\$BUILD/build/AppDir/usr -DBUILD_TESTING=OFF -DCLIP_TESTS=OFF -DCMARK_TESTS=OFF -DENABLE_TEST=OFF -DENABLE_TESTS=OFF -DFMT_CUDA_TEST=OFF -DFMT_TEST=OFF -DJSON11_BUILD_TESTS=OFF -DLAF_WITH_TESTS=OFF -DOBSERVABLE_TESTS=OFF -DPNG_TESTS=OFF -DUNDO_TESTS=OFF -Dtinyxml2_BUILD_TESTING=OFF -DCMAKE_CXX_FLAGS=-stdlib=libc++ -DCMAKE_EXE_LINKER_FLAGS=-stdlib=libc++ -DLAF_BACKEND=skia -DSKIA_DIR=\$SRB2BLDROOT/libraries/libskia -DSKIA_LIBRARY_DIR=\$SRB2BLDROOT/libraries/libskia/out/Release-x64 -DSKIA_LIBRARY=\$SRB2BLDROOT/libraries/libskia/out/Release-x64/libskia.a -DWEBP_LIBRARIES=\$SRB2BLDROOT/libraries/libskia/out/Release-x64/libwebp.a -DFREETYPE_LIBRARY=\$SRB2BLDROOT/libraries/libskia/out/Release-x64/libfreetype2.a -DHARFBUZZ_LIBRARY=\$SRB2BLDROOT/libraries/libskia/out/Release-x64/libharfbuzz.a -DSKSHAPER_LIBRARY=\$SRB2BLDROOT/libraries/libskia/out/Release-x64/libskshaper.a -G Ninja"

        else

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                BLDCMD="make CC="\$CCACHE_BIN_PATH"\$GCCVER C_INCLUDE_PATH=\$SRB2BLDPREFIX/include/.:\$SRB2BLDPREFIX/include/SDL2/.:\$SRB2BLDPREFIX/include/openvr/.:/usr/include/\$ARCH-linux-gnu/. LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme -k -j\$NCPU -C \$BUILD/src LINUX\$IS64=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1"

            else

                BLDCMD="make CC="\$CCACHE_BIN_PATH"\$GCCVER C_INCLUDE_PATH=\$SRB2BLDPREFIX/include/.:\$SRB2BLDPREFIX/include/SDL2/.:\$SRB2BLDPREFIX/include/openvr/.:/usr/include/\$ARCH-linux-gnu/. LIBGME_CFLAGS= LIBGME_LDFLAGS=-lgme -k -j\$NCPU -C \$BUILD/src LINUX\$IS64=1 NONX86=1 NOOBJDUMP=1 NOVERSION=1 NOUPX=1"

            fi

        fi

    fi

    if [ -n "\$UPGRADEBUILD" ] && [ -z "\$CUSTOMDIR" ]; then

        export CONF="\$(gawk '/---------------/ {gsub("---------------","");getline; print}' "\$SRB2BLDROOT/installed/\$UPGRADEBUILD")"

    elif [ -n "\$UPGRADEBUILD" ] && [ -n "\$CUSTOMDIR" ]; then

        export CONF="\$(gawk '/---------------/ {gsub("---------------","");getline; print}' "\$SRB2BLDROOT/installed/\$CUSTOMDIR")"

    # Otherwise set compilation flags, build and install as usual.
    else

        \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Preparing and displaying $BUILDNAME's configure options for compilation. Please wait..."

        # Display content of Makefile for a good view of available compilation flags.
        if [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

            cat "\$BUILD/README.md"

        elif [ "\$BUILD" = "\$BUILDPATH/kartmaker" ] || [ "\$BUILD" = "\$BUILDPATH/kartmaker-ring-racers" ] || [ "\$BUILD" = "\$BUILDPATH/followermaker" ]; then

            \$PRINTF "$NOTICE%s\n\e[0m" "No configs found for kartmaker/followermaker."

        elif [ "\$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print \$2}' "\$BUILD/src/doomdef.h" 2> /dev/null)" = "RingRacers" ]; then

            find "\$BUILD" -name "*.cmake" -executable -type f -exec gawk -i inplace '{gsub("\r","");print}' '{}' \;

            if [ "\$OS" = "Windows" ]; then

                \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading vcpkg's source code. Please wait..."
                git clone \$GITOPTS https://github.com/microsoft/vcpkg.git --recursive --branch "$LNXVCPKGVER" "\$VCPKG_ROOT"

            fi

            \$BLDCMD -LAH 2> /dev/null 2>&1 | gawk '{if(f)print} /-- Cache values/{f=1}' 2> /dev/null || true

        elif [ "\$BUILD" = "\$BUILDPATH/slade" ] || [ "\$BUILD" = "\$BUILDPATH/aseprite" ]; then

            \$BLDCMD -LAH 2>&1 | gawk '{if(f)print} /-- Cache values/{f=1}' 2> /dev/null

        elif [ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ] || [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]; then

            cat "\$BUILD/Makefile"

        else

            set +o noglob
            gawk '/^#/,/ / {print}' "\$BUILD/src/"*akefile
            set -o noglob

        fi

        \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please enter $BUILDNAME's space separated compilation flags and then press enter, or just press enter to begin compiling. Default command and flags for compilation:"
        \$PRINTF "$NOTICE%s\n\e[0m" "\$BLDCMD [YOUR-COMPILATION-FLAGS-WILL-BE-HERE]"
        \$PRINTF "$PROMPT\n%s\e[0m" "> "
        read -r CONF

    fi

    if [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /LINUX=1|LINUX64=1|MINGW=1|MINGW64=1|NONX86=1|UNIX=1|UNIXCOMMON=1|FREEBSD=1|CYGWIN32=1|SOLARIS=1|WATTCP=1|WINDOWS=1/) {print substr(\$0, RSTART, RLENGTH)}')" ]; then

        CONF=\$(\$PRINTF "%s\n" "\$CONF" | gawk '{gsub("LINUX=1|LINUX64=1|MINGW=1|MINGW64=1|NONX86=1|UNIX=1|UNIXCOMMON=1|FREEBSD=1|CYGWIN32=1|SOLARIS=1|WATTCP=1|WINDOWS=1",""); print}')
        \$PRINTF "$FAILURE\n%s\n\e[0m" "ERROR: Entering OS flags like LINUX64=1, MINGW=1 or FREEBSD=1 is not supported on this script. Exiting."
        exit

    fi

    # Download libbacktrace's source code, build and install it.
    if [ "\$OS" = "Linux" ] && [ "\$LIBC" = "musl" ] && [ "\$BUILD" != "\$BUILDPATH/wadcli" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker-ring-racers" ] && [ "\$BUILD" != "\$BUILDPATH/followermaker" ] && [ "\$BUILD" != "\$BUILDPATH/slade" ] && [ "\$BUILD" != "\$BUILDPATH/ultimatezonebuilder" ] && [ "\$BUILD" != "\$BUILDPATH/highvoltagering" ] && [ "\$BUILD" != "\$BUILDPATH/aseprite" ]; then

        if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" = "NixOS" ]; then

            LIBBACKTRACEPREFIX="\$SRB2BLDPREFIX"

        else

            LIBBACKTRACEPREFIX="\$SRB2BLDPREFIX/stow/libbacktrace"

        fi

        if [ ! -d "\$SRB2BLDROOT/libraries/libbacktrace/.git" ]; then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libbacktrace's source code. Please wait..."
            git clone \$GITOPTS https://github.com/ianlancetaylor/libbacktrace.git --recursive --branch "$LNXBACKTRACEVER" "\$SRB2BLDROOT/libraries/libbacktrace"

        else

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libbacktrace's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libbacktrace"
            git -C "\$SRB2BLDROOT/libraries/libbacktrace" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libbacktrace" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libbacktrace" checkout -q master

            if [ -n "\$ISNET" ]; then

                git -C "\$SRB2BLDROOT/libraries/libbacktrace" pull --recurse-submodules --rebase --autostash

            fi

            git -C "\$SRB2BLDROOT/libraries/libbacktrace" checkout -q "$LNXBACKTRACEVER"

        fi

        if [ ! -f \$SRB2BLDPREFIX/lib/libbacktrace.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libbacktrace/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libbacktrace" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libbacktrace/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libbacktrace. Please wait..."
            cd "\$SRB2BLDROOT/libraries/libbacktrace" || exit
            CC=""\$CCACHE_BIN_PATH"\$GCCVER" CXX=""\$CCACHE_BIN_PATH"\$GXXVER" "\$SRB2BLDROOT/libraries/libbacktrace/configure" --prefix="\$LIBBACKTRACEPREFIX" --enable-shared
            make -k -j"\$NCPU" -C "\$SRB2BLDROOT/libraries/libbacktrace"
            sudo -E make -C "\$SRB2BLDROOT/libraries/libbacktrace" install

            if [ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$LNXOSNAME" != "NixOS" ]; then

                sudo -E stow -v --adopt libbacktrace

            fi

            git -C "\$SRB2BLDROOT/libraries/libbacktrace" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libbacktrace" reset -q --hard

            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libbacktrace" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libbacktrace/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download libpng's source code, build and install it.
#    if [ "\$OS" = "Linux" ] && [ "\$LIBC" = "musl" ] && [ -z "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /NOPNG=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && [ "\$BUILD" != "\$BUILDPATH/wadcli" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker-ring-racers" ] && [ "\$BUILD" != "\$BUILDPATH/followermaker" ] && [ "\$BUILD" != "\$BUILDPATH/slade" ] && [ "\$BUILD" != "\$BUILDPATH/ultimatezonebuilder" ] && [ "\$BUILD" != "\$BUILDPATH/highvoltagering" ] && [ "\$BUILD" != "\$BUILDPATH/aseprite" ]; then
#
#        # Uninstall system's package libpng-dev to avoid conflicts with compiled libpng.
#        if [ "\$LIBC" = "musl" ]; then
#
#            sudo -E apk del libpng-dev
#
#        else
#
#            sudo -E apt autoremove -y libpng-dev
#
#        fi
#
#        if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" = "NixOS" ]; then
#
#            LIBPNGPREFIX="\$SRB2BLDPREFIX"
#
#        else
#
#            LIBPNGPREFIX="\$SRB2BLDPREFIX/stow/libpng"
#
#        fi
#
#        if [ ! -d "\$SRB2BLDROOT/libraries/libpng/.git" ]; then
#
#            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libpng's source code. Please wait..."
#            git clone \$GITOPTS git://git.code.sf.net/p/libpng/code.git --recursive --branch "$LNXPNGVER" "\$SRB2BLDROOT/libraries/libpng"
#
#        else
#
#            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libpng's source code. Please wait..."
#            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libpng"
#            git -C "\$SRB2BLDROOT/libraries/libpng" clean -qdffx -e .comrev
#            git -C "\$SRB2BLDROOT/libraries/libpng" reset -q --hard
#            git -C "\$SRB2BLDROOT/libraries/libpng" checkout -q master
#
#            if [ -n "\$ISNET" ]; then
#
#                git -C "\$SRB2BLDROOT/libraries/libpng" pull --recurse-submodules --rebase --autostash
#
#            fi
#
#            git -C "\$SRB2BLDROOT/libraries/libpng" checkout -q "$LNXPNGVER"
#
#        fi
#
#        if [ ! -f \$SRB2BLDPREFIX/lib/libpng.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libpng/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libpng" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libpng/.comrev" 2> /dev/null)" ]); then
#
#            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libpng. Please wait..."
#            cd "\$SRB2BLDROOT/libraries/libpng" || exit
#            CC=""\$CCACHE_BIN_PATH"\$GCCVER" CXX=""\$CCACHE_BIN_PATH"\$GXXVER" "\$SRB2BLDROOT/libraries/libpng/configure" --prefix="\$LIBPNGPREFIX"
#            make -k -j"\$NCPU" -C "\$SRB2BLDROOT/libraries/libpng"
#            sudo -E make -C "\$SRB2BLDROOT/libraries/libpng" install
#
#            if [ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$LNXOSNAME" != "NixOS" ]; then
#
#                sudo -E stow -v --adopt libpng
#
#            fi
#
#            git -C "\$SRB2BLDROOT/libraries/libpng" clean -qdffx -e .comrev
#            git -C "\$SRB2BLDROOT/libraries/libpng" reset -q --hard
#
#            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libpng" rev-parse --short HEAD)
#            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libpng/.comrev"
#            cd "\$BUILD" || exit
#
#        fi
#
#    fi

    # Download libpng12's source code, build and install it.
    if [ "\$OS" = "Linux" ] && [ -z "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /NOPNG=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && ([ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]); then

        # Uninstall system's package libpng-dev to avoid conflicts with compiled libpng.
#        if [ "\$LIBC" = "musl" ]; then
#
#            sudo -E apk del libpng-dev
#
#        else
#
#            sudo -E apt remove -y libpng-dev
#
#        fi

        if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" = "NixOS" ]; then

            LIBPNG12PREFIX="\$SRB2BLDPREFIX"

        else

            LIBPNG12PREFIX="\$SRB2BLDPREFIX/stow/libpng12"

        fi

        if [ ! -d "\$SRB2BLDROOT/libraries/libpng12/.git" ]; then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libpng12's source code. Please wait..."
            git clone \$GITOPTS git://git.code.sf.net/p/libpng/code.git --recursive --branch "$LNXPNG12VER" "\$SRB2BLDROOT/libraries/libpng12"

        else

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libpng12's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libpng12"
            git -C "\$SRB2BLDROOT/libraries/libpng12" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libpng12" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libpng12" checkout -q master

            if [ -n "\$ISNET" ]; then

                git -C "\$SRB2BLDROOT/libraries/libpng12" pull --recurse-submodules --rebase --autostash

            fi

            git -C "\$SRB2BLDROOT/libraries/libpng12" checkout -q "$LNXPNG12VER"

        fi

        if [ ! -f \$SRB2BLDPREFIX/lib/libpng12.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libpng12/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libpng12" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libpng12/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libpng12. Please wait..."
            cd "\$SRB2BLDROOT/libraries/libpng12" || exit
            CC=""\$CCACHE_BIN_PATH"\$GCCVER" CXX=""\$CCACHE_BIN_PATH"\$GXXVER" "\$SRB2BLDROOT/libraries/libpng12/configure" --prefix="\$LIBPNG12PREFIX"
            make -k -j"\$NCPU" -C "\$SRB2BLDROOT/libraries/libpng12"
            sudo -E make -C "\$SRB2BLDROOT/libraries/libpng12" install

            if [ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$LNXOSNAME" != "NixOS" ]; then

                sudo -E stow -v --adopt libpng12

            fi

            git -C "\$SRB2BLDROOT/libraries/libpng12" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libpng12" reset -q --hard

            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libpng12" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libpng12/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download libopenmpt's source code, build and install it.
#    if [ -z "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /NOOPENMPT=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && [ -n "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /HAVE_MIXERX=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && [ "\$BUILD" != "\$BUILDPATH/wadcli" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker-ring-racers" ] && [ "\$BUILD" != "\$BUILDPATH/followermaker" ] && [ "\$BUILD" != "\$BUILDPATH/slade" ] && [ "\$BUILD" != "\$BUILDPATH/ultimatezonebuilder" ] && [ "\$BUILD" != "\$BUILDPATH/highvoltagering" ] && [ "\$BUILD" != "\$BUILDPATH/aseprite" ]; then
#
#        # Uninstall system's package libopenmpt-dev to avoid conflicts with compiled libopenmpt.
#        if [ "\$LIBC" = "musl" ]; then
#
#            sudo -E apk del libopenmpt-dev
#
#        else
#
#            sudo -E apt autoremove -y libopenmpt-dev
#
#        fi
#
#        if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" = "NixOS" ]; then
#
#            LIBOPENMPTPREFIX="\$SRB2BLDPREFIX"
#
#        else
#
#            LIBOPENMPTPREFIX="\$SRB2BLDPREFIX/stow/libopenmpt"
#
#        fi
#
#        if [ ! -d "\$SRB2BLDROOT/libraries/libopenmpt/.git" ]; then
#
#            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libopenmpt's source code. Please wait..."
#            git clone \$GITOPTS https://github.com/OpenMPT/openmpt.git --recursive --branch "$LNXOPENMPTVER" "\$SRB2BLDROOT/libraries/libopenmpt"
#
#        else
#
#            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libopenmpt's source code. Please wait..."
#            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libopenmpt"
#            git -C "\$SRB2BLDROOT/libraries/libopenmpt" clean -qdffx -e .comrev
#            git -C "\$SRB2BLDROOT/libraries/libopenmpt" reset -q --hard
#            git -C "\$SRB2BLDROOT/libraries/libopenmpt" checkout -q master
#
#            if [ -n "\$ISNET" ]; then
#
#                git -C "\$SRB2BLDROOT/libraries/libopenmpt" pull --recurse-submodules --rebase --autostash
#
#            fi
#
#            git -C "\$SRB2BLDROOT/libraries/libopenmpt" checkout -q "$LNXOPENMPTVER"
#
#        fi
#
#        if [ ! -f \$SRB2BLDPREFIX/lib/libopenmpt.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libopenmpt/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libopenmpt" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libopenmpt/.comrev" 2> /dev/null)" ]); then
#
#            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libopenmpt. Please wait..."
#            gawk -i inplace '{gsub("DYNLINK=1","DYNLINK=0"); gsub("STATIC_LIB=1","STATIC_LIB=0"); gsub("EXAMPLES=1","EXAMPLES=0"); gsub("OPENMPT123=1","OPENMPT123=0"); gsub("TEST=1","TEST=0"); print}' "\$SRB2BLDROOT/libraries/libopenmpt/Makefile"
#            CC=""\$CCACHE_BIN_PATH"\$GCCVER" CXX=""\$CCACHE_BIN_PATH"\$GXXVER" make -k -j\$((\$(nproc) + 1)) -C "\$SRB2BLDROOT/libraries/libopenmpt" NO_PORTAUDIO=1 NO_PORTAUDIOCPP=1 NO_SNDFILE=1 NO_FLAC=1
#            sudo make -C "\$SRB2BLDROOT/libraries/libopenmpt" PREFIX="\$LIBOPENMPTPREFIX" install
#
#            if [ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$LNXOSNAME" != "NixOS" ]; then
#
#                sudo -E stow -v --adopt libopenmpt
#
#            fi
#
#            git -C "\$SRB2BLDROOT/libraries/libopenmpt" clean -qdffx -e .comrev
#            git -C "\$SRB2BLDROOT/libraries/libopenmpt" reset -q --hard
#
#            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libopenmpt" rev-parse --short HEAD)
#            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libopenmpt/.comrev"
#            cd "\$BUILD" || exit
#
#        fi
#
#    fi

    # Download libgme's source code, build and install it.
    if [ "\$OS" = "Linux" ] && [ -z "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /NOGME=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && [ -n "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /HAVE_MIXERX=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && [ "\$BUILD" != "\$BUILDPATH/wadcli" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker-ring-racers" ] && [ "\$BUILD" != "\$BUILDPATH/followermaker" ] && [ "\$BUILD" != "\$BUILDPATH/slade" ] && [ "\$BUILD" != "\$BUILDPATH/ultimatezonebuilder" ] && [ "\$BUILD" != "\$BUILDPATH/highvoltagering" ] && [ "\$BUILD" != "\$BUILDPATH/aseprite" ]; then

        # Uninstall system's package libgme-dev to avoid conflicts with compiled libgme.
        if [ "\$LIBC" = "musl" ]; then

            sudo -E apk del libgme-dev

        else

            sudo -E apt autoremove -y libgme-dev

        fi

        if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" = "NixOS" ]; then

            LIBGMEPREFIX="\$SRB2BLDPREFIX"

        else

            LIBGMEPREFIX="\$SRB2BLDPREFIX/stow/libgme"

        fi

        if [ ! -d "\$SRB2BLDROOT/libraries/libgme/.git" ]; then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libgme's source code. Please wait..."
            git clone \$GITOPTS https://bitbucket.org/mpyne/game-music-emu.git --recursive --branch "$LNXGMEVER" "\$SRB2BLDROOT/libraries/libgme"

        else

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libgme's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libgme"
            git -C "\$SRB2BLDROOT/libraries/libgme" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libgme" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libgme" checkout -q master

            if [ -n "\$ISNET" ]; then

                git -C "\$SRB2BLDROOT/libraries/libgme" pull --recurse-submodules --rebase --autostash

            fi

            git -C "\$SRB2BLDROOT/libraries/libgme" checkout -q "$LNXGMEVER"

        fi

        if [ ! -f \$SRB2BLDPREFIX/lib/libgme.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libgme/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libgme" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libgme/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libgme. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/libgme/build"
            cd "\$SRB2BLDROOT/libraries/libgme/build" || exit
            gawk -i inplace 'BEGIN { del=0 } /4.1 had poor support for symbol visibility/ { del=2 } del<=0 { print } /endif()/ { del -= 1 }' "\$SRB2BLDROOT/libraries/libgme/CMakeLists.txt"
#            cmake -S "\$SRB2BLDROOT/libraries/libgme" -B "\$SRB2BLDROOT/libraries/libgme/build" -DGME_YM2612_EMU=MAME -DENABLE_UBSAN=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="\$LIBGMEPREFIX"
            cmake .. -DCMAKE_C_COMPILER=""\$CCACHE_BIN_PATH"\$GCCVER" -DCMAKE_CXX_COMPILER=""\$CCACHE_BIN_PATH"\$GXXVER" -DGME_YM2612_EMU=MAME -DENABLE_UBSAN=OFF -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="\$LIBGMEPREFIX"
#            cmake --build "\$SRB2BLDROOT/libraries/libgme/build" -j"\$NCPU" --config Release
#            sudo -E cmake --install "\$SRB2BLDROOT/libraries/libgme/build"
            CC="\$GCCVER" make -k -j"\$NCPU" -C "\$SRB2BLDROOT/libraries/libgme/build"
            sudo make -C "\$SRB2BLDROOT/libraries/libgme/build" install

            if [ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$LNXOSNAME" != "NixOS" ]; then

                sudo -E stow -v --adopt libgme

            fi

            git -C "\$SRB2BLDROOT/libraries/libgme" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libgme" reset -q --hard

            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libgme" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libgme/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download libfluidsynth's source code, build and install it.
    if [ "\$OS" = "Linux" ] && [ -z "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /NOGME=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && [ -n "\$(\$PRINTF "%s\n" "\$CONF" | gawk 'match(\$0, /HAVE_MIXERX=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && [ "\$BUILD" != "\$BUILDPATH/wadcli" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker-ring-racers" ] && [ "\$BUILD" != "\$BUILDPATH/followermaker" ] && [ "\$BUILD" != "\$BUILDPATH/slade" ] && [ "\$BUILD" != "\$BUILDPATH/ultimatezonebuilder" ] && [ "\$BUILD" != "\$BUILDPATH/highvoltagering" ] && [ "\$BUILD" != "\$BUILDPATH/aseprite" ]; then

        # Uninstall system's package libfluidsynth-dev to avoid conflicts with compiled libfluidsynth.
        if [ "\$LIBC" = "musl" ]; then

            sudo -E apk del fluidsynth-dev
            sudo -E apk add glib-dev

        else

            sudo -E apt autoremove -y libfluidsynth-dev

        fi

        if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" = "NixOS" ]; then

            LIBFLUIDSYNTHPREFIX="\$SRB2BLDPREFIX"

        else

            LIBFLUIDSYNTHPREFIX="\$SRB2BLDPREFIX/stow/libfluidsynth"

        fi

        if [ ! -d "\$SRB2BLDROOT/libraries/libfluidsynth/.git" ]; then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libfluidsynth's source code. Please wait..."
            git clone \$GITOPTS https://github.com/FluidSynth/fluidsynth --recursive --branch "v$LNXFLUIDSYNTHVER" "\$SRB2BLDROOT/libraries/libfluidsynth"

        else

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libfluidsynth's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libfluidsynth"
            git -C "\$SRB2BLDROOT/libraries/libfluidsynth" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libfluidsynth" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libfluidsynth" checkout -q master

            if [ -n "\$ISNET" ]; then

                git -C "\$SRB2BLDROOT/libraries/libfluidsynth" pull --recurse-submodules --rebase --autostash

            fi

            git -C "\$SRB2BLDROOT/libraries/libfluidsynth" checkout -q "v$LNXFLUIDSYNTHVER"

        fi

        if [ ! -f \$SRB2BLDPREFIX/lib/libfluidsynth.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libfluidsynth/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libfluidsynth" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libfluidsynth/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libfluidsynth. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/libfluidsynth/build"
            cd "\$SRB2BLDROOT/libraries/libfluidsynth/build" || exit
            cmake .. -DCMAKE_C_COMPILER=""\$CCACHE_BIN_PATH"\$GCCVER" -DCMAKE_CXX_COMPILER=""\$CCACHE_BIN_PATH"\$GXXVER" -DCMAKE_BUILD_TYPE=Release -DLIB_INSTALL_DIR=lib -DCMAKE_INSTALL_PREFIX="\$LIBFLUIDSYNTHPREFIX"
            CC="\$GCCVER" make -k -j"\$NCPU" -C "\$SRB2BLDROOT/libraries/libfluidsynth/build"
            sudo make -C "\$SRB2BLDROOT/libraries/libfluidsynth/build" install

            if [ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$LNXOSNAME" != "NixOS" ]; then

                sudo -E stow -v --adopt libfluidsynth

            fi

            git -C "\$SRB2BLDROOT/libraries/libfluidsynth" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libfluidsynth" reset -q --hard

            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libfluidsynth" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libfluidsynth/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download libSDL2_mixerX's source code, build and install it.
    if [ "\$OS" = "Linux" ] && [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /HAVE_MIXERX=1/) {print substr(\$0, RSTART, RLENGTH)}')" ]; then

        if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" = "NixOS" ]; then

            LIBSDL2MIXERXPREFIX="\$SRB2BLDPREFIX"

        else

            LIBSDL2MIXERXPREFIX="\$SRB2BLDPREFIX/stow/libsdl2-mixerx"

        fi

        if [ ! -d "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.git" ]; then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libSDL2_mixerX's source code. Please wait..."
            git clone \$GITOPTS https://github.com/WohlSoft/SDL-Mixer-X.git --recursive --branch "$LNXSDL2MIXERXVER" "\$SRB2BLDROOT/libraries/libsdl2-mixerx"

        else

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libSDL2_mixerX's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libsdl2-mixerx"
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q master

            if [ -n "\$ISNET" ]; then

                git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" pull --recurse-submodules --rebase --autostash

            fi

            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q "$LNXSDL2MIXERXVER"

        fi

        if [ ! -f \$SRB2BLDPREFIX/lib/libSDL2_mixer_ext.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libSDL2_mixerX. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
            cd "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build" || exit
#            cmake -S "\$SRB2BLDROOT/libraries/libsdl2-mixerx" -B "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build" -DCMAKE_C_COMPILER=\$GCCVER -DCMAKE_CXX_COMPILER=\$GXXVER -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DDOWNLOAD_AUDIO_CODECS_DEPENDENCY=OFF -DAUDIO_CODECS_BUILD_LOCAL_SDL2=OFF -DUSE_SYSTEM_SDL2=ON -DSDL_MIXER_X_STATIC=OFF -DUSE_GME=ON -DUSE_MIDI=ON -DUSE_MIDI_FLUIDSYNTH=ON -DUSE_MIDI_FLUIDLITE=OFF -DUSE_MIDI_TIMIDITY=ON -DUSE_MIDI_OPNMIDI=OFF -DUSE_MIDI_ADLMIDI=OFF -DUSE_MIDI_EDMIDI=OFF -DUSE_MIDI_NATIVE=OFF -DUSE_SYSTEM_AUDIO_LIBRARIES=ON -DMIXERX_ENABLE_LGPL=ON -DMIXERX_ENABLE_GPL=ON -DUSE_FLAC=OFF -DUSE_MP3_MPG123=OFF -DCMAKE_INSTALL_PREFIX="\$LIBSDL2MIXERXPREFIX"
            cmake .. -DCMAKE_C_COMPILER=""\$CCACHE_BIN_PATH"\$GCCVER" -DCMAKE_CXX_COMPILER=""\$CCACHE_BIN_PATH"\$GXXVER" -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DUSE_SYSTEM_AUDIO_LIBRARIES=ON -DDOWNLOAD_AUDIO_CODECS_DEPENDENCY=OFF -DAUDIO_CODECS_BUILD_LOCAL_SDL2=OFF -DSDL_MIXER_X_SHARED=ON -DSDL_MIXER_X_STATIC=OFF -DUSE_SYSTEM_SDL2=ON -DUSE_GME=ON -DUSE_FLAC=OFF -DUSE_DRFLAC=OFF -DUSE_MP3_MPG123=OFF -DUSE_MP3_MINIMP3=OFF -DUSE_OGG_VORBIS=ON -DUSE_XMP=OFF -DUSE_MODPLUG=ON -DUSE_MODPLUG_STATIC=OFF -DUSE_OPUS=OFF -DUSE_MIDI=ON -DUSE_MIDI_FLUIDSYNTH=ON -DUSE_MIDI_FLUIDLITE=OFF -DUSE_MIDI_TIMIDITY=ON -DUSE_MIDI_OPNMIDI=OFF -DUSE_MIDI_ADLMIDI=OFF -DUSE_MIDI_NATIVE=OFF -DGME_INCLUDE_DIR="\$SRB2BLDPREFIX/include/gme" -DGME_LIBRARY="\$SRB2BLDPREFIX/lib/libgme.so" -DCMAKE_INSTALL_PREFIX="\$LIBSDL2MIXERXPREFIX"

#            cmake --build "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build" -j"\$NCPU" --config Release
#            sudo -E cmake --install "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
            make -k -j"\$NCPU" -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
            sudo make -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx/build" install

            if [ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$LNXOSNAME" != "NixOS" ]; then

                sudo -E stow -v --adopt libsdl2-mixerx

            fi

            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" reset -q --hard

            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libsdl2-mixerx" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download DiscordRPC source code, build and install it.
    if [ -n "\$(\$PRINTF "%s\n" \$CONF | gawk 'match(\$0, /HAVE_DISCORDRPC=1/) {print substr(\$0, RSTART, RLENGTH)}')" ] && ([ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-rphys" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-tsourdt3rd" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$(dirname \$BUILD)" = "\$BUILDPATH/srb2-custom" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-galaxy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-hep" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-saturn" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-neptune" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]); then

        if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" = "NixOS" ]; then

            DISCORDRPCPREFIX="\$SRB2BLDPREFIX"

        else

            DISCORDRPCPREFIX="\$SRB2BLDPREFIX/stow/discord-rpc"

        fi

        if [ ! -d "\$SRB2BLDROOT/libraries/discord-rpc/.git" ]; then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading DiscordRPC's source code. Please wait..."
            git clone \$GITOPTS https://github.com/discord/discord-rpc.git --recursive --branch "$LNXDISCORDRPCVER" "\$SRB2BLDROOT/libraries/discord-rpc"

        else

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up DiscordRPC's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/discord-rpc"
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" checkout -q master

            if [ -n "\$ISNET" ]; then

                git -C "\$SRB2BLDROOT/libraries/discord-rpc" pull --recurse-submodules --rebase --autostash

            fi

            git -C "\$SRB2BLDROOT/libraries/discord-rpc" checkout -q "$LNXDISCORDRPCVER"

        fi

        mkdir -p "\$SRB2BLDROOT/libraries/discord-rpc/build"
        cd "\$SRB2BLDROOT/libraries/discord-rpc/build" || exit

        if [ "\$OS" = "Windows" ]; then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing DiscordRPC. Please wait..."

            if [ -n "\$ISNET" ]; then

                DISCORDRPCURL="\$(curl -s https://api.github.com/repos/discord/discord-rpc/releases/latest | gawk -F'"' '/browser_download_url.*discord-rpc-win.zip/ {print \$4}')"
                curl -RL "\$DISCORDRPCURL" > "\$SRB2BLDROOT/libraries/discord-rpc/discord-rpc-win.zip"

            fi

            if ([ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ]) || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

                7z e -y "\$SRB2BLDROOT/libraries/discord-rpc/discord-rpc-win.zip" "discord-rpc/win32-dynamic/bin/discord-rpc.dll" -o"\$BUILD/build/AppDir/usr/lib"

            else

                7z e -y "\$SRB2BLDROOT/libraries/discord-rpc/discord-rpc-win.zip" "discord-rpc/win64-dynamic/bin/discord-rpc.dll" -o"\$BUILD/build/AppDir/usr/lib"

            fi

        elif [ "\$OS" = "Linux" ] && ([ ! -f \$SRB2BLDPREFIX/lib/libdiscord-rpc.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/discord-rpc/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/discord-rpc" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/discord-rpc/.comrev" 2> /dev/null)" ])); then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing DiscordRPC. Please wait..."
#            cmake -S "\$SRB2BLDROOT/libraries/discord-rpc" -B "\$SRB2BLDROOT/libraries/discord-rpc/build" -DBUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX="\$DISCORDRPCPREFIX"
            cmake .. -DCMAKE_C_COMPILER=""\$CCACHE_BIN_PATH"\$GCCVER" -DCMAKE_CXX_COMPILER=""\$CCACHE_BIN_PATH"\$GXXVER" -DBUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="\$DISCORDRPCPREFIX"
            make -k -j"\$NCPU" -C "\$SRB2BLDROOT/libraries/discord-rpc/build"
            sudo make -C "\$SRB2BLDROOT/libraries/discord-rpc/build" install
#            cmake --build "\$SRB2BLDROOT/libraries/discord-rpc/build" -j"\$NCPU" --config Release
#            sudo -E cmake --install "\$SRB2BLDROOT/libraries/discord-rpc/build"

            if [ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$LNXOSNAME" != "NixOS" ]; then

                sudo -E stow -v --adopt discord-rpc

            fi

            git -C "\$SRB2BLDROOT/libraries/discord-rpc" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/discord-rpc" reset -q --hard

            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/discord-rpc" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/discord-rpc/.comrev"

        fi

        cd "\$BUILD" || exit

    fi

    # Download libopenvr's source code, build and install it.
    if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" = "NixOS" ]; then

            LIBOPENVRPREFIX="\$SRB2BLDPREFIX"

        else

            LIBOPENVRPREFIX="\$SRB2BLDPREFIX/stow/libopenvr"

        fi

        if [ ! -d "\$SRB2BLDROOT/libraries/libopenvr/.git" ]; then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libopenvr's source code. Please wait..."
            git clone \$GITOPTS https://github.com/ValveSoftware/openvr.git --recursive --branch "v$LNXOPENVRVER" "\$SRB2BLDROOT/libraries/libopenvr"

        else

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libopenvr's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libopenvr"
            git -C "\$SRB2BLDROOT/libraries/libopenvr" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libopenvr" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/libopenvr" checkout -q master

            if [ -n "\$ISNET" ]; then

                git -C "\$SRB2BLDROOT/libraries/libopenvr" pull --recurse-submodules --rebase --autostash

            fi

            git -C "\$SRB2BLDROOT/libraries/libopenvr" checkout -q "v$LNXOPENVRVER"

        fi

        if [ "\$OS" = "Windows" ]; then

            cp -f "\$SRB2BLDROOT/libraries/libopenvr/bin/win32/openvr_api.dll" "\$BUILD/build/AppDir/usr/lib"

        elif [ "\$OS" = "Linux" ] && [ ! -f \$SRB2BLDPREFIX/lib/libopenvr_api.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libopenvr/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libopenvr" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libopenvr/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libopenvr. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/libopenvr/build"
            cp -rf "\$SRB2BLDROOT/libraries/libopenvr/src/vrcommon" "\$SRB2BLDROOT/libraries/libopenvr/src/vrcore"
            cd "\$SRB2BLDROOT/libraries/libopenvr/build" || exit
#            cmake -S "\$SRB2BLDROOT/libraries/libopenvr" -B "\$SRB2BLDROOT/libraries/libopenvr/build" -DBUILD_UNIVERSAL=OFF -DBUILD_SHARED=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="\$LIBOPENVRPREFIX"
            cmake .. -DCMAKE_C_COMPILER=""\$CCACHE_BIN_PATH"gcc" -DCMAKE_CXX_COMPILER=""\$CCACHE_BIN_PATH"g++" -DBUILD_UNIVERSAL=OFF -DBUILD_SHARED=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="\$LIBOPENVRPREFIX"
#            cmake --build "\$SRB2BLDROOT/libraries/libopenvr/build" -j"\$NCPU" --config Release
#            sudo -E cmake --install "\$SRB2BLDROOT/libraries/libopenvr/build"
            make -k -j"\$NCPU" -C "\$SRB2BLDROOT/libraries/libopenvr/build"
            sudo make -C "\$SRB2BLDROOT/libraries/libopenvr/build" install

            if [ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$LNXOSNAME" != "NixOS" ]; then

                sudo -E stow -v --adopt libopenvr

            fi

            git -C "\$SRB2BLDROOT/libraries/libopenvr" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/libopenvr" reset -q --hard

            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libopenvr" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libopenvr/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

    # Download liblzf's source code, build and install it.
    if [ "\$OS" = "Linux" ] && [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" = "NixOS" ]; then

            LIBLZFPREFIX="\$SRB2BLDPREFIX"

        else

            LIBLZFPREFIX="\$SRB2BLDPREFIX/stow/liblzf"

        fi

        if [ ! -d "\$SRB2BLDROOT/libraries/liblzf/.git" ]; then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading liblzf's source code. Please wait..."
            git clone \$GITOPTS https://salsa.debian.org/debian/liblzf.git --recursive --branch "$LNXLZFVER" "\$SRB2BLDROOT/libraries/liblzf"

        else

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up liblzf's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/liblzf"
            git -C "\$SRB2BLDROOT/libraries/liblzf" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/liblzf" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/liblzf" checkout -q master

            if [ -n "\$ISNET" ]; then

                git -C "\$SRB2BLDROOT/libraries/liblzf" pull --recurse-submodules --rebase --autostash

            fi

            git -C "\$SRB2BLDROOT/libraries/liblzf" checkout -q "$LNXLZFVER"

        fi

        if [ ! -f \$SRB2BLDPREFIX/lib/liblzf.a ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/liblzf/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/liblzf" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/liblzf/.comrev" 2> /dev/null)" ]); then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing liblzf. Please wait..."
            cd "\$SRB2BLDROOT/libraries/liblzf" || exit
            cp -rf "\$SRB2BLDROOT/libraries/liblzf/debian/extras/"* "\$SRB2BLDROOT/libraries/liblzf"
            patch -Np1 -i "\$SRB2BLDROOT/libraries/liblzf/debian/patches/"*.patch
            CC=""\$CCACHE_BIN_PATH"\$GCCVER" CXX=""\$CCACHE_BIN_PATH"\$GXXVER" "\$SRB2BLDROOT/libraries/liblzf/configure" --prefix="\$LIBLZFPREFIX" --includedir="\$LIBLZFPREFIX/include/liblzf"
            make -k -j"\$NCPU" -C "\$SRB2BLDROOT/libraries/liblzf"
            sudo make -C "\$SRB2BLDROOT/libraries/liblzf" install

            if [ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$LNXOSNAME" != "NixOS" ]; then

                sudo -E stow -v --adopt liblzf

            fi

            git -C "\$SRB2BLDROOT/libraries/liblzf" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/liblzf" reset -q --hard

            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/liblzf" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/liblzf/.comrev"
            cd "\$BUILD" || exit

        fi

    fi

#    # Download libyuv's source code, build and install it.
#    if [ "\$OS" = "Linux" ] && ([ "\$BUILD" = "\$BUILDPATH/ring-racers" ] || [ "\$BUILD" = "\$BUILDPATH/ring-racers-noire" ]); then
#
#        # Uninstall system's package libfluidsynth-dev to avoid conflicts with compiled libfluidsynth.
#        if [ "\$LIBC" = "musl" ]; then
#
#            sudo -E apk del fluidsynth-dev
#            sudo -E apk add glib-dev
#
#        else
#
#            sudo -E apt autoremove -y libjpeg-dev
#            sudo -E apt install -y libjpeg62-dev
#
#        fi
#
#        if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" = "NixOS" ]; then
#
#            LIBYUVPREFIX="\$SRB2BLDPREFIX"
#
#        else
#
#            LIBYUVPREFIX="\$SRB2BLDPREFIX/stow/libyuv"
#
#        fi
#
#        if [ ! -d "\$SRB2BLDROOT/libraries/libyuv/.git" ]; then
#
#            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libyuv's source code. Please wait..."
#            git clone \$GITOPTS https://chromium.googlesource.com/libyuv/libyuv --recursive --branch "$LNXYUVVER" "\$SRB2BLDROOT/libraries/libyuv"
#
#        else
#
#            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libyuv's source code. Please wait..."
#            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libyuv"
#            git -C "\$SRB2BLDROOT/libraries/libyuv" clean -qdffx -e .comrev
#            git -C "\$SRB2BLDROOT/libraries/libyuv" reset -q --hard
#            git -C "\$SRB2BLDROOT/libraries/libyuv" checkout -q main
#
#            if [ -n "\$ISNET" ]; then
#
#                git -C "\$SRB2BLDROOT/libraries/libyuv" pull --recurse-submodules --rebase --autostash
#
#            fi
#
#            git -C "\$SRB2BLDROOT/libraries/libyuv" checkout -q "$LNXYUVVER"
#
#        fi
#
#        if [ ! -f \$SRB2BLDPREFIX/lib/libyuv.so ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libyuv/.comrev" 2> /dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libyuv" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libyuv/.comrev" 2> /dev/null)" ]); then
#
#            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libyuv. Please wait..."
#            mkdir -p "\$SRB2BLDROOT/libraries/libyuv/build"
#            cd "\$SRB2BLDROOT/libraries/libyuv/build" || exit
#            cmake .. -DCMAKE_C_COMPILER=""\$CCACHE_BIN_PATH"\$GCCVER" -DCMAKE_CXX_COMPILER=""\$CCACHE_BIN_PATH"\$GXXVER" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="\$LIBYUVPREFIX"
#            CC="\$GCCVER" make -k -j"\$NCPU" -C "\$SRB2BLDROOT/libraries/libyuv/build"
#            sudo make -C "\$SRB2BLDROOT/libraries/libyuv/build" install
#
#            if [ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$LNXOSNAME" != "NixOS" ]; then
#
#                sudo -E stow -v --adopt libyuv
#
#            fi
#
#            git -C "\$SRB2BLDROOT/libraries/libyuv" clean -qdffx -e .comrev
#            git -C "\$SRB2BLDROOT/libraries/libyuv" reset -q --hard
#
#            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libyuv" rev-parse --short HEAD)
#            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/libyuv/.comrev"
#            cd "\$BUILD" || exit
#
#        fi
#
#    fi

    # Download libskia's source code, build and install it.
    if [ "\$OS" = "Linux" ] && [ "\$BUILD" = "\$BUILDPATH/aseprite" ]; then

          # Download Google Depot Tools' source code, build and install it.
          if [ ! -d "\$SRB2BLDROOT/libraries/depot_tools/.git" ]; then

               \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading Google Depot Tools' source code. Please wait..."
               git clone \$GITOPTS https://chromium.googlesource.com/chromium/tools/depot_tools.git --recursive --branch "$LNXDEPOTTOOLSVER" "\$SRB2BLDROOT/libraries/depot_tools"

          else

               \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up Google Depot Tools' source code. Please wait..."
               git config --global --add safe.directory "\$SRB2BLDROOT/libraries/depot_tools"
               git -C "\$SRB2BLDROOT/libraries/depot_tools" clean -qdffx -e .comrev
               git -C "\$SRB2BLDROOT/libraries/depot_tools" reset -q --hard
               git -C "\$SRB2BLDROOT/libraries/depot_tools" checkout -q main

               if [ -n "\$ISNET" ]; then

                    git -C "\$SRB2BLDROOT/libraries/depot_tools" pull --recurse-submodules --rebase --autostash

               fi

               git -C "\$SRB2BLDROOT/libraries/depot_tools" checkout -q "$LNXDEPOTTOOLSVER"

          fi

          if [ -n "\$(cat "\$SRB2BLDROOT/libraries/depot_tools/.comrev" 2>/dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/depot_tools" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/depot_tools/.comrev" 2>/dev/null)" ]; then

               \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing depot_tools. Please wait..."
               git -C "\$SRB2BLDROOT/libraries/depot_tools" clean -qdffx -e .comrev
               git -C "\$SRB2BLDROOT/libraries/depot_tools" reset -q --hard

               COMREV=\$(git -C "\$SRB2BLDROOT/libraries/depot_tools" rev-parse --short HEAD)
               \$PRINTF "%s\n" "\$COMREV" >"\$SRB2BLDROOT/libraries/depot_tools/.comrev"

          fi

          # Download libskia's source code, build and install it.
          if [ ! -d "\$SRB2BLDROOT/libraries/libskia/.git" ]; then

               \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libskia's source code. Please wait..."
               git clone \$GITOPTS https://github.com/aseprite/skia.git --recursive --branch "$LNXSKIAVER" "\$SRB2BLDROOT/libraries/libskia"

          else

               \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libskia's source code. Please wait..."
               git config --global --add safe.directory "\$SRB2BLDROOT/libraries/libskia"
               git -C "\$SRB2BLDROOT/libraries/libskia" reset -q --hard
               git -C "\$SRB2BLDROOT/libraries/libskia" checkout -q master

               if [ -n "\$ISNET" ]; then

                    git -C "\$SRB2BLDROOT/libraries/libskia" pull --recurse-submodules --rebase --autostash

               fi

               git -C "\$SRB2BLDROOT/libraries/libskia" checkout -q "$LNXSKIAVER"

          fi

          if [ ! -f "\$SRB2BLDROOT/libraries/libskia/out/Release-x64/libskia.a" ] || ([ -n "\$(cat "\$SRB2BLDROOT/libraries/libskia/.comrev" 2>/dev/null)" ] && [ "\$(git -C "\$SRB2BLDROOT/libraries/libskia" rev-parse --short HEAD)" != "\$(cat "\$SRB2BLDROOT/libraries/libskia/.comrev" 2>/dev/null)" ]); then

               \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libskia. Please wait..."
               git -C "\$SRB2BLDROOT/libraries/libskia" clean -qdffx -e .comrev
               git -C "\$SRB2BLDROOT/libraries/libskia" reset -q --hard

               cd "\$SRB2BLDROOT/libraries/libskia" || exit
               python3 "\$SRB2BLDROOT/libraries/libskia/tools/git-sync-deps"
               \$SRB2BLDROOT/libraries/depot_tools/gn gen "\$SRB2BLDROOT/libraries/libskia/out/Release-x64" --args='is_debug=false is_official_build=true skia_use_system_expat=false skia_use_system_icu=false skia_use_system_libjpeg_turbo=false skia_use_system_libpng=false skia_use_system_libwebp=false skia_use_system_zlib=false skia_use_sfntly=false skia_use_freetype=true skia_use_harfbuzz=true skia_pdf_subset_harfbuzz=true skia_use_system_freetype2=false skia_use_system_harfbuzz=false cc="clang" cxx="clang++" extra_cflags_cc=["-stdlib=libc++"] extra_ldflags=["-stdlib=libc++"]'
               ninja -C "\$SRB2BLDROOT/libraries/libskia/out/Release-x64" skia modules -k0 -j"\$NCPU"

               COMREV=\$(git -C "\$SRB2BLDROOT/libraries/libskia" rev-parse --short HEAD)
               \$PRINTF "%s\n" "\$COMREV" >"\$SRB2BLDROOT/libraries/libskia/.comrev"

          fi

    fi

    # Download zdbsp's source code, build and install it.
    if [ "\$OS" = "Linux" ] && ([ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ] || [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]); then

        if [ ! -d "\$SRB2BLDROOT/libraries/zdbsp/.git" ]; then

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading zdbsp's source code. Please wait..."
            git clone \$GITOPTS https://github.com/rheit/zdbsp.git --recursive --branch "$LNXZDBSPVER" "\$SRB2BLDROOT/libraries/zdbsp"

        else

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up zdbsp's source code. Please wait..."
            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/zdbsp"
            git -C "\$SRB2BLDROOT/libraries/zdbsp" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/zdbsp" reset -q --hard
            git -C "\$SRB2BLDROOT/libraries/zdbsp" checkout -q master

            if [ -n "\$ISNET" ]; then

                git -C "\$SRB2BLDROOT/libraries/zdbsp" pull --recurse-submodules --rebase --autostash

            fi

            git -C "\$SRB2BLDROOT/libraries/zdbsp" checkout -q "$LNXZDBSPVER"

        fi

            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing zdbsp. Please wait..."
            mkdir -p "\$SRB2BLDROOT/libraries/zdbsp/build"
            cd "\$SRB2BLDROOT/libraries/zdbsp/build" || exit
            cmake .. -DCMAKE_C_COMPILER=""\$CCACHE_BIN_PATH"\$GCCVER" -DCMAKE_CXX_COMPILER=""\$CCACHE_BIN_PATH"\$GXXVER" -DBUILD_SHARED_LIBS=OFF -DCMAKE_EXE_LINKER_FLAGS=-static -DCMAKE_BUILD_TYPE=Release
#            cmake --build "\$SRB2BLDROOT/libraries/zdbsp/build" -j"\$NCPU" --config Release
#            sudo -E cmake --install "\$SRB2BLDROOT/libraries/zdbsp/build"
            make -k -j"\$NCPU" -C "\$SRB2BLDROOT/libraries/zdbsp/build"
            cp -rf "\$SRB2BLDROOT/libraries/zdbsp/build/zdbsp" "\$BUILD/Build/Compilers/Nodebuilders/zdbsp.exe"
            git -C "\$SRB2BLDROOT/libraries/zdbsp" clean -qdffx -e .comrev
            git -C "\$SRB2BLDROOT/libraries/zdbsp" reset -q --hard
            COMREV=\$(git -C "\$SRB2BLDROOT/libraries/zdbsp" rev-parse --short HEAD)
            \$PRINTF "%s\n" "\$COMREV" > "\$SRB2BLDROOT/libraries/zdbsp/.comrev"
            cd "\$BUILD" || exit

    fi

    # Download vcpkg's source code, build and install it.
#    if [ "\$OS" = "Windows" ] && ([ "\$BUILD" = "\$BUILDPATH/ring-racers" ] || [ "\$BUILD" = "\$BUILDPATH/ring-racers-noire" ]); then
#
#        if [ ! -d "\$SRB2BLDROOT/libraries/vcpkg/.git" ]; then
#
#            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading vcpkg's source code. Please wait..."
#            git clone \$GITOPTS https://github.com/microsoft/vcpkg.git --recursive --branch "$LNXVCPKGVER" "\$SRB2BLDROOT/libraries/vcpkg"
#            git config --global --add safe.directory "\$SRB2BLDROOT/libraries/vcpkg"
#
#        else
#
#            \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up vcpkg's source code. Please wait..."
#
#            if [ -n "\$ISNET" ]; then
#
#                git -C "\$SRB2BLDROOT/libraries/vcpkg" clean -dffx
#                git -C "\$SRB2BLDROOT/libraries/vcpkg" reset --hard
#                git -C "\$SRB2BLDROOT/libraries/vcpkg" pull --recurse-submodules --rebase --autostash
#
#            fi
#
#        fi
#
#        "\$SRB2BLDROOT/libraries/vcpkg/bootstrap-vcpkg.sh" -disableMetrics
#
#    fi

    # Downgrading Linux headers due to missing file ipx.h in recent versions of Alpine Linux.
    if [ "\$LIBC" = "musl" ] && ([ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]); then

        curl -RLC - http://dl-cdn.alpinelinux.org/alpine/v3.15/main/\$(apk --print-arch)/linux-headers-5.10.41-r0.apk -o/tmp/linux-headers-5.10.41-r0.apk
        sudo -E apk add /tmp/linux-headers-5.10.41-r0.apk

    fi

    # Compile the build's source code.
    \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $BUILDNAME's source code. Please wait..."

    if [ "\$OS" = "Windows" ]; then

        if [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$BLDCMD \$CONF
                i686-w64-mingw32-objdump -x "\$BUILD/bin/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            else

                \$BLDCMD \$CONF
                \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/srb2win\$IS64.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                ln -sf /usr/local/bin/i686-w64-mingw32-ld /usr/bin/i686-w64-mingw32-ld
                ln -sf /usr/local/bin/i686-w64-mingw32-as /usr/bin/i686-w64-mingw32-as

                \$BLDCMD \$CONF
                i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            else

                \$BLDCMD \$CONF
                \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

            mkdir -p "\$BUILD/objs/Mingw/SDL/Release"
            mkdir -p "\$BUILD/objs/Mingw/Release"

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$BLDCMD \$CONF
                i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2sdl.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            else

                \$BLDCMD \$CONF
                \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]; then

            mkdir -p "\$BUILD/objs/Mingw/SDL/Release"
            mkdir -p "\$BUILD/objs/Mingw/Release"

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$BLDCMD \$CONF
                i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2jte.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            else

                \$BLDCMD \$CONF
                \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2jte.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            fi

        elif [ "\$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print \$2}' "\$BUILD/src/doomdef.h" 2> /dev/null)" = "RingRacers" ]; then

            \$BLDCMD \$CONF
            cmake --build "\$BUILD/build/ninja-x86_mingw_static_vcpkg-release" -j"\$NCPU"

        elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$BLDCMD \$CONF
                i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            else

                \$BLDCMD \$CONF
                \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

            fi

        elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

            mkdir -p "\$BUILD/build"
            cd "\$BUILD/build" || exit
            rm -f "\$BUILD/slade.pk3"
            7z a -tzip "\$BUILD/build/slade.pk3" "\$BUILD/dist/res/"*
            ln -s /usr/\$ARCH-linux-gnu/include/bits /usr/include/bits
            ln -s /usr/include/\$ARCH-linux-gnu/gnu /usr/include/gnu
            ln -s /usr/include/\$ARCH-linux-gnu/asm /usr/include/asm
            \$BLDCMD \$CONF
            make -k -j"\$NCPU" -C "\$BUILD/build"
            make -C "\$BUILD/build" install
            sudo rm -rf "\$BUILD/build/AppDir/usr/share/applications/net.mancubus.SLADE.desktop" "\$BUILD/build/AppDir/usr/share/icons/net.mancubus.SLADE.png" "\$BUILD/build/AppDir/usr/share/metainfo"
            cp -rf "\$BUILD/dist/res/logo_icon.png" "\$BUILD/build/icon.png"
            cd "\$BUILD" || exit

        elif [ "\$BUILD" = "\$BUILDPATH/kartmaker" ] || [ "\$BUILD" = "\$BUILDPATH/kartmaker-ring-racers" ] || [ "\$BUILD" = "\$BUILDPATH/followermaker" ] || [ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ] || [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]; then

            cd "\$BUILD" || exit
            \$BLDCMD \$CONF

        elif [ "\$BUILD" = "\$BUILDPATH/aseprite" ]; then

            cd "\$BUILD" || exit
            \$BLDCMD \$CONF
            cmake --build "\$BUILD/build" --config Release -j"\$NCPU"
            cmake --install "\$BUILD/build"
            git clone \$GITOPTS https://github.com/DragonDePlatino/Kart-Builder "\$BUILD/build/AppDir/usr/share/aseprite/data/extensions/kart-builder"

        else

            if [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ] || [ "\$ARCH" = "x86_64" ]; then

                \$BLDCMD \$CONF

                # Making list of build's dependencies to copy them to game directory on Windows later.
                if [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

                    if [ "\$IS64" = "64" ]; then

                        x86_64-w64-mingw32-objdump -x "\$BUILD/bin/Mingw64/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    else

                        i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    fi

                elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-galaxy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-hep" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-saturn" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-neptune" ]; then

                    if [ "\$IS64" = "64" ]; then

                        x86_64-w64-mingw32-objdump -x "\$BUILD/bin/Mingw64/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    else

                        i686-w64-mingw32-objdump -x "\$BUILD/bin/Mingw/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    fi

                else

                    if [ "\$IS64" = "64" ]; then

                        x86_64-w64-mingw32-objdump -x "\$BUILD/bin/srb2win64.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    else

                        i686-w64-mingw32-objdump -x "\$BUILD/bin/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                    fi

                fi

            else

                \$BLDCMD \$CONF

                # Making list of build's dependencies to copy them to game directory on Windows later.
                if [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

                    \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2win.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-galaxy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-hep" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-saturn" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-neptune" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

                    \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/Mingw\$IS64/Release/srb2kart.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                else

                    \$ARCH-w64-mingw32-objdump -x "\$BUILD/bin/srb2win\$IS64.exe" | gawk '/DLL/ && /.dll/ {print \$NF}' > "\$BUILD/deps"

                fi

            fi

        fi

     elif [ "\$OS" = "Linux" ]; then

        # Temporarily disabling libpng12 to avoid compiling errors for SRB2 Final Demo.
        if [ -f "/usr/local/lib/libpng12.so" ] && [ -d "/usr/local/stow/libpng12" ] && [ "\$LIBC" != "musl" ] && ([ "\$BUILD" != "\$BUILDPATH/srb2-2.0" ] && [ "\$BUILD" != "\$BUILDPATH/srb2-jte" ]); then

            sudo -E STOW_DIR="/usr/local/stow" stow -D --adopt libpng12

        fi

        if [ -f "$HOME/.local/lib/libpng12.so" ] && [ -d "$HOME/.local/stow/libpng12" ] && [ "\$LIBC" != "musl" ] && ([ "\$BUILD" != "\$BUILDPATH/srb2-2.0" ] && [ "\$BUILD" != "\$BUILDPATH/srb2-jte" ]); then

            sudo -E STOW_DIR="$HOME/.local/stow" stow -D --adopt libpng12

        fi

        if [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]; then

            mkdir -p "\$BUILD/objs/Linux/SDL/Release"
            \$BLDCMD \$CONF

        elif [ "\$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print \$2}' "\$BUILD/src/doomdef.h" 2> /dev/null)" = "RingRacers" ]; then

            if [ "\$LIBC" != "musl" ]; then

                sudo -E apt install -y libjpeg62-dev
                sudo -E apt autoremove -y

            fi

            if [ "\$BUILD" = "\$BUILDPATH/ring-racers" ]; then

                export BUILD="/tmp/ring-racers"

            elif [ "\$BUILD" = "\$BUILDPATH/ring-racers-noire" ]; then

                export BUILD="/tmp/ring-racers-noire"

            else

                export BUILD="/tmp/srb2-custom"

            fi

            cp -rf "\$BUILDMAIN" "\$BUILD"
            git -C "\$BUILD" clean -qdffx -e build/AppDir

            if [ "\$LIBC" != "musl" ]; then

                gawk -i inplace '{gsub("\\\\$<IF:\\\\$<TARGET_EXISTS:SDL2::SDL2>,SDL2::SDL2,SDL2::SDL2-static>","/usr/lib/x86_64-linux-gnu/libSDL2.so"); print}' "\$BUILD/src/sdl/CMakeLists.txt"

            fi

            BLDCMD=\$(\$PRINTF "%s\n" "\$BLDCMD" | gawk '{gsub("'\$BUILDMAIN'","'\$BUILD'"); print}')
            \$BLDCMD \$CONF
            C_INCLUDE_PATH="/usr/include/SDL2" CPLUS_INCLUDE_PATH="/usr/include/SDL2" cmake --build "\$BUILD/build" --config Release -j"\$NCPU"

        elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

            mkdir -p "\$BUILD/build/AppDir/usr/lib/gtk-3.0/modules" "\$BUILD/build/AppDir/usr/lib/gio/modules" "\$BUILD/build/AppDir/usr/lib/gdk-pixbuf" "\$BUILD/build/AppDir/usr/share/glib-2.0/schemas" "\$BUILD/build/AppDir/usr/share/mime" "\$BUILD/build/AppDir/usr/share/icons"
            cd "\$BUILD/build" || exit
            rm -f "\$BUILD/slade.pk3"
            7z a -tzip "\$BUILD/build/slade.pk3" "\$BUILD/dist/res/"*
            \$BLDCMD \$CONF
            make -k -j"\$NCPU" -C "\$BUILD/build"
            make -C "\$BUILD/build" install

            if [ "\$LIBC" != "musl" ]; then

                cp -Lf \$(find /usr/lib/\$ARCH-linux-gnu/libgmp.so.[0-9][0-9] /usr/lib/\$ARCH-linux-gnu/libp11-kit.so.[0-9] /usr/lib/\$ARCH-linux-gnu/liblua[0-9].[0-9].so /usr/lib/\$ARCH-linux-gnu/libnotify.so.[0-9] /usr/lib/\$ARCH-linux-gnu/librsvg-[0-9].so.[0-9] /usr/lib/\$ARCH-linux-gnu/libcroco-[0-9].[0-9].so.[0-9] /usr/lib/\$ARCH-linux-gnu/libxml[0-9].so.[0-9] /usr/lib/\$ARCH-linux-gnu/libicuuc.so.[0-9][0-9] /usr/lib/\$ARCH-linux-gnu/libicudata.so.[0-9][0-9] /usr/lib/\$ARCH-linux-gnu/libproxy.so.[0-9] /usr/lib/\$ARCH-linux-gnu/libgnutls.so.[0-9][0-9] /usr/lib/\$ARCH-linux-gnu/libidn[0-9].so.[0-9] /usr/lib/\$ARCH-linux-gnu/libunistring.so.[0-9] /usr/lib/\$ARCH-linux-gnu/libtasn[0-9].so.[0-9] /usr/lib/\$ARCH-linux-gnu/libnettle.so.[0-9] /usr/lib/\$ARCH-linux-gnu/libhogweed.so.[0-9] /usr/lib/\$ARCH-linux-gnu/libcanberra-gtk[0-9].so.[0-9] 2> /dev/null) "\$BUILD/build/AppDir/usr/lib"
                cp -Lf /usr/lib/\$ARCH-linux-gnu/gtk-3.0/modules/* "\$BUILD/build/AppDir/usr/lib/gtk-3.0/modules"
                cp -rf /usr/lib/\$ARCH-linux-gnu/gio/modules/* "\$BUILD/build/AppDir/usr/lib/gio/modules"
                cp -rf /usr/lib/\$ARCH-linux-gnu/gdk-pixbuf-2.0/2.10.0/* "\$BUILD/build/AppDir/usr/lib/gdk-pixbuf"
                cp -rf /usr/share/glib-2.0/schemas/* "\$BUILD/build/AppDir/usr/share/glib-2.0/schemas"
                cp -rf /usr/share/mime/* "\$BUILD/build/AppDir/usr/share/mime"
                cp -rf /usr/share/icons/Adwaita "\$BUILD/build/AppDir/usr/share/icons"

            fi

            # Creating loaders.cache with new paths to modules and moving slade.pk3 for SLADE.
            if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ]; then

                gawk -i inplace '{gsub("^\".*/usr/lib/.*-linux-gnu/.*/loaders|^\".*/usr/lib/.*/loaders","\"/usr/lib/gdk-pixbuf/loaders"); print}' "\$BUILD/build/AppDir/usr/lib/gdk-pixbuf/loaders.cache"
                mv -f "\$BUILD/build/slade.pk3" "\$BUILD/build/AppDir/usr/bin"

            fi

            sudo rm -rf "\$BUILD/build/AppDir/usr/share/applications/net.mancubus.SLADE.desktop" "\$BUILD/build/AppDir/usr/share/icons/net.mancubus.SLADE.png" "\$BUILD/build/AppDir/usr/share/metainfo"
            cp -rf "\$BUILD/dist/res/logo_icon.png" "\$BUILD/build/icon.png"
            cd "\$BUILD" || exit

        elif [ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ]; then

            \$BLDCMD \$CONF

            if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" != "NixOS" ]; then

                mkbundle --fetch-target "mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64"
                cp -f "\$HOME/.mono/targets/mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64/etc/mono/config" "\$BUILD/Build/config"
                gawk -i inplace '{gsub("\\\\\$mono_libdir/",""); print}' "\$BUILD/Build/config"

                # Works on Arch Linux.
#                mkbundle --deps --cross "mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64" --config "\$BUILD/Build/config" --machine-config "\$HOME/.mono/targets/mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64/etc/mono/4.5/machine.config" -L "\$HOME/.mono/targets/mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64/lib/mono/4.5" -L "\$BUILD/Build" --library /usr/lib/\$ARCH-linux-gnu/libjpeg.so.8 --library /usr/lib/\$ARCH-linux-gnu/libjbig.so.0 --library /usr/lib/\$ARCH-linux-gnu/libtiff.so.5 --library /usr/lib/libmono-native.so --library /usr/lib/libMonoPosixHelper.so --library /usr/lib/libMonoSupportW.so --library /usr/lib/\$ARCH-linux-gnu/libX11.so.6 --library /usr/lib/libgdiplus.so --library /lib/\$ARCH-linux-gnu/libc.so.6 -o "\$BUILD/build/AppDir/usr/bin/uzb" "\$BUILD/Build/Builder.exe"

                mkbundle --deps --cross "mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64" --config "\$BUILD/Build/config" --machine-config "\$HOME/.mono/targets/mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64/etc/mono/4.5/machine.config" -L "\$HOME/.mono/targets/mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64/lib/mono/4.5" -L "\$BUILD/Build" --library /lib/\$ARCH-linux-gnu/libc.so.6 --library /usr/lib/\$ARCH-linux-gnu/libjpeg.so.8 --library /usr/lib/\$ARCH-linux-gnu/libjbig.so.0 --library /usr/lib/\$ARCH-linux-gnu/libtiff.so.5 --library /lib/\$ARCH-linux-gnu/liblzma.so.5 --library /lib/\$ARCH-linux-gnu/libz.so.1 --library /usr/lib/\$ARCH-linux-gnu/libX11.so.6 --library /usr/lib/\$ARCH-linux-gnu/libxcb.so.1 --library /usr/lib/\$ARCH-linux-gnu/libXau.so.6 --library /usr/lib/\$ARCH-linux-gnu/libXdmcp.so.6 --library /usr/lib/libgdiplus.so  --library /usr/lib/\$ARCH-linux-gnu/libcairo.so.2 --library /usr/lib/\$ARCH-linux-gnu/libcairo.so.2 --library /usr/lib/\$ARCH-linux-gnu/libfreetype.so.6 --library /usr/lib/\$ARCH-linux-gnu/libgif.so.7 --library /usr/lib/\$ARCH-linux-gnu/libpng16.so.16 --library /usr/lib/\$ARCH-linux-gnu/libexif.so.12 --library /usr/lib/\$ARCH-linux-gnu/libfontconfig.so.1 --library /usr/lib/\$ARCH-linux-gnu/libXext.so.6 --library /usr/lib/\$ARCH-linux-gnu/libXrender.so.1 --library /usr/lib/\$ARCH-linux-gnu/libxcb-render.so.0 --library /usr/lib/\$ARCH-linux-gnu/libxcb-shm.so.0 --library /usr/lib/\$ARCH-linux-gnu/libpixman-1.so.0 --library /lib/\$ARCH-linux-gnu/libbz2.so.1.0 --library /usr/lib/\$ARCH-linux-gnu/libharfbuzz.so.0 --library /lib/\$ARCH-linux-gnu/libexpat.so.1 --library /usr/lib/\$ARCH-linux-gnu/libgraphite2.so.3 --library /usr/lib/\$ARCH-linux-gnu/libXcursor.so.1 --library /usr/lib/\$ARCH-linux-gnu/libXfixes.so.3 --library /usr/lib/\$ARCH-linux-gnu/libXinerama.so.1 --library /lib/\$ARCH-linux-gnu/libkeyutils.so.1 --library /usr/lib/\$ARCH-linux-gnu/libkrb5support.so.0 --library /usr/lib/\$ARCH-linux-gnu/libk5crypto.so.3 --library /usr/lib/\$ARCH-linux-gnu/libkrb5.so.3 --library /usr/lib/\$ARCH-linux-gnu/libgssapi_krb5.so.2 --library /lib/\$ARCH-linux-gnu/libcom_err.so.2 --library /lib/\$ARCH-linux-gnu/libresolv.so.2 --library /usr/lib/libmono-native.so --library /usr/lib/libMonoPosixHelper.so --library /usr/lib/libMonoSupportW.so -o "\$BUILD/build/AppDir/usr/bin/uzb" "\$BUILD/Build/Builder.exe"

            fi

            cp -rf "\$BUILD/Build/"* "\$BUILD/build/AppDir/usr/bin"
            cp -rf /usr/share/icons/Adwaita "\$BUILD/build/AppDir/usr/share/icons"

        elif [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]; then

            \$BLDCMD \$CONF

            if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ] || [ "\$LNXOSNAME" != "NixOS" ]; then

                mkbundle --fetch-target "mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64"
                cp -f "\$HOME/.mono/targets/mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64/etc/mono/config" "\$BUILD/Build/config"
                gawk -i inplace '{gsub("\\\\\$mono_libdir/",""); print}' "\$BUILD/Build/config"
#                mkbundle --deps --cross "mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64" --config "\$BUILD/Build/config" --machine-config "\$HOME/.mono/targets/mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64/etc/mono/4.5/machine.config" -L "\$HOME/.mono/targets/mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64/lib/mono/4.5" -L "\$BUILD/Build" --library /usr/lib/\$ARCH-linux-gnu/libjpeg.so.8 --library /usr/lib/\$ARCH-linux-gnu/libjbig.so.0 --library /usr/lib/\$ARCH-linux-gnu/libtiff.so.5 --library /usr/lib/\$ARCH-linux-gnu/libgif.so.7 --library /usr/lib/\$ARCH-linux-gnu/libpng16.so.16 --library /usr/lib/\$ARCH-linux-gnu/libexif.so.12 --library /usr/lib/libgdiplus.so --library /usr/lib/\$ARCH-linux-gnu/libgdk-x11-2.0.so.0 --library /usr/lib/\$ARCH-linux-gnu/libgtk-x11-2.0.so.0 --library /lib/\$ARCH-linux-gnu/libkeyutils.so.1 --library /usr/lib/\$ARCH-linux-gnu/libkrb5support.so.0 --library /usr/lib/\$ARCH-linux-gnu/libk5crypto.so.3 --library /usr/lib/\$ARCH-linux-gnu/libkrb5.so.3 --library /usr/lib/\$ARCH-linux-gnu/libgssapi_krb5.so.2 --library /usr/lib/\$ARCH-linux-gnu/libtdb.so.1 --library /usr/lib/\$ARCH-linux-gnu/libgdk_pixbuf-2.0.so.0 --library /usr/lib/\$ARCH-linux-gnu/libcanberra.so.0 --library /usr/lib/\$ARCH-linux-gnu/libcanberra-gtk.so.0 --library /usr/lib/\$ARCH-linux-gnu/gtk-2.0/modules/libcanberra-gtk-module.so --library /usr/lib/\$ARCH-linux-gnu/gtk-2.0/2.10.0/engines/libadwaita.so --library /usr/lib/\$ARCH-linux-gnu/gtk-2.0/2.10.0/engines/libpixmap.so --library /usr/lib/libmono-native.so --library /usr/lib/libMonoPosixHelper.so --library /usr/lib/libMonoSupportW.so -o "\$BUILD/build/AppDir/usr/bin/hvr" "\$BUILD/Build/Builder.exe"

                mkbundle --deps --cross "mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64" --config "\$BUILD/Build/config" --machine-config "\$HOME/.mono/targets/mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64/etc/mono/4.5/machine.config" -L "\$HOME/.mono/targets/mono-$LNXMONOVER-ubuntu-$LNXMONOUBUVER-x64/lib/mono/4.5" -L "\$BUILD/Build" --library /lib/\$ARCH-linux-gnu/libc.so.6 --library /usr/lib/\$ARCH-linux-gnu/libjpeg.so.8 --library /usr/lib/\$ARCH-linux-gnu/libjbig.so.0 --library /usr/lib/\$ARCH-linux-gnu/libtiff.so.5 --library /lib/\$ARCH-linux-gnu/liblzma.so.5 --library /lib/\$ARCH-linux-gnu/libz.so.1 --library /usr/lib/\$ARCH-linux-gnu/libX11.so.6 --library /usr/lib/\$ARCH-linux-gnu/libxcb.so.1 --library /usr/lib/\$ARCH-linux-gnu/libXau.so.6 --library /usr/lib/\$ARCH-linux-gnu/libXdmcp.so.6 --library /usr/lib/libgdiplus.so  --library /usr/lib/\$ARCH-linux-gnu/libcairo.so.2 --library /usr/lib/\$ARCH-linux-gnu/libcairo.so.2 --library /usr/lib/\$ARCH-linux-gnu/libfreetype.so.6 --library /usr/lib/\$ARCH-linux-gnu/libgif.so.7 --library /usr/lib/\$ARCH-linux-gnu/libpng16.so.16 --library /usr/lib/\$ARCH-linux-gnu/libexif.so.12 --library /usr/lib/\$ARCH-linux-gnu/libfontconfig.so.1 --library /usr/lib/\$ARCH-linux-gnu/libXext.so.6 --library /usr/lib/\$ARCH-linux-gnu/libXrender.so.1 --library /usr/lib/\$ARCH-linux-gnu/libxcb-render.so.0 --library /usr/lib/\$ARCH-linux-gnu/libxcb-shm.so.0 --library /usr/lib/\$ARCH-linux-gnu/libpixman-1.so.0 --library /lib/\$ARCH-linux-gnu/libbz2.so.1.0 --library /usr/lib/\$ARCH-linux-gnu/libharfbuzz.so.0 --library /lib/\$ARCH-linux-gnu/libexpat.so.1 --library /usr/lib/\$ARCH-linux-gnu/libgraphite2.so.3 --library /usr/lib/\$ARCH-linux-gnu/libXcursor.so.1 --library /usr/lib/\$ARCH-linux-gnu/libXfixes.so.3 --library /usr/lib/\$ARCH-linux-gnu/libXinerama.so.1 --library /lib/\$ARCH-linux-gnu/libkeyutils.so.1 --library /usr/lib/\$ARCH-linux-gnu/libkrb5support.so.0 --library /usr/lib/\$ARCH-linux-gnu/libk5crypto.so.3 --library /usr/lib/\$ARCH-linux-gnu/libkrb5.so.3 --library /usr/lib/\$ARCH-linux-gnu/libgssapi_krb5.so.2 --library /lib/\$ARCH-linux-gnu/libcom_err.so.2 --library /lib/\$ARCH-linux-gnu/libresolv.so.2 --library /usr/lib/libmono-native.so --library /usr/lib/libMonoPosixHelper.so --library /usr/lib/libMonoSupportW.so -o "\$BUILD/build/AppDir/usr/bin/hvr" "\$BUILD/Build/Builder.exe"

            fi

            cp -rf "\$BUILD/Build/"* "\$BUILD/build/AppDir/usr/bin"
            cp -rf /usr/share/icons/Adwaita "\$BUILD/build/AppDir/usr/share/icons"

        elif [ "\$BUILD" = "\$BUILDPATH/aseprite" ]; then

            cd "\$BUILD" || exit
            \$BLDCMD \$CONF
            cmake --build "\$BUILD/build" --config Release -j"\$NCPU"
            cmake --install "\$BUILD/build"
            git clone \$GITOPTS https://github.com/DragonDePlatino/Kart-Builder "\$BUILD/build/AppDir/usr/share/aseprite/data/extensions/kart-builder"

            if [ "\$APPIMAGE" = "1" ] || [ "\$FLATPAK" = "1" ]; then
            
                cp -rf "/usr/lib/p7zip" "\$BUILD/build/AppDir/usr/lib"

            fi
            
        else

            cd "\$BUILD" || exit
            \$BLDCMD \$CONF

        fi

        # Renabling libpng12.
        if [ ! -f "/usr/local/lib/libpng12.so" ] && [ -d "/usr/local/stow/libpng12" ] && [ "\$LIBC" != "musl" ]; then

            sudo -E STOW_DIR="/usr/local/stow" stow --adopt libpng12

        fi

        if [ ! -f "$HOME/.local/lib/libpng12.so" ] && [ -d "$HOME/.local/stow/libpng12" ] && [ "\$LIBC" != "musl" ]; then

            sudo -E STOW_DIR="$HOME/.local/stow" stow --adopt libpng12

        fi

    fi

    \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Copying $BUILDNAME's binary, libraries, icons, desktop file and AppRun to AppDir. Please wait..."
    # Copy compiled binary to AppDir.
    if [ -f "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/lsdl2srb2" ]; then

        cp -rf "\$BUILD/bin/lsdl2srb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux\$IS64/Release/srb2legacy" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/srb2legacy" "\$BUILD/build/AppDir/usr/bin/lsdl2srb2"

    elif [ -f "\$BUILD/bin/srb2legacy" ]; then

        cp -rf "\$BUILD/bin/srb2legacy" "\$BUILD/build/AppDir/usr/bin/lsdl2srb2"

    elif [ -f "\$BUILD/bin/Linux\$IS64/Release/lsdlsrb2" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/lsdlsrb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux/Release/lsdlsrb2" ]; then

        cp -rf "\$BUILD/bin/Linux/Release/lsdlsrb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/lsdlsrb2" ]; then

        cp -rf "\$BUILD/bin/lsdlsrb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux/Release/lsdlsrb2JTE" ]; then

        cp -rf "\$BUILD/bin/Linux/Release/lsdlsrb2JTE" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux/Release/lsdl2srb2" ]; then

        cp -rf "\$BUILD/bin/Linux/Release/lsdl2srb2" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/build/bin/ringracers" ]; then

        cp -rf "\$BUILD/build/bin/ringracers" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2kart" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/lsdl2srb2kart" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/lsdl2srb2kart" ]; then

        cp -rf "\$BUILD/bin/lsdl2srb2kart" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/bin/Linux\$IS64/Release/srb2kart-neptune" ]; then

        cp -rf "\$BUILD/bin/Linux\$IS64/Release/srb2kart-neptune" "\$BUILD/build/AppDir/usr/bin/lsdl2srb2kart"

    elif [ -f "\$BUILD/wadcli" ]; then

        cp -rf "\$BUILD/wadcli" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/build/kartmaker" ]; then

        cp -rf "\$BUILD/build/kartmaker" "\$BUILD/build/AppDir/usr/bin"

    elif [ -f "\$BUILD/followermaker" ]; then

        cp -rf "\$BUILD/followermaker" "\$BUILD/build/AppDir/usr/bin"

    fi

if [ "\$APPIMAGE" = "1" ]; then

    # Create desktop file.
    COMREV=\$(sudo git -C "\$BUILD" rev-parse --short HEAD)

    if [ "\$BUILD" = "\$BUILDPATH/srb2" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Uncapped PLUS
Comment=Modified open source 3D Sonic platformer with improved framerate and additional features
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2UncappedPlus
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 NetPlus
Comment=Modified open source 3D Sonic platformer with rollback netcode
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2NetPlus
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-rphys" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 rphys
Comment=Modified open source 3D Sonic platformer with customized physics and movesets
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2rphys
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-tsourdt3rd" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 TSoURDt3rd
Comment=Modified open source 3D Sonic platformer with improved framerate and additional features combined from Uncapped and other builds
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2TSoURDt3rd
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 VR
Comment=Modified open source 3D Sonic VR platformer with improved framerate and additional features
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;OpenVR;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRBVR
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software

[Desktop Action OpenVR]
Name=OpenVR runtime
Exec=AppRun -openvr -win
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 v2.1 Legacy
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2-2.1-Legacy
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 v2.0
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2-2.0
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Final Demo
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2FinalDemo
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 JTE
Comment=Modified open source 3D Sonic platformer based on SRB2 Final Demo with additional modes, maps and easter eggs
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;platformer;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2JTE
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Persona
Comment=Modified open source 3D Sonic game with Persona gameplay
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;rpg;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2Persona
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$(basename \$BUILD)" = "ring-racers" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Dr. Robotnik's Ring Racers
Comment=Modified open source 3D Sonic game with kart racing gameplay
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;ring;racers
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=RingRacers
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$(basename \$BUILD)" = "ring-racers-noire" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Dr. Robotnik's Ring Racers Noire
Comment=Modified open source 3D Sonic game with kart racing gameplay with additional features
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;ring;racers
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=RingRacers
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Kart
Comment=Modified open source 3D Sonic game with kart racing gameplay
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2Kart
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Kart Moe Mansion
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2KartMoeMansion
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-galaxy" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Kart Galaxy
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features inspired by Moe Mansion
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2KartGalaxy
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-hep" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Kart HEP
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features based on SRB2 Kart Galaxy
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2KartHEP
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-saturn" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Kart Saturn
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features based on SRB2 Kart Galaxy
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2KartSaturn
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-neptune" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Kart Neptune
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features based on SRB2 Kart Saturn
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;
Actions=OpenGL;Software;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2KartNeptune
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Kart VR
Comment=Modified open source 3D Sonic game with VR kart racing gameplay, improved framerate and additional features
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;kart;racing;
Actions=OpenGL;Software;OpenVR;
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2KartVR
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software

[Desktop Action OpenVR]
Name=OpenVR runtime
Exec=AppRun -openvr -win
DESKTOP

    elif [ "\$(dirname \$BUILD)" = "\$BUILDPATH/srb2-custom" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Sonic Robo Blast 2 Custom \$CUSTOMDIR
Comment=Modified open source 3D Sonic game
Icon=icon
Exec=AppRun
Categories=Game;
Keywords=sonic;
Actions=OpenGL;Software
Terminal=false
NoDisplay=false
X-AppImage-Name=SRB2C\$CUSTOMDIR
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV

[Desktop Action OpenGL]
Name=OpenGL renderer
Exec=AppRun -opengl

[Desktop Action Software]
Name=Software renderer
Exec=AppRun -software
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=wadcli
Comment=Allows the manipulation of Doom WAD files through command-line
Icon=icon
Exec=AppRun
Categories=Development;
Keywords=sonic;wad;
Terminal=true
NoDisplay=false
X-AppImage-Name=wadcli
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/kartmaker" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=kartmaker
Comment=Simple utility that automatically creates a character WAD for SRB2Kart from a working folder
Icon=icon
Exec=AppRun
Categories=Development;
Keywords=sonic;wad;kart
Terminal=true
NoDisplay=false
X-AppImage-Name=kartmaker
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/kartmaker-ring-racers" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=kartmaker (Ring Racers)
Comment=Simple utility that automatically creates a character WAD for Ring Racers from a working folder
Icon=icon
Exec=AppRun
Categories=Development;
Keywords=sonic;wad;kart
Terminal=true
NoDisplay=false
X-AppImage-Name=kartmaker_rr
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/followermaker" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=followermaker
Comment=Simple utility that automatically creates a follower WAD for Ring Racers from a working folder
Icon=icon
Exec=AppRun
Categories=Development;
Keywords=sonic;wad;kart
Terminal=true
NoDisplay=false
X-AppImage-Name=followermaker
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=SLADE
Comment=Allows the manipulation of Doom WAD files
Icon=icon
Exec=AppRun
Categories=Development;
Keywords=sonic;wad;
Terminal=false
NoDisplay=false
X-AppImage-Name=slade
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Ultimate Zone Builder
Comment=A map editor for UDMF levels in SRB2, forked from Ultimate Doom Builder.
Icon=icon
Exec=AppRun
Categories=Development;
Keywords=sonic;wad;uzb;
Terminal=false
NoDisplay=false
X-AppImage-Name=ultimatezonebuilder
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=High Voltage Ring
Comment=A map editor for UDMF levels in Ring Racers, forked from Ultimate Zone Builder.
Icon=icon
Exec=AppRun
Categories=Development;
Keywords=sonic;wad;ring;racers;hvr;
Terminal=false
NoDisplay=false
X-AppImage-Name=highvoltagering
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/aseprite" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/app.desktop" << DESKTOP
[Desktop Entry]
Type=Application
Name=Aseprite
Comment=Animated sprite editor and pixel art tool.
Icon=icon
Exec=AppRun
Categories=Development;
Keywords=aseprite;
Terminal=false
NoDisplay=false
X-AppImage-Name=aseprite
X-AppImage-Arch=\$ARCH
X-AppImage-Version=\$COMREV
DESKTOP

    fi

    # Get app icon.
    if [ "\$BUILD" = "\$BUILDPATH/wadcli" ] || [ "\$BUILD" = "\$BUILDPATH/kartmaker" ] || [ "\$BUILD" = "\$BUILDPATH/kartmaker-ring-racers" ] || [ "\$BUILD" = "\$BUILDPATH/followermaker" ]; then

        if [ -n "\$ISNET" ]; then

            curl -L https://www.iconfinder.com/icons/285695/download/png/64 -o "\$BUILD/build/icon.png"

        else

            cp -f \$(find "/usr/share/icons/hicolor" -type f -name "*.png" 2> /dev/null | head -n1) "\$BUILD/build/icon.png"

        fi

        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"
        mv -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/icon.png"

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"
        mv -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/icon.png"

    elif [ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ]; then

        convert "\$BUILD/Setup/UZB-small.bmp" -resize 64x64\! -filter lanczos -alpha on -background none -flatten "\$BUILD/build/icon.png"
        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"
        mv -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/icon.png"

    elif [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]; then

        convert "\$BUILD/Setup/HVR-small.bmp" -resize 64x64\! -filter lanczos -alpha on -background none -flatten "\$BUILD/build/icon.png"
        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"
        mv -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/icon.png"

    elif [ "\$BUILD" = "\$BUILDPATH/aseprite" ]; then

        ICONSIZE=\$(identify "\$BUILD/data/icons/ase64.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"
        mv -f "\$BUILD/data/icons/ase64.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/icon.png"

    else

        if [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-galaxy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-hep" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-saturn" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-neptune" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

            convert "\$BUILD/src/win32/Srb2win.ico" -resize 64x64\! -filter lanczos -alpha on -background none -flatten "\$BUILD/build/icon.png"

        else

            convert "\$BUILD/src/win32/Srb2win.ico[5]" -resize 64x64\! -filter lanczos -alpha on -background none -flatten "\$BUILD/build/icon.png"

        fi

        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"
        mv -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/icon.png"

    fi

    cat > "\$BUILD/build/AppDir/AppRun" << 'APPRUN'
#!/bin/sh

export HERE="\$(dirname "\$(readlink -f "\$0")")"
export LD_LIBRARY_PATH="\$HERE/usr/lib:\$HERE/usr/lib/gtk-3.0/modules:\$HERE/usr/lib/gdk-pixbuf/loaders:\$LD_LIBRARY_PATH"
APPRUN

    if [ "\$BUILD" = "\$BUILDPATH/srb2" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-rphys" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-tsourdt3rd" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export SRB2WADDIR="\$HERE/usr/games/SRB2"
export SDL_SOUNDFONTS="$SDL_SOUNDFONTS"
export SDL_FORCE_SOUNDFONTS=1

exec "\$HERE/usr/bin/lsdl2srb2" "\$@"
APPRUNBIN

    elif [ "\$(dirname \$BUILD)" = "\$BUILDPATH/srb2-custom" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export SRB2WADDIR="\$HERE/usr/games/\$SRB2CASSETDIR"
export RINGRACERSWADDIR="\$HERE/usr/games/\$SRB2CASSETDIR"
export SDL_SOUNDFONTS="$SDL_SOUNDFONTS"
export SDL_FORCE_SOUNDFONTS=1

exec "\$HERE/usr/bin/\$(ls \$HERE/usr/bin)" "\$@"
APPRUNBIN

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export SRB2WADDIR="\$HERE/usr/games/SRB2"

exec "\$HERE/usr/bin/lsdlsrb2" "\$@"
APPRUNBIN

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export SRB2WADDIR="\$HERE/usr/games/SRB2"

exec "\$HERE/usr/bin/lsdlsrb2JTE" "\$@"
APPRUNBIN

    elif [ "\$(basename \$BUILD)" = "ring-racers" ] || [ "\$(basename \$BUILD)" = "ring-racers-noire" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export RINGRACERSWADDIR="\$HERE/usr/games/RingRacers"

exec "\$HERE/usr/bin/ringracers" "\$@"
APPRUNBIN

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-galaxy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-hep" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-saturn" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-neptune" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export SRB2WADDIR="\$HERE/usr/games/SRB2Kart"

exec "\$HERE/usr/bin/lsdl2srb2kart" "\$@"
APPRUNBIN

    elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
exec "\$HERE/usr/bin/wadcli" "\$@"
APPRUNBIN

    elif [ "\$BUILD" = "\$BUILDPATH/kartmaker" ] || [ "\$BUILD" = "\$BUILDPATH/kartmaker-ring-racers" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
exec "\$HERE/usr/bin/kartmaker" "\$@"
APPRUNBIN

    elif [ "\$BUILD" = "\$BUILDPATH/followermaker" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
exec "\$HERE/usr/bin/followermaker" "\$@"
APPRUNBIN

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export GIO_MODULE_DIR="\$HERE/usr/lib/gio/modules"
export GIO_EXTRA_MODULES="\$HERE/usr/lib/gio/modules"
export GDK_PIXBUF_MODULEDIR="\$HERE/usr/lib/gdk-pixbuf/loaders"
export GDK_PIXBUF_MODULE_FILE="/tmp/loaders.cache"
export XDG_DATA_DIRS="\$HERE/usr/share:\$HERE/usr/share/mime"
export KDE_FULL_SESSION="false"
\$(find / -type f -executable -name "gdk-pixbuf-query-loaders*" 2> /dev/null | head -n1) > "/tmp/loaders.cache"

exec "\$HERE/usr/bin/slade" "\$@"
APPRUNBIN

    elif [ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
cd "\$HERE/usr/bin"
exec "\$HERE/usr/bin/uzb" "\$@"
APPRUNBIN

    elif [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
cd "\$HERE/usr/bin"
exec "\$HERE/usr/bin/hvr" "\$@"
APPRUNBIN

    elif [ "\$BUILD" = "\$BUILDPATH/aseprite" ]; then

        cat >> "\$BUILD/build/AppDir/AppRun" << 'APPRUNBIN'
export PATH="\$HERE/usr/bin:\$PATH"
exec "\$HERE/usr/bin/aseprite" "\$@"
APPRUNBIN
        cat >> "\$BUILD/build/AppDir/usr/bin/7z" << '7Z'
#!/bin/sh
export HERE="\$(dirname \$(dirname "\$(readlink -f "\$0")"))"
exec "\$HERE/lib/p7zip/7z" "\$@"
7Z
        chmod 755 "\$BUILD/build/AppDir/usr/bin/7z"

    fi

    chmod 755 "\$BUILD/build/AppDir/AppRun"

    # Copying libraries to AppDir.
    if [ "\$BUILD" != "\$BUILDPATH/kartmaker" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker-ring-racers" ] && [ "\$BUILD" != "\$BUILDPATH/followermaker" ]; then

        cp -Lf \$(LD_LIBRARY_PATH="\$SRB2BLDPREFIX/lib" ldd \$(find "\$BUILD/build/AppDir/usr/bin" -type f) 2> /dev/null | gawk '{print \$3}' | gawk '!/not|dynamic|libc.so|libdl.so|ld-|libgcc_s.so|libm.so|libpthread.so|libresolv.so|librt.so|libz.so|libcom_err.so/ {print}') "\$BUILD/build/AppDir/usr/lib"

    fi

    # Download appimagetool.
    \$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $BUILDNAME's AppImage. Please wait..."
    ISARM=\$(\$PRINTF "%s\n" "\$ARCH" | gawk 'match(\$0, /arm/) {print substr(\$0, RSTART, RLENGTH)}')
    IS64=\$(getconf LONG_BIT)

    if [ -z "\$ISNET" ]; then

        exit

    fi

    if [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]; then

        if [ "\$ARCH" = "x86_64" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-i686.AppImage" -o "\$BUILD/appimagetool"

        elif [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-i686.AppImage" -o "\$BUILD/appimagetool"

        elif ([ -n "\$ISARM" ] && [ "\$IS64" = "64" ]) || [ "\$ARCH" = "aarch64" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-armhf.AppImage" -o "\$BUILD/appimagetool"

        elif [ -n "\$ISARM" ] && [ "\$IS64" = "32" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-armhf.AppImage" -o "\$BUILD/appimagetool"

        fi

    else

        if [ "\$ARCH" = "x86_64" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" -o "\$BUILD/appimagetool"

        elif [ "\$ARCH" = "i386" ] || [ "\$ARCH" = "i486" ] || [ "\$ARCH" = "i686" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-i686.AppImage" -o "\$BUILD/appimagetool"

        elif ([ -n "\$ISARM" ] && [ "\$IS64" = "64" ]) || [ "\$ARCH" = "aarch64" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-aarch64.AppImage" -o "\$BUILD/appimagetool"

        elif [ -n "\$ISARM" ] && [ "\$IS64" = "32" ]; then

            curl -L "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-armhf.AppImage" -o "\$BUILD/appimagetool"

        fi

    fi

    chmod 755 "\$BUILD/appimagetool"
    cd "\$BUILD/build/AppDir" || exit

    # Create symlinks that are specific for AppDir's structure.
    ln -sf "icon.png" ".DirIcon"
    ln -sf "usr/share/icons/hicolor/\$ICONSIZE/apps/icon.png" "icon.png"
    ln -sf "usr/share/applications/app.desktop" "app.desktop"
    cd "\$BUILD/build/AppDir/usr" || exit
    ln -sf "lib" "lib32"

else

    if [ "\$FLATPAK" = "1" ] && [ "\$BUILD" != "\$BUILDPATH/wadcli" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker-ring-racers" ] && [ "\$BUILD" != "\$BUILDPATH/followermaker" ]; then

        cp -Lf \$(LD_LIBRARY_PATH="\$SRB2BLDPREFIX/lib" ldd \$(find "\$BUILD/build/AppDir/usr/bin" -type f) 2> /dev/null | gawk '{print \$3}' | gawk '!/not|dynamic|libc.so|libdl.so|ld-|libgcc_s.so|libm.so|libpthread.so|libresolv.so|librt.so|libz.so|libcom_err.so/ {print}') "\$BUILD/build/AppDir/usr/lib"

    fi

    # Saving configuration flags for future upgrades.
    \$PRINTF "%s\n" "\$CONF" > "\$BUILD/conf"

    # Create desktop file.
    COMREV=\$(sudo git -C "\$BUILD" rev-parse --short HEAD)

    if [ "\$BUILD" = "\$BUILDPATH/srb2" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 (Software)
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=srb2
Exec=srb2 -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 \\\(Software\\\)","Name=Sonic Robo Blast 2 (OpenGL)") || gsub("Exec=srb2 -software","Exec=srb2 -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-uncapped-plus-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Uncapped PLUS (Software)
Comment=Modified open source 3D Sonic platformer with improved framerate and additional features
Icon=srb2uncappedplus
Exec=srb2ucp -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-uncapped-plus-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-uncapped-plus-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Uncapped PLUS \\\(Software\\\)","Name=Sonic Robo Blast 2 Uncapped PLUS (OpenGL)") || gsub("Exec=srb2ucp -software","Exec=srb2ucp -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-uncapped-plus-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-netplus-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 NetPlus (Software)
Comment=Modified open source 3D Sonic platformer with rollback netcode
Icon=srb2netplus
Exec=srb2np -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-netplus-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-netplus-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 NetPlus \\\(Software\\\)","Name=Sonic Robo Blast 2 NetPlus (OpenGL)") || gsub("Exec=srb2np -software","Exec=srb2np -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-netplus-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-rphys" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-rphys-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 rphys (Software)
Comment=Modified open source 3D Sonic platformer with customized physics and movesets
Icon=srb2rphys
Exec=srb2rphys -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-rphys-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-rphys-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 rphys \\\(Software\\\)","Name=Sonic Robo Blast 2 rphys (OpenGL)") || gsub("Exec=srb2rphys -software","Exec=srb2rphys -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-rphys-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-tsourdt3rd" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-tsourdt3rd-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 TSoURDt3rd (Software)
Comment=Modified open source 3D Sonic platformer with improved framerate and additional features combined from Uncapped and other builds
Icon=srb2tsourdt3rd
Exec=srb2tsourdt3rd -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-tsourdt3rd-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-tsourdt3rd-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 TSoURDt3rd \\\(Software\\\)","Name=Sonic Robo Blast 2 TSoURDt3rd (OpenGL)") || gsub("Exec=srb2tsourdt3rd -software","Exec=srb2tsourdt3rd -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-tsourdt3rd-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-vr-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 VR (Software)
Comment=Modified open source 3D Sonic VR platformer with improved framerate and additional features
Icon=srb2vr
Exec=srb2vr -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-vr-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-vr-opengl.desktop"
    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-vr-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-vr-openvr.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 VR \\\(Software\\\)","Name=Sonic Robo Blast 2 VR (OpenGL)") || gsub("Exec=srb2vr -software","Exec=srb2vr -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-vr-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 VR \\\(Software\\\)","Name=Sonic Robo Blast 2 VR (OpenVR)") || gsub("Exec=srb2vr -software","Exec=srb2vr -openvr -win"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-vr-openvr.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-2.1-legacy-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 v2.1 Legacy (Software)
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=srb2legacy
Exec=srb2legacy -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-2.1-legacy-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-2.1-legacy-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 v2.1 Legacy \\\(Software\\\)","Name=Sonic Robo Blast 2 v2.1 Legacy (OpenGL)") || gsub("Exec=srb2legacy -software","Exec=srb2legacy -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-2.1-legacy-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-2.0-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 v2.0 (Software)
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=srb2_2.0
Exec=srb2_2.0 -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-2.0-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-2.0-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 v2.0 \\\(Software\\\)","Name=Sonic Robo Blast 2 v2.0 (OpenGL)") || gsub("Exec=srb2_2.0 -software","Exec=srb2_2.0 -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-2.0-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-final-demo-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Final Demo (Software)
Comment=Open source 3D Sonic platformer based on Doom Legacy engine
Icon=srb2finaldemo
Exec=srb2fd -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-final-demo-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-final-demo-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Final Demo \\\(Software\\\)","Name=Sonic Robo Blast 2 Final Demo (OpenGL)") || gsub("Exec=srb2fd -software","Exec=srb2fd -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-final-demo-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-jte-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 JTE (Software)
Comment=Modified open source 3D Sonic platformer based on SRB2 Final Demo with additional modes, maps and easter eggs
Icon=srb2jte
Exec=srb2jte -software
Categories=Game;
Keywords=sonic;platformer;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-jte-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-jte-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 JTE \\\(Software\\\)","Name=Sonic Robo Blast 2 JTE (OpenGL)") || gsub("Exec=srb2jte -software","Exec=srb2jte -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-jte-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-persona-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Persona (Software)
Comment=Modified open source 3D Sonic game with Persona gameplay
Icon=srb2persona
Exec=srb2p -software
Categories=Game;
Keywords=sonic;rpg;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-persona-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-persona-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Persona \\\(Software\\\)","Name=Sonic Robo Blast 2 Persona (OpenGL)") || gsub("Exec=srb2p -software","Exec=srb2p -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-persona-opengl.desktop"

    elif [ "\$(basename \$BUILD)" = "ring-racers" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/ring-racers-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Dr. Robotnik's Ring Racers (Software)
Comment=Modified open source 3D Sonic game with kart racing gameplay
Icon=ringracers
Exec=ringracers -software
Categories=Game;
Keywords=sonic;kart;racing;ring;racers
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/ring-racers-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/ring-racers-opengl.desktop"
    gawk -i inplace '{gsub("Name=Dr. Robotnik'\''s Ring Racers \\\(Software\\\)","Name=Dr. Robotnik'\''s Ring Racers (OpenGL)") || gsub("Exec=ringracers -software","Exec=ringracers -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/ring-racers-opengl.desktop"

    elif [ "\$(basename \$BUILD)" = "ring-racers-noire" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/ring-racers-noire-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Dr. Robotnik's Ring Racers Noire (Software)
Comment=Modified open source 3D Sonic game with kart racing gameplay with additional features
Icon=ringracersnoire
Exec=ringracersnoire -software
Categories=Game;
Keywords=sonic;kart;racing;ring;racers
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/ring-racers-noire-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/ring-racers-noire-opengl.desktop"
    gawk -i inplace '{gsub("Name=Dr. Robotnik'\''s Ring Racers Noire \\\(Software\\\)","Name=Dr. Robotnik'\''s Ring Racers Noire (OpenGL)") || gsub("Exec=ringracersnoire -software","Exec=ringracersnoire -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/ring-racers-noire-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Kart (Software)
Comment=Modified open source 3D Sonic game with kart racing gameplay
Icon=srb2kart
Exec=srb2kart -software
Categories=Game;
Keywords=sonic;kart;racing;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart (OpenGL)") || gsub("Exec=srb2kart -software","Exec=srb2kart -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-moe-mansion-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Kart Moe Mansion (Software)
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features
Icon=srb2kartmoemansion
Exec=srb2kartmoe -software
Categories=Game;
Keywords=sonic;kart;racing;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-moe-mansion-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-moe-mansion-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart Moe Mansion \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart Moe Mansion (OpenGL)") || gsub("Exec=srb2kartmoe -software","Exec=srb2kartmoe -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-moe-mansion-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-galaxy" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-galaxy-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Kart Galaxy (Software)
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features inspired by Moe Mansion
Icon=srb2kartgalaxy
Exec=srb2kartgalaxy -software
Categories=Game;
Keywords=sonic;kart;racing;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-galaxy-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-galaxy-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart Galaxy \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart Galaxy (OpenGL)") || gsub("Exec=srb2kartgalaxy -software","Exec=srb2kartgalaxy -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-galaxy-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-hep" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-hep-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Kart HEP (Software)
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features based on SRB2 Kart Galaxy
Icon=srb2karthep
Exec=srb2karthep -software
Categories=Game;
Keywords=sonic;kart;racing;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-hep-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-hep-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart HEP \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart HEP (OpenGL)") || gsub("Exec=srb2karthep -software","Exec=srb2karthep -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-hep-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-saturn" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-saturn-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Kart Saturn (Software)
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features based on SRB2 Kart Galaxy
Icon=srb2kartsaturn
Exec=srb2kartsaturn -software
Categories=Game;
Keywords=sonic;kart;racing;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-saturn-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-saturn-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart Saturn \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart Saturn (OpenGL)") || gsub("Exec=srb2kartsaturn -software","Exec=srb2kartsaturn -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-saturn-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-neptune" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-neptune-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Kart Neptune (Software)
Comment=Modified open source 3D Sonic game with kart racing gameplay, improved framerate and additional features based on SRB2 Kart Saturn
Icon=srb2kartneptune
Exec=srb2kartneptune -software
Categories=Game;
Keywords=sonic;kart;racing;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-neptune-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-neptune-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart Neptune \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart Neptune (OpenGL)") || gsub("Exec=srb2kartneptune -software","Exec=srb2kartneptune -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-neptune-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-vr-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Kart VR (Software)
Comment=Modified open source 3D Sonic game with VR kart racing gameplay, improved framerate and additional features
Icon=srb2kartvr
Exec=srb2kartvr -software
Categories=Game;
Keywords=sonic;kart;racing;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-vr-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-vr-opengl.desktop"
    cp -f "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-vr-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-vr-openvr.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart VR \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart VR (OpenGL)") || gsub("Exec=srb2kartvr -software","Exec=srb2kartvr -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-vr-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Kart VR \\\(Software\\\)","Name=Sonic Robo Blast 2 Kart VR (OpenVR)") || gsub("Exec=srb2kartvr -software","Exec=srb2kartvr -openvr -win"); print}' "\$BUILD/build/AppDir/usr/share/applications/srb2-kart-vr-openvr.desktop"

    elif [ "\$(dirname \$BUILD)" = "\$BUILDPATH/srb2-custom" ]; then

        SRB2CNAME="\$SRB2CCONFDIR"c"\$CUSTOMDIR"

        cat > "\$BUILD/build/AppDir/usr/share/applications/\$SRB2CNAME-software.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Sonic Robo Blast 2 Custom \$CUSTOMDIR (Software)
Comment=Modified open source 3D Sonic game
Icon=\$SRB2CNAME
Exec=\$SRB2CNAME -software
Categories=Game;
Keywords=sonic;
Terminal=false
NoDisplay=false
DESKTOP

    cp -f "\$BUILD/build/AppDir/usr/share/applications/\$SRB2CNAME-software.desktop" "\$BUILD/build/AppDir/usr/share/applications/\$SRB2CNAME-opengl.desktop"
    gawk -i inplace '{gsub("Name=Sonic Robo Blast 2 Custom '$CUSTOMDIR' \\\(Software\\\)","Name=Sonic Robo Blast 2 Custom '$CUSTOMDIR' (OpenGL)") || gsub("Exec='\$SRB2CNAME' -software","Exec='\$SRB2CNAME' -opengl"); print}' "\$BUILD/build/AppDir/usr/share/applications/\$SRB2CNAME-opengl.desktop"

    elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/wadcli.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=wadcli
Comment=Allows the manipulation of Doom WAD files through command-line
Icon=wadcli
Exec=wadcli
Categories=Development;
Keywords=sonic;wad;
Terminal=true
NoDisplay=false
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/kartmaker" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/kartmaker.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=kartmaker
Comment=Simple utility that automatically creates a character WAD for SRB2Kart from a working folder
Icon=kartmaker
Exec=kartmaker
Categories=Development;
Keywords=sonic;wad;kart
Terminal=true
NoDisplay=false
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/kartmaker-ring-racers" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/kartmaker-ring-racers.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=kartmaker (Ring Racers)
Comment=Simple utility that automatically creates a character WAD for Ring Racers from a working folder
Icon=kartmakerringracers
Exec=kartmaker_rr
Categories=Development;
Keywords=sonic;wad;kart
Terminal=true
NoDisplay=false
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/followermaker" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/followermaker.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=followermake
Comment=Simple utility that automatically creates a follower WAD for Ring Racers from a working folder
Icon=followermaker
Exec=followermaker
Categories=Development;
Keywords=sonic;wad;kart
Terminal=true
NoDisplay=false
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/slade.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=SLADE
Comment=Allows the manipulation of Doom WAD files
Icon=slade
Exec=slade
Categories=Development;
Keywords=sonic;wad;
Terminal=false
NoDisplay=false
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/ultimatezonebuilder.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Ultimate Zone Builder
Comment=A map editor for UDMF levels in SRB2, forked from Ultimate Doom Builder.
Icon=ultimatezonebuilder
Exec=uzb
Categories=Development;
Keywords=sonic;wad;uzb;
Terminal=false
NoDisplay=false
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/highvoltagering.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=High Voltage Ring
Comment=A map editor for UDMF levels in Ring Racers, forked from Ultimate Zone Builder.
Icon=highvoltagering
Exec=hvr
Categories=Development;
Keywords=sonic;wad;ring;racers;hvr;
Terminal=false
NoDisplay=false
DESKTOP

    elif [ "\$BUILD" = "\$BUILDPATH/aseprite" ]; then

        cat > "\$BUILD/build/AppDir/usr/share/applications/aseprite.desktop" << DESKTOP
[Desktop Entry]
Version=\$COMREV
Type=Application
Name=Aseprite
Comment=Animated sprite editor and pixel art tool.
Icon=aseprite
Exec=aseprite
Categories=Development;
Keywords=aseprite;
Terminal=false
NoDisplay=false
DESKTOP

    fi

    # Modify desktop files for flatpaks.
    if [ "\$FLATPAK" = "1" ]; then

        if [ "\$BUILD" = "\$BUILDPATH/wadcli" ] || [ "\$BUILD" = "\$BUILDPATH/kartmaker" ] || [ "\$BUILD" = "\$BUILDPATH/kartmaker-ring-racers" ] || [ "\$BUILD" = "\$BUILDPATH/followermaker" ]; then

            gawk -i inplace '{gsub("Icon=.*","Icon=org.srb2bld.'\$(\$PRINTF \$BUILD | gawk -F'/' '{print \$NF}')'"); print}' "\$BUILD/build/AppDir/usr/share/applications/\$(\$PRINTF \$BUILD | gawk -F'/' '{print \$NF}').desktop"

        elif [ "\$BUILD" = "\$BUILDPATH/slade" ] || [ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ] || [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ] || [ "\$BUILD" = "\$BUILDPATH/aseprite" ]; then

            gawk -i inplace '{gsub("Exec=.*","Exec=AppRun") || gsub("Icon=.*","Icon=org.srb2bld.'\$(\$PRINTF \$BUILD | gawk -F'/' '{print \$NF}')'"); print}' "\$BUILD/build/AppDir/usr/share/applications/\$(\$PRINTF \$BUILD | gawk -F'/' '{print \$NF}').desktop"

        elif [ "\$(dirname \$BUILD)" = "\$BUILDPATH/srb2-custom" ]; then

            gawk -i inplace '{gsub("Exec=.*","Exec=AppRun -software") || gsub("Icon=.*","Icon=org.srb2bld.'\$(\$PRINTF \$SRB2CNAME | gawk '{gsub("-","_"); gsub("\\\.",""); print}')'"); print}' "\$BUILD/build/AppDir/usr/share/applications/\$SRB2CNAME-software.desktop"
            gawk -i inplace '{gsub("Exec=.*","Exec=AppRun -opengl") || gsub("Icon=.*","Icon=org.srb2bld.'\$(\$PRINTF \$SRB2CNAME | gawk '{gsub("-","_"); gsub("\\\.",""); print}')'"); print}' "\$BUILD/build/AppDir/usr/share/applications/\$SRB2CNAME-opengl.desktop"

        else

            gawk -i inplace '{gsub("Exec=.*","Exec=AppRun -software") || gsub("Icon=.*","Icon=org.srb2bld.'\$(\$PRINTF \$BUILD | gawk -F'/' '{gsub("-","_"); gsub("\\\.",""); print \$NF}')'"); print}' "\$BUILD/build/AppDir/usr/share/applications/\$(\$PRINTF \$BUILD | gawk -F'/' '{print \$NF}')-software.desktop"
            gawk -i inplace '{gsub("Exec=.*","Exec=AppRun -opengl") || gsub("Icon=.*","Icon=org.srb2bld.'\$(\$PRINTF \$BUILD | gawk -F'/' '{gsub("-","_"); gsub("\\\.",""); print \$NF}')'"); print}' "\$BUILD/build/AppDir/usr/share/applications/\$(\$PRINTF \$BUILD | gawk -F'/' '{print \$NF}')-opengl.desktop"

        fi

    fi

    if ([ "\$LNXOSNAME" = "NixOS" ] || [ "\$BUILD" = "\$BUILDPATH/slade" ]) && [ "\$LIBC" != "musl" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker" ] && [ "\$BUILD" != "\$BUILDPATH/kartmaker-ring-racers" ] && [ "\$BUILD" != "\$BUILDPATH/followermaker" ]; then

        cp -Lf \$(LD_LIBRARY_PATH="\$SRB2BLDPREFIX/lib" ldd \$(find "\$BUILD/build/AppDir/usr/bin" -type f) 2> /dev/null | gawk '{print \$3}' | gawk '!/not|dynamic|libc.so|libdl.so|ld-|libm.so|libpthread.so|libresolv.so|librt.so/ {print}') "\$BUILD/build/AppDir/usr/lib"

    fi

    # Get app icon.
    if [ "\$BUILD" = "\$BUILDPATH/wadcli" ] || [ "\$BUILD" = "\$BUILDPATH/kartmaker" ] || [ "\$BUILD" = "\$BUILDPATH/kartmaker-ring-racers" ] || [ "\$BUILD" = "\$BUILDPATH/followermaker" ]; then

        if [ -n "\$ISNET" ]; then

            curl -L https://www.iconfinder.com/icons/285695/download/png/64 -o "\$BUILD/build/icon.png"

        else

            cp -rf \$(find "/usr/share/icons/hicolor" -type f -name "*.png" 2> /dev/null | head -n1) "\$BUILD/build/icon.png"

        fi

        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"

    elif [ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ]; then

        convert "\$BUILD/Setup/UZB-small.bmp" -resize 64x64\! -filter lanczos -alpha on -background none -flatten "\$BUILD/build/icon.png"
        convert "\$BUILD/Setup/UZB-small.bmp" -alpha on -background none "\$BUILD/build/icon.ico"
        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"

    elif [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]; then

        convert "\$BUILD/Setup/HVR-small.bmp" -resize 64x64\! -filter lanczos -alpha on -background none -flatten "\$BUILD/build/icon.png"
        convert "\$BUILD/Setup/HVR-small.bmp" -alpha on -background none "\$BUILD/build/icon.ico"
        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"

    elif [ "\$BUILD" = "\$BUILDPATH/aseprite" ]; then

        ICONSIZE=\$(identify "\$BUILD/data/icons/ase64.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"

    else

        if [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-galaxy" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-hep" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-saturn" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-neptune" ] || [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

            convert "\$BUILD/src/win32/Srb2win.ico" -resize 64x64\! -filter lanczos -alpha on -background none -flatten "\$BUILD/build/icon.png"

        else

            convert "\$BUILD/src/win32/Srb2win.ico[5]" -resize 64x64\! -filter lanczos -alpha on -background none -flatten "\$BUILD/build/icon.png"

        fi

        ICONSIZE=\$(identify "\$BUILD/build/icon.png" | gawk '{print \$3}')
        mkdir -p "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps"

    fi

    if [ "\$BUILD" = "\$BUILDPATH/srb2" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-uncapped-plus" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2uncappedplus.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-netplus" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2netplus.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-rphys" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2rphys.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-tsourdt3rd" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2tsourdt3rd.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-vr" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2vr.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.1-legacy" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2legacy.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-2.0" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2_2.0.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-final-demo" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2finaldemo.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-jte" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2jte.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-persona" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2persona.png"

    elif [ "\$(basename \$BUILD)" = "ring-racers" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/ringracers.png"

    elif [ "\$(basename \$BUILD)" = "ring-racers-noire" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/ringracersnoire.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2kart.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-moe-mansion" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2kartmoemansion.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-galaxy" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2kartgalaxy.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-hep" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2karthep.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-saturn" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2kartsaturn.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-neptune" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2kartneptune.png"

    elif [ "\$BUILD" = "\$BUILDPATH/srb2-kart-vr" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/srb2kartvr.png"

    elif [ "\$(dirname \$BUILD)" = "\$BUILDPATH/srb2-custom" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/"\$SRB2CCONFDIR"c"\$CUSTOMDIR".png"

    elif [ "\$BUILD" = "\$BUILDPATH/wadcli" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/wadcli.png"

    elif [ "\$BUILD" = "\$BUILDPATH/kartmaker" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/kartmaker.png"

    elif [ "\$BUILD" = "\$BUILDPATH/kartmaker-ring-racers" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/kartmakerringracers.png"

    elif [ "\$BUILD" = "\$BUILDPATH/followermaker" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/followermaker.png"

    elif [ "\$BUILD" = "\$BUILDPATH/slade" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/slade.png"

    elif [ "\$BUILD" = "\$BUILDPATH/ultimatezonebuilder" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/ultimatezonebuilder.png"

    elif [ "\$BUILD" = "\$BUILDPATH/highvoltagering" ]; then

        cp -f "\$BUILD/build/icon.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/highvoltagering.png"

    elif [ "\$BUILD" = "\$BUILDPATH/aseprite" ]; then

        cp -f "\$BUILD/data/icons/ase64.png" "\$BUILD/build/AppDir/usr/share/icons/hicolor/\$ICONSIZE/apps/aseprite.png"

    fi

fi

fi

# Correcting path to Ring Racers' source code.
if [ "\$OS" = "Linux" ] && [ "\$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print \$2}' "\$BUILD/src/doomdef.h" 2> /dev/null)" = "RingRacers" ]; then

    sudo rm -rf "\$BUILDMAIN"
    cp -rf "\$BUILD" "\$BUILDMAIN"
    export BUILD="\$BUILDMAIN"

fi

# Correcting compiled build's source code, libraries etc. permissions when running -u/--user or having read-only filesystem.
if [ "\$OSVIRT" = "podman" ] && ([ -n "\$(\$PRINTF "%s\n" "\$ARGS" | gawk 'match(\$0, / -u -| -u\$| --user -| --user\$/) {print substr(\$0, RSTART, RLENGTH)}')" ] || [ -n "\$(\$PRINTF "%s\n" "\$SRB2BLDPREFIX" | gawk 'match(\$0, /\/home\/'\$HOSTUSER'\/.local|\/home\/'\$HOSTUSER'\/SRB2 Games|\/home\/'\$HOSTUSER'\/SRB2 Software/) {print substr(\$0, RSTART, RLENGTH)}')" ]) && ([ "\$APPIMAGE" != "1" ] && [ "\$FLATPAK" != "1" ] && [ "\$ANDROID" != "1" ]) || [ -n "\$ISREADONLY" ]; then

    trap '\$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Correcting permissions to $BUILDNAME'\''s source code. Please wait..." && [ "\$(basename \$BUILD)" = "ring-racers" ] && export BUILD="\$BUILDMAIN" ; sudo find -L "\$BUILD" ! -group root -exec chown -R root:root {} \; ; [ -d "\$SRB2BLDPREFIX/lib" ] && sudo find -L "\$SRB2BLDPREFIX/bin" "\$SRB2BLDPREFIX/include" "\$SRB2BLDPREFIX/lib" "\$SRB2BLDROOT/libraries" "$HOME/.cache/ccache" ! -group root -exec chown -R root:root {} \; 2> /dev/null || true ; exit 0' 0

else

    trap '\$PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Correcting permissions to $BUILDNAME'\''s source code. Please wait..." && [ "\$(basename \$BUILD)" = "ring-racers" ] && export BUILD="\$BUILDMAIN" ; sudo find -L "\$BUILD" -group root -exec chown -R srb2bld:srb2bld {} \; ; exit 0' 0

fi

ENTRYPOINT
    chmod 755 "$SRB2BLDROOT/containers/srb2-games-linux-glibc-container/Entrypoint"

    # Prepare Docker/Podman images.
    find "$SRB2BLDROOT/containers" -mindepth 1 -maxdepth 1 -type d ! -name "srb2-games-linux-glibc-container" -exec rm -rf '{}' \;
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-container" "$SRB2BLDROOT/containers/srb2-tools-linux-glibc-container"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-container" "$SRB2BLDROOT/containers/srb2-uzb-linux-glibc-container"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-container" "$SRB2BLDROOT/containers/srb2-games-linux-musl-container"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-container" "$SRB2BLDROOT/containers/srb2-tools-linux-musl-container"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-container" "$SRB2BLDROOT/containers/srb2-games-windows-container"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-container" "$SRB2BLDROOT/containers/srb2-tools-windows-container"
    cp -rf "$SRB2BLDROOT/containers/srb2-games-linux-glibc-container" "$SRB2BLDROOT/containers/srb2-games-android-container"

    # Set CPU architecture for Docker/Podman images in case of building old SRB2 versions.
    if ([ "$ARCH" = "i386" ] || [ "$ARCH" = "i486" ] || [ "$ARCH" = "i686" ] || [ "$ARCH" = "x86_64" ]) && ([ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]); then

        ISARM="i386/"

    elif ([ "$ARCH" = "armhf" ] || [ "$ARCH" = "aarch64" ]) && ([ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]); then

        ISARM="armhf/"

    fi

    # Create Dockerfiles.
    cat > "$SRB2BLDROOT/containers/srb2-games-linux-glibc-container/Dockerfile" << DOCKERFILE
FROM docker.io/"$ISARM"ubuntu:"$UBUVER"

ENV container $(printf "%s\n" "$OSVIRT" | gawk '{print $1}')

ENV DEBIAN_FRONTEND noninteractive

ENV GNUTLS_CPUID_OVERRIDE 0x1

RUN printf 'Acquire::Check-Valid-Until "false";\nAcquire::Check-Date "false";' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'Dpkg::Options:: "--force-confdef";' > /etc/apt/apt.conf.d/90force-confdef && \
printf 'APT::Install-Recommends "false";\nAPT::Install-Suggests "false";' > /etc/apt/apt.conf.d/90no-recommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates curl gawk && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu $UBUVER main\ndeb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu $UBUVER main\ndeb https://apt.kitware.com/ubuntu/ $UBUVER main" >> /etc/apt/sources.list && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1EE2FF37CA8DA16B" | gawk '!/Comment:|Version:/ {gsub("\r",""); print}' | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/aptfast.gpg > /dev/null && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1E9377A2BA9EF27F" | gawk '!/Comment:|Version:/ {gsub("\r",""); print}' | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/toolchain.gpg > /dev/null && \
curl -Ls "https://apt.kitware.com/keys/kitware-archive-latest.asc" | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/cmake.gpg > /dev/null

RUN apt-get update && \
apt-get full-upgrade -y && \
apt-get install -y apt-fast && \
gawk -i inplace '{sub("DOWNLOADBEFORE=","DOWNLOADBEFORE=true");sub("_MAXNUM=5","_MAXNUM=20"); print}' /etc/apt-fast.conf && \
apt-fast install -y libsdl2-dev libsdl2-mixer-dev libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libpng-dev libgme-dev libopenmpt-dev libfluidsynth-dev libmodplug-dev libjack-dev libcurl4-openssl-dev libupnp-dev zlib1g-dev rapidjson-dev libfuse-dev fuse nasm build-essential $GCCVER $GXXVER $GCCOLDVER $GXXOLDVER $RINGRACERSGCCVER $RINGRACERSGXXVER ccache automake libtool cmake file sudo dash git stow imagemagick zip p7zip-full p7zip-rar

RUN DEBARCH="\$(dpkg --print-architecture)" ; \
curl -RLC - --retry 999 https://snapshot.debian.org/archive/debian/20180611T145305Z/pool/main/m/miniupnpc/libminiupnpc-dev_2.0.20180410-2_\$DEBARCH.deb -o /tmp/libminiupnpc-dev_2.1-1_\$DEBARCH.deb && \
curl -RLC - --retry 999 https://snapshot.debian.org/archive/debian/20180611T145305Z/pool/main/m/miniupnpc/libminiupnpc17_2.0.20180410-2_\$DEBARCH.deb -o /tmp/libminiupnpc17_2.1-1_\$DEBARCH.deb && \
dpkg -i /tmp/*.deb && \
rm -f /tmp/*.deb

RUN mkdir -p "/usr/include/FMOD" "$SRB2BLDROOT/libraries/FMOD" && \
curl -RLC - "https://zdoom.org/files/fmod/$LNXFMODVER.tar.gz" -o "$SRB2BLDROOT/libraries/FMOD/$LNXFMODVER.tar.gz" && \
tar xvf "$SRB2BLDROOT/libraries/FMOD/$LNXFMODVER.tar.gz" --wildcards --strip-components=2 -C "/usr/lib" "$LNXFMODVER/api/libfmod-"*.so && \
tar xvf "$SRB2BLDROOT/libraries/FMOD/$LNXFMODVER.tar.gz" --strip-components=3 -C "/usr/include/FMOD" "$LNXFMODVER/api/inc"

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /bin/dash srb2bld && \
passwd -d srb2bld && \
ln -sf /bin/dash /bin/sh

USER srb2bld

COPY Entrypoint /home/srb2bld/Entrypoint

ENTRYPOINT [ "sh", "/home/srb2bld/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-tools-linux-glibc-container/Dockerfile" << DOCKERFILE
FROM docker.io/"$ISARM"ubuntu:"$UBUSOFTVER"

ENV container $(printf "%s\n" "$OSVIRT" | gawk '{print $1}')

ENV DEBIAN_FRONTEND noninteractive

ENV GNUTLS_CPUID_OVERRIDE 0x1

RUN printf 'Acquire::Check-Valid-Until "false";\nAcquire::Check-Date "false";' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'Dpkg::Options:: "--force-confdef";' > /etc/apt/apt.conf.d/90force-confdef && \
printf 'APT::Install-Recommends "false";\nAPT::Install-Suggests "false";' > /etc/apt/apt.conf.d/90no-recommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates curl gawk && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu $UBUSOFTVER main\ndeb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu $UBUSOFTVER main\ndeb https://apt.kitware.com/ubuntu/ $UBUSOFTVER main\ndeb https://repos.codelite.org/wx3.2.0/ubuntu/ $UBUSOFTVER universe" >> /etc/apt/sources.list && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1EE2FF37CA8DA16B" | gawk '!/Comment:|Version:/ {gsub("\r",""); print}' | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/aptfast.gpg > /dev/null && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1E9377A2BA9EF27F" | gawk '!/Comment:|Version:/ {gsub("\r",""); print}' | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/toolchain.gpg > /dev/null && \
curl -Ls "https://apt.kitware.com/keys/kitware-archive-latest.asc" | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/cmake.gpg > /dev/null && \
curl -Ls "https://repos.codelite.org/CodeLite.asc" | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/libwxgtk.gpg > /dev/null && \
ln -sf /bin/true /usr/bin/chfn

RUN if [ "$ARCH" != "x86_64" ]; then \
unset LNXWXGTKPKG ; \
else \
LNXWXGTKPKG="$LNXWXGTKPKG" ; \
fi

RUN apt-get update && \
apt-get full-upgrade -y && \
apt-get install -y apt-fast && \
gawk -i inplace '{sub("DOWNLOADBEFORE=","DOWNLOADBEFORE=true");sub("_MAXNUM=5","_MAXNUM=20"); print}' /etc/apt-fast.conf && \
apt-fast install -y libfmt-dev libsfml-dev libjpeg-dev libogg-dev libflac-dev libvorbis-dev libopenal-dev libudev-dev libglew-dev libfreeimage-dev libftgl-dev libfluidsynth-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgconf2-dev freeglut3-dev libmodplug-dev \\\\$LNXWXGTKPKG libnotify-dev libcurl4-openssl-dev libbz2-dev gtk2-engines-pixbuf libgtk-3-dev libcanberra-gtk3-dev libcanberra-gtk3-module libcanberra-gtk-dev libcanberra-gtk-module liblua5.3-dev libmpg123-dev libfuse-dev fuse libx11-dev libc++-dev libc++abi-dev libfontconfig1-dev libxcursor-dev libxi-dev libgl1-mesa-dev mesa-common-dev gnome-themes-extra nasm python-is-python3 build-essential g++ $GCCVER $GXXVER $SLADEGCCOLDVER $SLADEGXXOLDVER clang ccache automake libtool cmake ninja-build patchelf file sudo dash git stow imagemagick p7zip-full p7zip-rar

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /bin/dash srb2bld && \
passwd -d srb2bld && \
ln -sf /bin/dash /bin/sh

USER srb2bld

COPY Entrypoint /home/srb2bld/Entrypoint

ENTRYPOINT [ "sh", "/home/srb2bld/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-uzb-linux-glibc-container/Dockerfile" << DOCKERFILE
FROM docker.io/"$ISARM"ubuntu:"$UBUUZBVER"

ENV container $(printf "%s\n" "$OSVIRT" | gawk '{print $1}')

ENV DEBIAN_FRONTEND noninteractive

ENV GNUTLS_CPUID_OVERRIDE 0x1

RUN printf 'Acquire::Check-Valid-Until "false";\nAcquire::Check-Date "false";' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'Dpkg::Options:: "--force-confdef";' > /etc/apt/apt.conf.d/90force-confdef && \
printf 'APT::Install-Recommends "false";\nAPT::Install-Suggests "false";' > /etc/apt/apt.conf.d/90no-recommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates curl gawk && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu $UBUUZBVER main\ndeb http://ppa.launchpad.net/ubuntu-toolchain-r/test/ubuntu $UBUUZBVER main\ndeb https://download.mono-project.com/repo/ubuntu stable-$UBUUZBVER/snapshots/$LNXMONOVER main" >> /etc/apt/sources.list && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1EE2FF37CA8DA16B" | gawk '!/Comment:|Version:/ {gsub("\r",""); print}' | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/aptfast.gpg > /dev/null && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1E9377A2BA9EF27F" | gawk '!/Comment:|Version:/ {gsub("\r",""); print}' | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/toolchain.gpg > /dev/null && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF" | gawk '!/Comment:|Version:/ {gsub("\r",""); print}' | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/mono.gpg > /dev/null

RUN apt-get update && \
apt-get full-upgrade -y && \
apt-get install -y apt-fast && \
gawk -i inplace '{sub("DOWNLOADBEFORE=","DOWNLOADBEFORE=true");sub("_MAXNUM=5","_MAXNUM=20"); print}' /etc/apt-fast.conf && \
apt-fast install -y libfmt-dev libsfml-dev libjpeg-dev libogg-dev libflac-dev libvorbis-dev libopenal-dev libudev-dev libglew-dev libfreeimage-dev libftgl-dev libfluidsynth-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgconf2-dev freeglut3-dev libmodplug-dev libnotify-dev libcurl4-openssl-dev libbz2-dev gtk2-engines-pixbuf libgtk-3-dev libcanberra-gtk3-dev libcanberra-gtk3-module libcanberra-gtk-dev libcanberra-gtk-module liblua5.3-dev libmpg123-dev libfuse-dev fuse libx11-dev mesa-common-dev mono-complete gnome-themes-extra nasm build-essential g++ $GCCVER $GXXVER ccache automake libtool cmake patchelf file sudo dash git stow imagemagick p7zip-full p7zip-rar

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /bin/dash srb2bld && \
passwd -d srb2bld && \
ln -sf /bin/dash /bin/sh

USER srb2bld

COPY Entrypoint /home/srb2bld/Entrypoint

ENTRYPOINT [ "sh", "/home/srb2bld/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-games-linux-musl-container/Dockerfile" << DOCKERFILE
FROM docker.io/"$ISARM"alpine:latest

ENV container $(printf "%s\n" "$OSVIRT" | gawk '{print $1}')

ENV GNUTLS_CPUID_OVERRIDE 0x1

RUN printf "https://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories && \
apk update && \
apk upgrade && \
apk add sdl2-dev sdl2_mixer-dev sdl12-compat-dev sdl_mixer-dev glu-dev libpng-dev libgme-dev libopenmpt-dev fluidsynth-dev libmodplug-dev mpg123-dev jack-dev curl-dev miniupnpc-dev libupnp-dev zlib-dev rapidjson-dev nasm build-base ccache alpine-sdk automake autoconf libtool cmake sudo bash dash shadow gawk curl git stow imagemagick zip p7zip findutils && \
if [ "$ARCH" = "x86_64" ]; then \
curl -L https://7-zip.org/a/7z2301-linux-x64.tar.xz -o /tmp/7z2301-linux.tar.xz ; \
elif [ "$ARCH" = "i386" ] || [ "$ARCH" = "i486" ] || [ "$ARCH" = "i686" ]; then \
curl -L https://7-zip.org/a/7z2301-linux-x86.tar.xz -o /tmp/7z2301-linux.tar.xz ; \
elif [ "$ARCH" = "armhf" ] || [ "$ARCH" = "aarch64" ]; then \
curl -L https://7-zip.org/a/7z2301-linux-arm$IS64.tar.xz -o /tmp/7z2301-linux.tar.xz ; \
fi && \
7z x /tmp/7z2301-linux.tar.xz -so | 7z x -aoa -si -ttar 7zzs -o/usr/bin && \
mv /usr/bin/7zzs /usr/bin/7z

RUN printf "%s\n" "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G wheel,abuild -s /usr/bin/dash srb2bld && \
passwd -d srb2bld && \
ln -sf /usr/bin/dash /bin/sh

USER srb2bld

RUN APKARCH=\$(apk --print-arch) && \
curl -RLC - https://git.alpinelinux.org/aports/plain/main/libexecinfo/APKBUILD?h=3.16-stable -o/tmp/APKBUILD && \
curl -RLC - https://git.alpinelinux.org/aports/plain/main/libexecinfo/10-execinfo.patch?h=3.16-stable -o/tmp/10-execinfo.patch && \
curl -RLC - https://git.alpinelinux.org/aports/plain/main/libexecinfo/20-define-gnu-source.patch?h=3.16-stable -o/tmp/20-define-gnu-source.patch && \
curl -RLC - https://git.alpinelinux.org/aports/plain/main/libexecinfo/30-linux-makefile.patch?h=3.16-stable -o/tmp/30-linux-makefile.patch && \
cd /tmp && \
abuild-keygen -nai && \
abuild -rc -P /tmp && \
curl -RLC - https://dl-cdn.alpinelinux.org/alpine/v3.18/community/\$APKARCH/libstdc%2B%2B6-6.4.0-r16.apk -o/tmp/libstdc%2B%2B6-6.4.0-r16.apk && \
curl -RLC - https://dl-cdn.alpinelinux.org/alpine/v3.18/community/\$APKARCH/gcc6-6.4.0-r16.apk -o/tmp/gcc6-6.4.0-r16.apk && \
sudo apk add \$(find /tmp -name "*.apk" 2> /dev/null)

RUN sudo ln -sf ../../../bin/ccache /usr/lib/ccache/bin/gcc-6

COPY Entrypoint /home/srb2bld/Entrypoint

ENTRYPOINT [ "sh", "/home/srb2bld/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-tools-linux-musl-container/Dockerfile" << DOCKERFILE
FROM docker.io/"$ISARM"alpine:latest

ENV container $(printf "%s\n" "$OSVIRT" | gawk '{print $1}')

ENV GNUTLS_CPUID_OVERRIDE 0x1

RUN apk update && \
apk upgrade && \
apk add fmt-dev sfml-dev jpeg-dev libogg-dev flac-dev libvorbis-dev openal-soft-dev eudev-dev glew-dev freeimage-dev ftgl-dev fluidsynth-dev gstreamer-dev gst-plugins-base-dev freeglut-dev libmodplug-dev wxwidgets-dev curl-dev libbz2 gtk+3.0 lua-dev mpg123-dev fuse-dev libc-dev libc-utils libx11-dev libxcursor-dev libxi-dev mesa-dev fontconfig-dev nasm build-base g++ clang ccache alpine-sdk automake autoconf libtool cmake ninja sudo bash dash gawk curl git shadow imagemagick stow p7zip findutils

RUN printf "%s\n" "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G wheel,abuild -s /usr/bin/dash srb2bld && \
passwd -d srb2bld && \
ln -sf /usr/bin/dash /bin/sh

USER srb2bld

RUN APKARCH=\$(apk --print-arch) && \
curl -RLC - https://git.alpinelinux.org/aports/plain/main/libexecinfo/APKBUILD?h=3.16-stable -o/tmp/APKBUILD && \
curl -RLC - https://git.alpinelinux.org/aports/plain/main/libexecinfo/10-execinfo.patch?h=3.16-stable -o/tmp/10-execinfo.patch && \
curl -RLC - https://git.alpinelinux.org/aports/plain/main/libexecinfo/20-define-gnu-source.patch?h=3.16-stable -o/tmp/20-define-gnu-source.patch && \
curl -RLC - https://git.alpinelinux.org/aports/plain/main/libexecinfo/30-linux-makefile.patch?h=3.16-stable -o/tmp/30-linux-makefile.patch && \
cd /tmp && \
abuild-keygen -nai && \
abuild -rc -P /tmp && \
sudo apk add \$(find /tmp -name "*.apk" 2> /dev/null)

COPY Entrypoint /home/srb2bld/Entrypoint

ENTRYPOINT [ "sh", "/home/srb2bld/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-games-windows-container/Dockerfile" << DOCKERFILE
FROM docker.io/"$ISARM"debian:latest

ENV container $(printf "%s\n" "$OSVIRT" | gawk '{print $1}')

ENV DEBIAN_FRONTEND noninteractive

ENV GNUTLS_CPUID_OVERRIDE 0x1

RUN printf 'Acquire::Check-Valid-Until "false";\nAcquire::Check-Date "false";' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'Dpkg::Options:: "--force-confdef";' > /etc/apt/apt.conf.d/90force-confdef && \
printf 'APT::Install-Recommends "false";\nAPT::Install-Suggests "false";' > /etc/apt/apt.conf.d/90no-recommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates curl gawk && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu jammy main" >> /etc/apt/sources.list.d/apt-fast.list && \
printf "deb https://packages.microsoft.com/ubuntu/22.04/prod/ jammy main" >> /etc/apt/sources.list.d/powershell.list && \
gawk -i inplace '{gsub("main","main contrib non-free"); print}' /etc/apt/sources.list.d/debian.sources && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1EE2FF37CA8DA16B" | gawk '!/Comment:|Version:/ {gsub("\r",""); print}' | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/aptfast.gpg > /dev/null && \
curl -Ls "https://packages.microsoft.com/keys/microsoft.asc" | gawk '!/Comment:|Version:/ {gsub("\r",""); print}' | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/powershell.gpg > /dev/null

RUN apt-get update && \
apt-get full-upgrade -y && \
apt-get install -y apt-fast && \
gawk -i inplace '{sub("DOWNLOADBEFORE=","DOWNLOADBEFORE=true");sub("_MAXNUM=5","_MAXNUM=20"); print}' /etc/apt-fast.conf && \
apt-fast install -y libsdl2-dev libsdl2-mixer-dev libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libpng-dev libgme-dev libopenmpt-dev libfluidsynth-dev libmodplug-dev libjack-dev libcurl4-openssl-dev libminiupnpc-dev libupnp-dev zlib1g-dev rapidjson-dev libfuse-dev libc6-dev-i386-cross fuse nasm build-essential ninja-build mingw-w64 ccache automake libtool cmake file sudo dash git-svn stow imagemagick p7zip-full p7zip-rar zip unzip tar

RUN if [ "$BUILD" != "$BUILDPATH/srb2-final-demo" ] && [ "$BUILD" != "$BUILDPATH/srb2-jte" ]; then \
apt-get install -y powershell ; \
fi

RUN ln -sf ../../bin/ccache /usr/lib/ccache/i686-w64-mingw32-$MINGWCCVER && \
ln -sf ../../bin/ccache /usr/lib/ccache/$ARCH-w64-mingw32-$MINGWCCVER && \
ln -sf ../../bin/ccache /usr/lib/ccache/i686-w64-mingw32-$MINGWCXXVER && \
ln -sf ../../bin/ccache /usr/lib/ccache/$ARCH-w64-mingw32-$MINGWCXXVER && \
ln -sf ../../bin/ccache /usr/lib/ccache/i686-w64-mingw32-gcc-posix && \
ln -sf ../../bin/ccache /usr/lib/ccache/$ARCH-w64-mingw32-gcc-posix && \
ln -sf ../../bin/ccache /usr/lib/ccache/i686-w64-mingw32-g++-posix && \
ln -sf ../../bin/ccache /usr/lib/ccache/$ARCH-w64-mingw32-g++-posix

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /usr/bin/dash srb2bld && \
passwd -d srb2bld

USER srb2bld

COPY Entrypoint /home/srb2bld/Entrypoint

ENTRYPOINT [ "sh", "/home/srb2bld/Entrypoint" ]

# Download and install old version of gcc compiler and FMOD to compile old SRB2 versions on Windows.
RUN if [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then \
DEBARCH="\$(dpkg --print-architecture)" ; \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20150828T100026Z/pool/main/b/binutils-mingw-w64/binutils-mingw-w64-i686_2.25-5%2B5.2%2Bdeb8u1_\$DEBARCH.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20141220T040525Z/pool/main/g/gcc-mingw-w64/gcc-mingw-w64_4.9.1-19%2B14.3_all.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20141220T100804Z/pool/main/g/gcc-mingw-w64/gcc-mingw-w64-base_4.9.1-19%2B14.3_\$DEBARCH.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20141220T100804Z/pool/main/g/gcc-mingw-w64/gcc-mingw-w64-i686_4.9.1-19%2B14.3_\$DEBARCH.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20140912T042222Z/pool/main/m/mingw-w64/mingw-w64_3.2.0-2_all.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20140912T042222Z/pool/main/m/mingw-w64/mingw-w64-common_3.2.0-2_all.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20140912T042222Z/pool/main/m/mingw-w64/mingw-w64-i686-dev_3.2.0-2_all.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20141209T220743Z/pool/main/c/cloog/libcloog-isl4_0.18.2-1%2Bb2_\$DEBARCH.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20140625T223032Z/pool/main/i/isl/libisl10_0.12.2-2_\$DEBARCH.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20140710T222555Z/pool/main/m/mpclib3/libmpc3_1.0.2-1_\$DEBARCH.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20141211T161416Z/pool/main/m/mpfr4/libmpfr4_3.1.2-2_\$DEBARCH.deb --output-dir /tmp && \
for i in /tmp/*.deb; do sudo dpkg-deb -xv "\$i" /usr/local/stow; done && \
sudo mv -f /usr/local/stow/usr /usr/local/stow/mingw-w64-4.9 && \
STOW_DIR=/usr/local/stow sudo -E stow -v mingw-w64-4.9 && \
sudo mkdir -p "/usr/include/FMOD" "$SRB2BLDROOT/libraries/FMOD" && \
sudo curl -RLOC - "https://zdoom.org/files/fmod/$LNXFMODVER.tar.gz" --output-dir "$SRB2BLDROOT/libraries/FMOD" && \
sudo tar xvf "$SRB2BLDROOT/libraries/FMOD/$LNXFMODVER.tar.gz" --wildcards --strip-components=2 -C "/usr/lib" "$LNXFMODVER/api/libfmod-"*.so && \
sudo tar xvf "$SRB2BLDROOT/libraries/FMOD/$LNXFMODVER.tar.gz" --strip-components=3 -C "/usr/include/FMOD" "$LNXFMODVER/api/inc" && \
sudo ln -sf ../../bin/ccache /usr/lib/ccache/i686-w64-mingw32-$MINGWOLDCCVER && \
sudo ln -sf ../../bin/ccache /usr/lib/ccache/$ARCH-w64-mingw32-$MINGWOLDCCVER ; \
elif [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20150828T100026Z/pool/main/b/binutils-mingw-w64/binutils-mingw-w64-i686_2.25-5%2B5.2%2Bdeb8u1_i386.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20141220T040525Z/pool/main/g/gcc-mingw-w64/gcc-mingw-w64_4.9.1-19%2B14.3_all.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20141220T100804Z/pool/main/g/gcc-mingw-w64/gcc-mingw-w64-base_4.9.1-19%2B14.3_i386.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20141220T100804Z/pool/main/g/gcc-mingw-w64/gcc-mingw-w64-i686_4.9.1-19%2B14.3_i386.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20140912T042222Z/pool/main/m/mingw-w64/mingw-w64_3.2.0-2_all.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20140912T042222Z/pool/main/m/mingw-w64/mingw-w64-common_3.2.0-2_all.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20140912T042222Z/pool/main/m/mingw-w64/mingw-w64-i686-dev_3.2.0-2_all.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20141209T220743Z/pool/main/c/cloog/libcloog-isl4_0.18.2-1%2Bb2_i386.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20140625T223032Z/pool/main/i/isl/libisl10_0.12.2-2_i386.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20140710T222555Z/pool/main/m/mpclib3/libmpc3_1.0.2-1_i386.deb --output-dir /tmp && \
curl -RLOC - --retry 999 https://snapshot.debian.org/archive/debian/20141211T161416Z/pool/main/m/mpfr4/libmpfr4_3.1.2-2_i386.deb --output-dir /tmp && \
for i in /tmp/*.deb; do sudo dpkg-deb -xv "\$i" /usr/local/stow; done && \
sudo mv -f /usr/local/stow/usr /usr/local/stow/mingw-w64-4.9 && \
STOW_DIR=/usr/local/stow sudo -E stow -v mingw-w64-4.9 && \
sudo mkdir -p "/usr/include/FMOD" "$SRB2BLDROOT/libraries/FMOD" && \
sudo curl -RLOC - "https://zdoom.org/files/fmod/$LNXFMODVER.tar.gz" --output-dir "$SRB2BLDROOT/libraries/FMOD" && \
sudo tar xvf "$SRB2BLDROOT/libraries/FMOD/$LNXFMODVER.tar.gz" --wildcards --strip-components=2 -C "/usr/lib" "$LNXFMODVER/api/libfmod-"*.so && \
sudo tar xvf "$SRB2BLDROOT/libraries/FMOD/$LNXFMODVER.tar.gz" --strip-components=3 -C "/usr/include/FMOD" "$LNXFMODVER/api/inc" && \
sudo ln -sf ../../bin/ccache /usr/lib/ccache/i686-w64-mingw32-$MINGWOLDCCVER && \
sudo ln -sf ../../bin/ccache /usr/lib/ccache/$ARCH-w64-mingw32-$MINGWOLDCCVER ; \
fi

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-tools-windows-container/Dockerfile" << DOCKERFILE
FROM docker.io/"$ISARM"ubuntu:"$UBUSOFTVER"

ENV container $(printf "%s\n" "$OSVIRT" | gawk '{print $1}')

ENV DEBIAN_FRONTEND noninteractive

ENV GNUTLS_CPUID_OVERRIDE 0x1

RUN printf 'Acquire::Check-Valid-Until "false";\nAcquire::Check-Date "false";' > /etc/apt/apt.conf.d/90ignore-release-date && \
printf 'Dpkg::Options:: "--force-confdef";' > /etc/apt/apt.conf.d/90force-confdef && \
printf 'APT::Install-Recommends "false";\nAPT::Install-Suggests "false";' > /etc/apt/apt.conf.d/90no-recommend && \
apt-get update && \
apt-get install -y gnupg apt-transport-https ca-certificates curl gawk && \
gawk -i inplace '{gsub("main","main contrib non-free"); print}' /etc/apt/sources.list && \
printf "deb http://ppa.launchpad.net/apt-fast/stable/ubuntu $UBUSOFTVER main\ndeb https://download.mono-project.com/repo/ubuntu stable-$UBUSOFTVER main\ndeb https://apt.kitware.com/ubuntu/ $UBUSOFTVER main" >> /etc/apt/sources.list && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x1EE2FF37CA8DA16B" | gawk '!/Comment:|Version:/ {gsub("\r",""); print}' | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/aptfast.gpg > /dev/null && \
curl -Ls "https://keyserver.ubuntu.com/pks/lookup?op=get&search=0x3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF" | gawk '!/Comment:|Version:/ {gsub("\r",""); print}' | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/mono.gpg > /dev/null && \
curl -Ls "https://apt.kitware.com/keys/kitware-archive-latest.asc" | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/cmake.gpg > /dev/null

RUN apt-get update && \
apt-get full-upgrade -y && \
apt-get install -y apt-fast && \
gawk -i inplace '{sub("DOWNLOADBEFORE=","DOWNLOADBEFORE=true");sub("_MAXNUM=5","_MAXNUM=20"); print}' /etc/apt-fast.conf && \
apt-fast install -y libfluidsynth-dev libmodplug-dev libjack-dev libcurl4-openssl-dev libupnp-dev zlib1g-dev libglew-dev libfreeimage-dev libftgl-dev libsfml-dev libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgconf2-dev freeglut3-dev libwxgtk3.0-gtk3-dev libwxgtk-media3.0-gtk3-dev libwxgtk-webview3.0-gtk3-dev libbz2-dev libgtk-3-dev liblua5.3-dev libfmt-dev libmpg123-dev rapidjson-dev libfuse-dev libx11-dev mesa-common-dev mono-complete fuse nasm build-essential mingw-w64 ccache automake libtool cmake file sudo dash git stow imagemagick p7zip-full p7zip-rar

RUN ln -sf ../../bin/ccache /usr/lib/ccache/i686-w64-mingw32-$MINGWCCVER && \
ln -sf ../../bin/ccache /usr/lib/ccache/$ARCH-w64-mingw32-$MINGWCCVER && \
ln -sf ../../bin/ccache /usr/lib/ccache/i686-w64-mingw32-$MINGWCXXVER && \
ln -sf ../../bin/ccache /usr/lib/ccache/$ARCH-w64-mingw32-$MINGWCXXVER

RUN printf "%s\n" "%sudo ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G sudo -s /usr/bin/dash srb2bld && \
passwd -d srb2bld

USER srb2bld

COPY Entrypoint /home/srb2bld/Entrypoint

ENTRYPOINT [ "sh", "/home/srb2bld/Entrypoint" ]

DOCKERFILE

    cat > "$SRB2BLDROOT/containers/srb2-games-android-container/Dockerfile" << DOCKERFILE
FROM docker.io/alvrme/alpine-android-base:"$ANDROIDSDKVER"

ENV container $(printf "%s\n" "$OSVIRT" | gawk '{print $1}')

ENV GNUTLS_CPUID_OVERRIDE 0x1

RUN apk update && \
apk upgrade && \
apk add file sudo bash dash gawk curl git shadow p7zip findutils

RUN printf "%s\n" "%wheel ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers && \
useradd -m -G wheel,abuild -s /usr/bin/dash srb2bld && \
passwd -d srb2bld && \
ln -sf /usr/bin/dash /bin/sh

USER srb2bld

COPY Entrypoint /home/srb2bld/Entrypoint

ENTRYPOINT [ "sh", "/home/srb2bld/Entrypoint" ]

DOCKERFILE
}

containerrun() {
    # Restarting Docker daemon in order to avoid connection to be refused by Docker image repository. One time check after every reboot/shutdown of system.
    if [ ! -f /tmp/srb2bld-docker ] && [ ! -x "$(command -v podman 2> /dev/null)" ]; then

        if [ -x "$(command -v doas 2> /dev/null)" ]; then

            SUDO="doas"

        else

            SUDO="sudo"

        fi

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Restarting Docker daemon. Please wait..."

        if [ -x "$(command -v systemctl 2> /dev/null)" ] && [ -n "$(systemctl --user list-units docker.service | gawk '/docker/ {print $1}')" ]; then

            systemctl --user restart docker

        elif [ -x "$(command -v systemctl 2> /dev/null)" ] && [ -n "$(systemctl list-units docker.service | gawk '/docker/ {print $1}')" ]; then

            $SUDO systemctl restart docker

        elif [ -x "$(command -v rc-service 2> /dev/null)" ]; then

            $SUDO rc-service docker restart

        elif [ -x "$(command -v sv 2> /dev/null)" ]; then

            $SUDO sv restart docker

        fi

        touch /tmp/srb2bld-docker

        if [ -n "$($PRINTF "%s\n" "$ARGS" | gawk 'match($0, / -u -| -u$| --user -| --user$/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$SRB2BLDPREFIX" | gawk 'match($0, /\/home\/'$USER'\/.local/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$ISREADONLY" ]; then

            unset SUDO

        fi

        sleep 1

    fi

    if [ "$ANDROID" = "1" ]; then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for SRB2 Android. Please wait..."

        if [ -n "$ISNET" ]; then

            $OSVIRT pull docker.io/alvrme/alpine-android-base:"$ANDROIDSDKVER"

        fi

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for SRB2 Android. Please wait..."
        $OSVIRT build --rm -t srb2-games-android-container "$SRB2BLDROOT/containers/srb2-games-android-container"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Running $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') container from built image for $BUILDNAME. Please wait..."

        if [ "$OS" = "Windows" ]; then

            $OSVIRT run $OSVIRTOPTS --volume="$($PRINTF "%s\n" "$USERPROFILE")\\AppData\\Roaming\\srb2bld:$SRB2BLDROOT:rw" --volume="$($PRINTF "%s\n" "$USERPROFILE")\\.cache\\gradle:$GRADLE_USER_HOME:rw" srb2-games-android-container

        elif [ "$OS" = "Linux" ]; then

            $OSVIRT run $OSVIRTOPTS --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="$GRADLE_USER_HOME:$GRADLE_USER_HOME:rw" srb2-games-android-container

        fi

    elif [ "$OS" = "Windows" ] && ([ "$BUILD" = "$BUILDPATH/wadcli" ] || [ "$BUILD" = "$BUILDPATH/kartmaker" ] || [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ] || [ "$BUILD" = "$BUILDPATH/followermaker" ] || [ "$BUILD" = "$BUILDPATH/slade" ] || [ "$BUILD" = "$BUILDPATH/ultimatezonebuilder" ] || [ "$BUILD" = "$BUILDPATH/highvoltagering" ] || [ "$BUILD" = "$BUILDPATH/aseprite" ]); then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for Windows SRB2 tools. Please wait..."

        if [ -n "$ISNET" ]; then

            $OSVIRT pull docker.io/"$ISARM"ubuntu:"$UBUSOFTVER"

        fi

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for Windows SRB2 tools. Please wait..."
        $OSVIRT build --rm -t srb2-tools-windows-container "$SRB2BLDROOT/containers/srb2-tools-windows-container"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Running $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') container from built image for $BUILDNAME. Please wait..."
        $OSVIRT run $OSVIRTOPTS --volume="$($PRINTF "%s\n" "$USERPROFILE")\\AppData\\Roaming\\srb2bld:$SRB2BLDROOT:rw" --volume="$($PRINTF "%s\n" "$USERPROFILE")\\.cache\\ccache:$CCACHE_DIR:rw" srb2-tools-windows-container

    elif [ "$OS" = "Windows" ]; then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for Windows SRB2 builds. Please wait..."

        if [ -n "$ISNET" ]; then

            $OSVIRT pull docker.io/"$ISARM"debian:latest

        fi

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for Windows SRB2 builds. Please wait..."
        $OSVIRT build --rm -t srb2-games-windows-container "$SRB2BLDROOT/containers/srb2-games-windows-container"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Running $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') container from built image for $BUILDNAME. Please wait..."
        $OSVIRT run $OSVIRTOPTS --volume="$($PRINTF "%s\n" "$USERPROFILE")\\AppData\\Roaming\\srb2bld:$SRB2BLDROOT:rw" --volume="$($PRINTF "%s\n" "$USERPROFILE")\\.cache\\ccache:$CCACHE_DIR:rw" --volume="$($PRINTF "%s\n" "$USERPROFILE")\\.cache\\vcpkg:/home/srb2bld/.cache/vcpkg:rw" srb2-games-windows-container

    elif [ "$LIBC" = "musl" ] && ([ "$BUILD" = "$BUILDPATH/wadcli" ] || [ "$BUILD" = "$BUILDPATH/kartmaker" ] || [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ] || [ "$BUILD" = "$BUILDPATH/followermaker" ] || [ "$BUILD" = "$BUILDPATH/slade" ] || [ "$BUILD" = "$BUILDPATH/aseprite" ]); then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for musl based Linux SRB2 tools. Please wait..."

        if [ -n "$ISNET" ]; then

            $OSVIRT pull docker.io/"$ISARM"alpine:latest

        fi

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for musl based Linux SRB2 tools. Please wait..."
        $OSVIRT build --rm -t srb2-tools-linux-musl-container "$SRB2BLDROOT/containers/srb2-tools-linux-musl-container"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Running $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') container from built image for $BUILDNAME. Please wait..."
        $OSVIRT run $OSVIRTOPTS --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="$SRB2BLDPREFIX:$SRB2BLDPREFIX:rw" --volume="$CCACHE_DIR:$CCACHE_DIR:rw" srb2-tools-linux-musl-container

    elif [ "$LIBC" = "musl" ] && ([ "$BUILD" != "$BUILDPATH/ultimatezonebuilder" ] && [ "$BUILD" != "$BUILDPATH/highvoltagering" ]); then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for musl based Linux SRB2 builds. Please wait..."

        if [ -n "$ISNET" ]; then

            $OSVIRT pull docker.io/"$ISARM"alpine:latest

        fi

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for musl based Linux SRB2 builds. Please wait..."
        $OSVIRT build --rm -t srb2-games-linux-musl-container "$SRB2BLDROOT/containers/srb2-games-linux-musl-container"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Running $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') container from built image for $BUILDNAME. Please wait..."
        $OSVIRT run $OSVIRTOPTS --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="$SRB2BLDPREFIX:$SRB2BLDPREFIX:rw" --volume="$CCACHE_DIR:$CCACHE_DIR:rw" srb2-games-linux-musl-container

    elif [ "$OS" = "Linux" ] && ([ "$BUILD" = "$BUILDPATH/wadcli" ] || [ "$BUILD" = "$BUILDPATH/kartmaker" ] || [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ] || [ "$BUILD" = "$BUILDPATH/followermaker" ] || [ "$BUILD" = "$BUILDPATH/slade" ] || [ "$BUILD" = "$BUILDPATH/aseprite" ]); then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for glibc based Linux SRB2 tools. Please wait..."

        if [ -n "$ISNET" ]; then

            $OSVIRT pull docker.io/"$ISARM"ubuntu:"$UBUSOFTVER"

        fi

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for glibc based Linux SRB2 tools. Please wait..."
        $OSVIRT build --rm -t srb2-tools-linux-glibc-container "$SRB2BLDROOT/containers/srb2-tools-linux-glibc-container"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Running $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') container from built image for $BUILDNAME. Please wait..."
        $OSVIRT run $OSVIRTOPTS --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="$SRB2BLDPREFIX:$SRB2BLDPREFIX:rw" --volume="$CCACHE_DIR:$CCACHE_DIR:rw" srb2-tools-linux-glibc-container

    elif [ "$OS" = "Linux" ] && ([ "$BUILD" = "$BUILDPATH/ultimatezonebuilder" ] || [ "$BUILD" = "$BUILDPATH/highvoltagering" ]); then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for glibc based Linux SRB2 tools. Please wait..."

        if [ -n "$ISNET" ]; then

            $OSVIRT pull docker.io/"$ISARM"ubuntu:"$UBUUZBVER"

        fi

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for glibc based Linux Ultimate Zone Builder or High Voltage Ring. Please wait..."
        $OSVIRT build --rm -t srb2-uzb-linux-glibc-container "$SRB2BLDROOT/containers/srb2-uzb-linux-glibc-container"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Running $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') container from built image for $BUILDNAME. Please wait..."
        $OSVIRT run $OSVIRTOPTS --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="$SRB2BLDPREFIX:$SRB2BLDPREFIX:rw" --volume="$CCACHE_DIR:$CCACHE_DIR:rw" srb2-uzb-linux-glibc-container

    else

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for glibc based Linux SRB2 builds. Please wait..."

        if [ -n "$ISNET" ]; then

            $OSVIRT pull docker.io/"$ISARM"ubuntu:"$UBUVER"

        fi

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') image for glibc based Linux SRB2 builds. Please wait..."
        $OSVIRT build --rm -t srb2-games-linux-glibc-container "$SRB2BLDROOT/containers/srb2-games-linux-glibc-container"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Running $($PRINTF "%s\n" "$OSVIRT" | gawk 'match($0, /docker|podman/) {print substr($0, RSTART, RLENGTH)}') container from built image for $BUILDNAME. Please wait..."
        $OSVIRT run $OSVIRTOPTS --volume="$SRB2BLDROOT:$SRB2BLDROOT:rw" --volume="$SRB2BLDPREFIX:$SRB2BLDPREFIX:rw" --volume="$CCACHE_DIR:$CCACHE_DIR:rw" srb2-games-linux-glibc-container

    fi
}

custombuild() {
    BUILD="$BUILDPATH/srb2-custom"

    mkdir -p "$BUILD"

    if [ -z "$SRB2BLDGITPATH" ]; then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please enter valid Git local or remote path."
        read -r SRB2BLDGITPATH

    fi

    $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please enter name of custom build (it will be written as subdirectory in srb2-custom folder)."
    read -r CUSTOMDIR

    while printf "%s\n" "$CUSTOMDIR"; do

        if [ -z "$CUSTOMDIR" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please enter again."

            read -r CUSTOMDIR

        else

            break

        fi

    done

    BUILD="$BUILDPATH/srb2-custom/$CUSTOMDIR"

    # Check whether SRB2BLDGITPATH environment variable is set or not.
    if [ -z "$SRB2BLDGITPATH" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: No SRB2BLDGITPATH is set. Add SRB2BLDGITPATH environment variable to valid Git local or remote path in shell configuration file (for example \".bash_profile\" or \".zshrc\" or \".bashrc\").
                EXAMPLE:
			1. export SRB2BLDGITPATH=\"https://github.com/STJr/SRB2\"

			2. export SRB2BLDGITPATH=\"https://git.do.srb2.org/TehRealSalt/SRB2\"

			3. export SRB2BLDGITPATH=\"\$HOME/Builds/SRB2\"

			4. export SRB2BLDGITPATH=\"C:\Builds\SRB2\"
                "
        exit

    fi

    if [ -z "$(find "$SRB2BLDGITPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | head -n1)" ] && [ -z "$(curl -vI "$SRB2BLDGITPATH" 2>&1 | gawk '/> Host:/ {gsub("\r",""); print $NF}')" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find path to custom SRB2's source code at $SRB2BLDGITPATH path. Exiting."
        exit

    fi

    # Check if directory srb2-custom exits in script's data path.
    if ([ -d "$BUILD/.git" ] && [ -n "$(git -C "$SRB2BLDGITPATH" diff --shortstat 2> /dev/null)" ]) || ([ -d "$BUILD/.git" ] && [ "$(git -C "$BUILD" remote show origin 2> /dev/null | gawk '/Fetch URL/ {print $NF}')" != "$(git -C "$SRB2BLDGITPATH" remote show origin 2> /dev/null | gawk '/Fetch URL/ {print $NF}')" ]) && ([ -d "$BUILD/.git" ] && [ "$(git -C "$BUILD" remote show origin 2> /dev/null | gawk '/Fetch URL/ {print $NF}')" != "$($PRINTF "$SRB2BLDGITPATH" | gawk '{gsub(".git$",""); print}').git" ]); then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Found existing directory with source code in $BUILD path. Are you sure you want to remove it? Enter \"yes/Yes\" or \"no/No\" (\"y/Y\" or \"n/N\"). If you choose \"no/No\", \"n/N\" or just press enter, script will continue with current source code's directory in $BUILD path. Press ctrl+c to quit."
        $PRINTF "$PROMPT\n%s\e[0m" "> "
        read -r CONFIRM

        if [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Removing existing source at path $BUILD. Please wait..."
            sleep 1
            rm -rf "$BUILD"

        fi

    fi

    # Fixing Windows path to source code to be found by script.
    if [ "$OS" = "Windows" ]; then

        SRB2BLDGITPATH=$($PRINTF "%s\n" "$SRB2BLDGITPATH" | gawk 'gsub("\\\\","\\\\");{print}' | gawk '!a[$0]++ {print}')

    fi

    # Copy directory with source code to script's data path.
    if [ -n "$(find "$SRB2BLDGITPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | head -n1)" ] && [ ! -d "$BUILD/.git" ]; then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Copying source code. Please wait..."
        sleep 1
        cp -rf "$SRB2BLDGITPATH" "$BUILDPATH/srb2-custom/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')"

    fi

    # Set proper default branch.
    if [ -n "$SRB2BLDGITVER" ] && [ ! -d "$BUILD/.git" ] || [ -n "$ISNET" ]; then

        GITDEFVER="--branch $SRB2BLDGITVER"

    elif [ -z "$SRB2BLDGITVER" ] && [ ! -d "$BUILD/.git" ] || [ -n "$ISNET" ]; then

        GITDEFVER="--branch $(git ls-remote --refs $($PRINTF $SRB2BLDGITPATH | gawk '{gsub(".git$",""); print}').git | gawk -F'/' '/'$(git ls-remote $($PRINTF $SRB2BLDGITPATH | gawk '{gsub(".git$",""); print}').git --symref HEAD | gawk '{print $1}')'/ {print $NF}' | head -n1)"

    elif [ -n "$SRB2BLDGITVER" ] && [ -d "$BUILD/.git" ]; then

        GITDEFVER="$SRB2BLDGITVER"

    else

        GITDEFVER=$(gawk -F'/' '{print $NF}' "$BUILD/.git/refs/remotes/origin/HEAD" 2> /dev/null)

    fi

    GITVER="$GITDEFVER"
    GITVERCONF=$($PRINTF "$GITDEFVER" | gawk '{print $NF}')
}

defaultmessage() {
    $PRINTF "$NOTICE%s\n\e[0m" "Please enter \"srb2bld --help\" to check usage of this shell script."
}

extractmacosassets() {
    if [ "$BUILD" = "$BUILDPATH/srb2" ] || [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ] || [ "$BUILD" = "$BUILDPATH/srb2-netplus" ] || [ "$BUILD" = "$BUILDPATH/srb2-rphys" ] || [ "$BUILD" = "$BUILDPATH/srb2-tsourdt3rd" ] || [ "$BUILD" = "$BUILDPATH/srb2-vr" ]; then

        # Temporary fix until SRB2 NetPlus will be updated to the latest version of SRB2.
        if [ "$BUILD" = "$BUILDPATH/srb2-netplus" ]; then

            if [ -n "$ISNET" ]; then

                curl -RLC - "$SRB2NETPLUSASSETURL" -o "$SRB2BLDROOT/assets/SRB2NetPlus-Patch.zip"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2NetPlus-Patch.zip" "*.pk3" -o"$BUILD/assets/installer"

        elif [ "$BUILD" = "$BUILDPATH/srb2-rphys" ]; then

            SRB2RPHYSASSETURL=$(curl -s "$SRB2RPHYSASSETURL/latest" | gawk -F'"' '/browser_download_url.*-windows.zip/ {print $4}' | head -n1)
            if [ -n "$ISNET" ] && [ "$(curl -X GET -sLI "$SRB2RPHYSASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2rphys.zip" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2rphys.zip"
                curl -RL "$SRB2RPHYSASSETURL" -o "$SRB2BLDROOT/assets/SRB2rphys.zip"

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2rphys.zip" "*.pk3" "*.wad" -o"$BUILD/assets/installer"

        elif [ "$BUILD" = "$BUILDPATH/srb2-tsourdt3rd" ]; then

            SRB2TSOURDT3RDASSETURL=$(curl -s "$SRB2TSOURDT3RDASSETURL" | gawk -F'"' '/browser_download_url.*TSoURDt3rd.zip/ {print $4}')
            if [ -n "$ISNET" ] && [ "$(curl -X GET -sLI "$SRB2TSOURDT3RDASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2TSoURDt3rd.zip" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2TSoURDt3rd.zip"
                curl -RL "$SRB2TSOURDT3RDASSETURL" -o "$SRB2BLDROOT/assets/SRB2TSoURDt3rd.zip"

            fi

            7z e -y -r "$SRB2BLDROOT/assets/SRB2TSoURDt3rd.zip" "*.pk3" -o"$BUILD/assets/installer"

        fi

        extractsrb2macosassets

    elif [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        SRB2ASSETETAG=$(curl -X GET -sLI "$SRB2PERSONAASSETURL" | gawk -F'etag: ' '{IGNORECASE=1} /etag/ {gsub("\r|\"",""); print $NF}' 2> /dev/null | tail -n1)
        if [ -n "$ISNET" ] && [ "$SRB2ASSETETAG" != "$(7z l "$SRB2BLDROOT/assets/SRB2P_MP.zip" 2> /dev/null | gawk '/Comment/ {print $NF}')" ]; then

            rm -f "$SRB2BLDROOT/assets/SRB2P_MP.zip"
            curl -RL "$SRB2PERSONAASSETURL" -o "$SRB2BLDROOT/assets/SRB2P_MP.zip"
            zip -z "$SRB2BLDROOT/assets/SRB2P_MP.zip" << EOF
$SRB2ASSETETAG
EOF

        fi

        7z x -y "$SRB2BLDROOT/assets/SRB2P_MP.zip" "*.pk3" "*.wad" -o"$BUILD/assets/installer"
        extractsrb2macosassets

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        if [ -n "$ISNET" ]; then

            curl -RLC - "$SRB2LEGACYASSETURL" -o "$SRB2BLDROOT/assets/SRB2-2.1.exe"

        fi

        7z x -y "$SRB2BLDROOT/assets/SRB2-2.1.exe" "*.srb" "*.dta" "*.dat" -o"$BUILD/assets/installer"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        if [ -n "$ISNET" ]; then

            curl -RLC - "$SRB220ASSETURL" -o "$SRB2BLDROOT/assets/SRB2-2.0.exe"

        fi

        unrar x -y "$SRB2BLDROOT/assets/SRB2-2.0.exe" "*.plr" "*.dta" "*.wpn" "*.srb" "$BUILD/assets/installer"

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

        if [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

            if [ -n "$ISNET" ]; then

                curl -RLC - "$SRB2JTEASSETURL" -o "$SRB2BLDROOT/assets/SRB2JTE.zip"

            fi

            unrar x -y "$SRB2BLDROOT/assets/SRB2JTE.zip" "*.wad" "$BUILD/assets/installer"

        fi

        if [ -n "$ISNET" ]; then

            curl -RLC - "$SRB2FINALDEMOASSETURL" -o "$SRB2BLDROOT/assets/SRB2FinalDemo.exe"

        fi

        unrar x -y "$SRB2BLDROOT/assets/SRB2FinalDemo.exe" "*.plr" "*.dta" "*.wpn" "*.srb" "$BUILD/assets/installer"

    elif [ "$BUILD" = "$BUILDPATH/ring-racers" ] || [ "$BUILD" = "$BUILDPATH/ring-racers-noire" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-galaxy" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-hep" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-saturn" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-neptune" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        # Getting missing patch.pk3 file from SRB2 asset pack.
        if [ "$BUILD" = "$BUILDPATH/ring-racers" ] || [ "$BUILD" = "$BUILDPATH/ring-racers-noire" ]; then

            if [ -n "$ISNET" ]; then

                SRB2ASSETURL=$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print $4}')
                if [ "$(curl -X GET -sLI "$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2-Latest.zip" 2> /dev/null)" ]; then

                    rm -f "$SRB2BLDROOT/assets/SRB2-Latest.zip"
                    curl -RL "$SRB2ASSETURL" -o "$SRB2BLDROOT/assets/SRB2-Latest.zip"

                fi

            fi

            7z x -y "$SRB2BLDROOT/assets/SRB2-Latest.zip" "patch.pk3" -o"$BUILD/assets/installer"
            cp "$BUILD/README.md" "$BUILD/assets/installer/README.txt"
            touch "$BUILD/assets/installer/README-SDL.txt"
            touch "$BUILD/assets/installer/HISTORY.txt"

            find "$BUILD/assets/installer" -type d -exec chmod 755 {} \;

        elif [ "$BUILD" = "$BUILDPATH/srb2-kart-hep" ]; then

            SRB2ASSETETAG=$(curl -X GET -sLI "$SRB2KARTHEPASSETURL" | gawk -F'etag: ' '{IGNORECASE=1} /etag/ {gsub("\r|\"",""); print $NF}' 2> /dev/null | tail -n1)
            if [ -n "$ISNET" ] && [ "$SRB2ASSETETAG" != "$(7z l "$SRB2BLDROOT/assets/SRB2KartHEP.zip" 2> /dev/null | gawk '/Comment/ {print $NF}')" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2KartHEP.zip"
                curl -RL "$SRB2KARTHEPASSETURL" -o "$SRB2BLDROOT/assets/SRB2KartHEP.zip"
                zip -z "$SRB2BLDROOT/assets/SRB2KartHEP.zip" << EOF
$SRB2ASSETETAG
EOF

            fi

            7z e -y "$SRB2BLDROOT/assets/SRB2KartHEP.zip" "*.kart" -o"$BUILD/assets/installer"

        elif [ "$BUILD" = "$BUILDPATH/srb2-kart-neptune" ]; then

            SRB2KARTNEPTUNEASSETURL=$(curl -s "$SRB2KARTNEPTUNEASSETURL" | gawk -F'"' '/browser_download_url.*64Bit.zip/ {print $4}')
            if [ "$(curl -X GET -sLI "$SRB2KARTNEPTUNEASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2KartNeptune.zip" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2KartNeptune.zip"
                curl -RL "$SRB2KARTNEPTUNEASSETURL" -o "$SRB2BLDROOT/assets/SRB2KartNeptune.zip"

            fi

            7z e -y "$SRB2BLDROOT/assets/SRB2KartNeptune.zip" "*/*.kart" -o"$BUILD/assets/installer"

        fi

        extractsrb2kartmacosassets

    elif [ "$(dirname $BUILD)" = "$BUILDPATH/srb2-custom" ]; then

        if [ "$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print $2}' "$BUILD/src/doomdef.h" 2> /dev/null)" = "SRB2" ]; then

            extractsrb2macosassets

        else

            extractsrb2kartmacosassets

        fi

    fi
}

extractmacoscustomassets() {
    BUILDPREFIX=$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')

    # Download and extract assets for custom build.
    if [ -z "$ISNET" ] && [ -n "$SRB2BLDASSETPATH" ]; then

        FILETYPE=$(find "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER."* 2> /dev/null | gawk -F'.' '{print $NF}' | head -n1)
        SRB2BLDASSETPATH="$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE"

    elif [ -n "$ISNET" ] && [ -n "$SRB2BLDASSETPATH" ]; then

        if [ -n "$(find "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER."* 2> /dev/null | head -n1)" ] && [ "$(curl -X GET -sLI "$SRB2BLDASSETPATH" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" = "$(stat -f %z "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER."* 2> /dev/null)" ]; then

            FILETYPE=$(find "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER."* 2> /dev/null | gawk -F'.' '{print $NF}' | head -n1)
            SRB2BLDASSETPATH="$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE"

        elif [ -n "$($PRINTF "%s\n" "$SRB2BLDASSETPATH" | gawk '/drive.google.com/ {print}')" ]; then

            SRB2ASSETID=$($PRINTF "%s\n" "$SRB2BLDASSETPATH" | gawk '{gsub("https://drive.google.com/file/d/|/view|?usp=sharing",""); print}')
            SRB2BLDASSETPATH="https://drive.google.com/uc?export=download&confirm=t&id=$SRB2ASSETID"
            FILETYPE=$(curl -X GET -sLI "https://drive.google.com/uc?export=download&confirm=t&id=$SRB2ASSETID" | gawk -F'.' '/content-disposition:/ {gsub("\r|\"",""); print $NF}')

        elif [ -n "$($PRINTF "%s\n" "$SRB2BLDASSETPATH" | gawk '/mega.nz/ {print}')" ]; then

            # Using megafetch script to obtain data to decrypt asset pack from mega.nz.
            curl -sL https://gist.githubusercontent.com/Bijman/b791993783e2fb80d3e98a3a19b6e6e8/raw/4fb91369313eaa8d67fe911fdcc08797ca432517/megafetch.sh -o "$BUILD/megafetch"
            chmod 755 "$BUILD/megafetch"
            MEGANZURL=$("$BUILD/megafetch" "$SRB2BLDASSETPATH" | gawk '/userstorage.mega.co.nz/ {print}')
            MEGANZFILENAME=$("$BUILD/megafetch" "$SRB2BLDASSETPATH" | gawk 'NR==2')
            MEGANZHEX=$("$BUILD/megafetch" "$SRB2BLDASSETPATH" | gawk 'NR==3')
            MEGANZHEXRAW=$("$BUILD/megafetch" "$SRB2BLDASSETPATH" | gawk 'NR==4')
            SRB2BLDASSETPATH="$MEGANZURL"
            FILETYPE=$($PRINTF "%s\n" "$MEGANZFILENAME" | gawk -F'.' '{print $NF}')

        else

            SRB2BLDASSETPATH="$SRB2BLDASSETPATH"

            if [ -n "$(curl -X GET -sLI "$SRB2BLDASSETPATH" | gawk -F'.' '/content-disposition:/ {gsub("\r",""); print $NF}' | head -n1)" ]; then

                FILETYPE=$(curl -X GET -sLI "$SRB2BLDASSETPATH" | gawk -F'.' '/content-disposition:/ {gsub("\r",""); print $NF}')

            else

                FILETYPE=$(find "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER."* 2> /dev/null | gawk -F'.' '{print $NF}' | head -n1)

            fi

        fi

    elif [ -z "$SRB2BLDASSETPATH" ]; then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Assuming the latest SRB2/SRB2Kart release assets for $BUILDNAME."
        extractmacosassets

    fi

    if [ -n "$ISNET" ] && [ -n "$(curl -vI "$SRB2BLDASSETPATH" 2>&1 | gawk '/> Host:/ {gsub("\r",""); print $NF}')" ] && [ "$(curl -X GET -sLI "$SRB2BLDASSETPATH" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE" 2> /dev/null)" ]; then

        rm -f "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE"

        if [ -n "$($PRINTF "%s\n" "$SRB2BLDASSETPATH" | gawk '/drive.google.com/ {print}')" ]; then

            curl -RL "https://drive.google.com/uc?export=download&confirm=t&id=$SRB2ASSETID" -o"$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE"

        elif [ -n "$($PRINTF "%s\n" "$SRB2BLDASSETPATH" | gawk '/mega.co.nz/ {print}')" ]; then

            curl -RL "$MEGANZURL" -o "$BUILD/$MEGANZFILENAME"
            cat "$BUILD/$MEGANZFILENAME" | openssl enc -d -aes-128-ctr -K "$MEGANZHEX" -iv "$MEGANZHEXRAW" > "$BUILD/$MEGANZFILENAME.new"
            mv -f "$BUILD/$MEGANZFILENAME.new" "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE"

        else

            curl -RL "$SRB2BLDASSETPATH" -o "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE"

        fi

    fi

    if [ -n "$(find "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

        if [ "$FILETYPE" = "rar" ]; then

            if [ "$ANDROID" = "1" ]; then

                unrar x -y "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.rar" -x"*.exe" -x"*.txt" -x"*.md" -x"*.dll" "$BUILD/android/app/src/main/assets"

            else

                unrar x -y "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.rar" -x"*.exe" -x"*.txt" -x"*.md" -x"*.dll" "$BUILD/assets/installer"

            fi

        else

            if [ "$ANDROID" = "1" ]; then

                7z x -y "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE" -x!"*.exe" -x!"*.txt" -x!"*.md" -x!"*.dll" -o"$BUILD/android/app/src/main/assets"

            else

                7z x -y "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER.$FILETYPE" -x!"*.exe" -x!"*.txt" -x!"*.md" -x!"*.dll" -o"$BUILD/assets/installer"

            fi

        fi

        if [ "$(find "$BUILD/assets/installer" -mindepth 1 -maxdepth 1 2> /dev/null | wc -l)" -eq "1" ]; then

            mv -f "$BUILD/assets/installer/"*/* "$BUILD/assets/installer"

        fi

    fi

    extractmacosextracustomassets

    # Correcting permissions for model directories.
    if [ "$ANDROID" = "1" ]; then

        find "$BUILD/android/app/src/main/assets" -type d -exec chmod 755 {} \;

    elif [ -n "$(find "$BUILD/assets/installer" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | head -n1)" ]; then

        find "$BUILD/assets/installer" -type d -exec chmod 755 {} \;

    fi
}

extractmacosextracustomassets() {
    # Download and extract extra assets for custom build.
    if [ -z "$ISNET" ] && [ -n "$SRB2BLDEXTRAASSETPATH" ]; then

        FILETYPE=$(find "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras."* 2> /dev/null | gawk -F'.' '{print $NF}' | head -n1)
        SRB2BLDEXTRAASSETPATH="$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras.$FILETYPE"

    elif [ -n "$ISNET" ] && [ -n "$SRB2BLDEXTRAASSETPATH" ]; then

        if [ -n "$(find "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras."* 2> /dev/null | head -n1)" ] && [ "$(curl -X GET -sLI "$SRB2BLDEXTRAASSETPATH" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" = "$(stat -f %z "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras."* 2> /dev/null)" ]; then

            FILETYPE=$(find "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras."* 2> /dev/null | gawk -F'.' '{print $NF}' | head -n1)
            SRB2BLDEXTRAASSETPATH="$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras.$FILETYPE"

        elif [ -n "$($PRINTF "%s\n" "$SRB2BLDEXTRAASSETPATH" | gawk '/drive.google.com/ {print}')" ]; then

            SRB2ASSETID=$($PRINTF "%s\n" "$SRB2BLDEXTRAASSETPATH" | gawk '{gsub("https://drive.google.com/file/d/|/view|?usp=sharing",""); print}')
            SRB2BLDEXTRAASSETPATH="https://drive.google.com/uc?export=download&confirm=t&id=$SRB2ASSETID"
            FILETYPE=$(curl -X GET -sLI "https://drive.google.com/uc?export=download&confirm=t&id=$SRB2ASSETID" | gawk -F'.' '/content-disposition:/ {gsub("\r|\"",""); print $NF}')

        elif [ -n "$($PRINTF "%s\n" "$SRB2BLDEXTRAASSETPATH" | gawk '/mega.nz/ {print}')" ]; then

            # Using megafetch script to obtain data to decrypt asset pack from mega.nz.
            curl -sL https://gist.githubusercontent.com/Bijman/b791993783e2fb80d3e98a3a19b6e6e8/raw/4fb91369313eaa8d67fe911fdcc08797ca432517/megafetch.sh -o "$BUILD/megafetch"
            chmod 755 "$BUILD/megafetch"
            MEGANZURL=$("$BUILD/megafetch" "$SRB2BLDEXTRAASSETPATH" | gawk '/userstorage.mega.co.nz/ {print}')
            MEGANZFILENAME=$("$BUILD/megafetch" "$SRB2BLDEXTRAASSETPATH" | gawk 'NR==2')
            MEGANZHEX=$("$BUILD/megafetch" "$SRB2BLDEXTRAASSETPATH" | gawk 'NR==3')
            MEGANZHEXRAW=$("$BUILD/megafetch" "$SRB2BLDEXTRAASSETPATH" | gawk 'NR==4')
            SRB2BLDEXTRAASSETPATH="$MEGANZURL"
            FILETYPE=$($PRINTF "%s\n" "$MEGANZFILENAME" | gawk -F'.' '{print $NF}')

        else

            SRB2BLDEXTRAASSETPATH="$SRB2BLDEXTRAASSETPATH"

            if [ -n "$(curl -X GET -sLI "$SRB2BLDEXTRAASSETPATH" | gawk -F'.' '/content-disposition:/ {gsub("\r",""); print $NF}' | head -n1)" ]; then

                FILETYPE=$(curl -X GET -sLI "$SRB2BLDEXTRAASSETPATH" | gawk -F'.' '/content-disposition:/ {gsub("\r",""); print $NF}')

            else

                FILETYPE=$(find "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras."* 2> /dev/null | gawk -F'.' '{print $NF}' | head -n1)

            fi

        fi

    fi

    if [ -n "$ISNET" ] && [ -n "$(curl -vI "$SRB2BLDEXTRAASSETPATH" 2>&1 | gawk '/> Host:/ {gsub("\r",""); print $NF}')" ] && [ "$(curl -X GET -sLI "$SRB2BLDEXTRAASSETPATH" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras.$FILETYPE" 2> /dev/null)" ]; then

        rm -f "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras.$FILETYPE"

        if [ -n "$($PRINTF "%s\n" "$SRB2BLDEXTRAASSETPATH" | gawk '/drive.google.com/ {print}')" ]; then

            curl -RL "https://drive.google.com/uc?export=download&confirm=t&id=$SRB2ASSETID" -o"$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras.$FILETYPE"

        elif [ -n "$($PRINTF "%s\n" "$SRB2BLDEXTRAASSETPATH" | gawk '/mega.co.nz/ {print}')" ]; then

            curl -RL "$MEGANZURL" -o "$BUILD/$MEGANZFILENAME"
            cat "$BUILD/$MEGANZFILENAME" | openssl enc -d -aes-128-ctr -K "$MEGANZHEX" -iv "$MEGANZHEXRAW" > "$BUILD/$MEGANZFILENAME.new"
            mv -f "$BUILD/$MEGANZFILENAME.new" "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras.$FILETYPE"

        else

            curl -RL "$SRB2BLDEXTRAASSETPATH" -o "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras.$FILETYPE"

        fi

    fi

    if [ -n "$(find "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras.$FILETYPE" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

        if [ "$FILETYPE" = "rar" ]; then

            if [ "$ANDROID" = "1" ]; then

                unrar e -y "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras.rar" -x"*.exe" -x"*.txt" -x"*.md" -x"*.dll" "$BUILD/android/app/src/main/assets"

            else

                unrar e -y "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras.rar" -x"*.exe" -x"*.txt" -x"*.md" -x"*.dll" "$BUILD/assets/installer"

            fi

        else

            if [ "$ANDROID" = "1" ]; then

                7z e -y -r "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras.$FILETYPE" -x!"*.exe" -x!"*.txt" -x!"*.md" -x!"*.dll" -o"$BUILD/android/app/src/main/assets"

            else

                7z e -y -r "$SRB2BLDROOT/assets/$BUILDPREFIX-$GITVER-extras.$FILETYPE" -x!"*.exe" -x!"*.txt" -x!"*.md" -x!"*.dll" -o"$BUILD/assets/installer"

            fi

        fi

        # Removing empty subdirectories.
        if [ "$ANDROID" = "1" ]; then

            find "$BUILD/android/app/src/main/assets" -mindepth 1 -maxdepth 1 -type d ! -name models ! -name mdls -exec rm '{}' -rf \;

        else

            find "$BUILD/assets/installer" -mindepth 1 -maxdepth 1 -type d ! -name models ! -name mdls -exec rm '{}' -rf \;

        fi

    fi
}

extractsrb2macosassets() {
    SRB2LATESTVER=$(curl -s https://api.github.com/repos/STJr/SRB2/releases | gawk -F':|_' '/tag_name/ {gsub("\"|,| ",""); print $NF}' | head -n1)
    SRB2VER=$(gawk -F'\"' '/SRB2VERSION/ {print $2}' "$BUILD/src/version.h" 2> /dev/null || $PRINTF "%s\n" "$SRB2LATESTVER")

    if [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        SRB2VER=$(gawk -F'- v|- ' '/v[0-9]/ {print $2}' "$BUILD/src/config.h.in" 2> /dev/null | gawk '{gsub(" ",""); print}' | tail -n1 || $PRINTF "%s\n" "$SRB2LATESTVER")

    fi

    if [ -n "$SRB2LATESTVER" ] && ([ "$SRB2VER" != "$SRB2LATESTVER" ] && [ "$($PRINTF "$SRB2VER" | gawk '{gsub("\\.|[a-z]|[A-Z]",""); print}')" -lt "$($PRINTF "$SRB2LATESTVER" | gawk '{gsub("\\.|[a-z]|[A-Z]",""); print}')" ]); then

        if [ -n "$ISNET" ]; then

            SRB2ASSETURL=$(curl -s https://api.github.com/repos/STJr/SRB2/releases | gawk -F'"' '/'SRB2_release_$SRB2VER'\/.*Full.zip/ {print $4}')
            if [ "$(curl -X GET -sLI "$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2-Older.zip" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2-Older.zip"
                curl -RL "$SRB2ASSETURL" -o "$SRB2BLDROOT/assets/SRB2-Older.zip"

            fi

        fi

        7z x -y "$SRB2BLDROOT/assets/SRB2-Older.zip" "*.pk3" "*.dta" "*.dat" "models/*" -o"$BUILD/assets/installer"

    else

        if [ -n "$ISNET" ]; then

            SRB2ASSETURL=$(curl -s https://api.github.com/repos/STJr/SRB2/releases/latest | gawk -F'"' '/browser_download_url.*Full.zip/ {print $4}')
            if [ "$(curl -X GET -sLI "$SRB2ASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2-Latest.zip" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/SRB2-Latest.zip"
                curl -RL "$SRB2ASSETURL" -o "$SRB2BLDROOT/assets/SRB2-Latest.zip"

            fi

        fi

        7z x -y "$SRB2BLDROOT/assets/SRB2-Latest.zip" "*.pk3" "*.dta" "*.dat" "*.txt" "models/*" -o"$BUILD/assets/installer"

    fi

    find "$BUILD/assets/installer" -type d -exec chmod 755 {} \;
}

extractsrb2kartmacosassets() {
    if [ "$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print $2}' "$BUILD/src/doomdef.h" 2> /dev/null)" = "RingRacers" ]; then

        RINGRACERSVERS=$(curl -s https://api.github.com/repos/KartKrewDev/RingRacers/releases | gawk -F':|_' '/tag_name/ {gsub("\"|,| ",""); print $NF}')
        RINGRACERSLATESTVER=$($PRINTF "%s\n" "$RINGRACERSVERS" | head -n1)
        RINGRACERSVER=$(gawk -F'\"' '/SRB2VERSION/ {print $2}' "$BUILD/src/version.h" 2> /dev/null || $PRINTF "%s\n" "$RINGRACERSLATESTVER")

        if [ -n "$RINGRACERSLATESTVER" ] && ([ "v$RINGRACERSVER" != "$RINGRACERSLATESTVER" ] && [ "$($PRINTF "$RINGRACERSVER" | gawk '{gsub("\\.|[a-z]|[A-Z]",""); print}')" -lt "$($PRINTF "$RINGRACERSLATESTVER" | gawk '{gsub("\\.|[a-z]|[A-Z]",""); print}')" ]); then

            if [ -n "$ISNET" ]; then

                RINGRACERSASSETURL=$(curl -s https://api.github.com/repos/KartKrewDev/RingRacers/releases | gawk -F'"' '/'$RINGRACERSVER'\/.*Installer.exe/ {print $4}')
                if [ "$(curl -X GET -sLI "$RINGRACERSASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/RingRacers-Older.exe" 2> /dev/null)" ]; then

                    rm -f "$SRB2BLDROOT/assets/RingRacers-Older.exe"
                    curl -RL "$RINGRACERSASSETURL" -o "$SRB2BLDROOT/assets/RingRacers-Older.exe"

                fi

            fi

            unrar x -y "$SRB2BLDROOT/assets/RingRacers-Older.exe" "models/*" "$BUILD/assets/installer"
            unrar e -y "$SRB2BLDROOT/assets/RingRacers-Older.exe" "*.pk3" "*.dat" "*.txt" "data/*" "$BUILD/assets/installer"

        else

            if [ -n "$ISNET" ]; then

                RINGRACERSASSETURL=$(curl -s https://api.github.com/repos/KartKrewDev/RingRacers/releases/latest | gawk -F'"' '/browser_download_url.*Installer.exe/ {print $4}')
                if [ "$(curl -X GET -sLI "$RINGRACERSASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/RingRacers-Latest.exe" 2> /dev/null)" ]; then

                    rm -f "$SRB2BLDROOT/assets/RingRacers-Latest.exe"
                    curl -RL "$RINGRACERSASSETURL" -o "$SRB2BLDROOT/assets/RingRacers-Latest.exe"

                fi

            fi

            unrar x -y "$SRB2BLDROOT/assets/RingRacers-Latest.exe" "models/*" "$BUILD/assets/installer"
            unrar e -y "$SRB2BLDROOT/assets/RingRacers-Latest.exe" "*.pk3" "*.dat" "*.txt" "data/*" "$BUILD/assets/installer"

        fi

        find "$BUILD/assets/installer" -type d -exec chmod 755 {} \;

    else

        SRB2KARTVERS=$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases | gawk -F':|_' '/tag_name/ {gsub("\"|,| ",""); print $NF}')
        SRB2KARTLATESTVER=$($PRINTF "%s\n" "$SRB2KARTVERS" | head -n1)
        SRB2KARTVER=$(gawk -F'- [A-z]*[0-9]*' '/v[0-9]/ {print $2}' "$BUILD/src/config.h.in" 2> /dev/null | gawk '{gsub(" ",""); print}' | tail -n1 || $PRINTF "%s\n" "$SRB2KARTLATESTVER")

        if [ -n "$SRB2KARTLATESTVER" ] && ([ "$SRB2KARTVER" != "$SRB2KARTLATESTVER" ] && [ "$($PRINTF "$SRB2KARTVER" | gawk '{gsub("\\.|[a-z]|[A-Z]",""); print}')" -lt "$($PRINTF "$SRB2KARTLATESTVER" | gawk '{gsub("\\.|[a-z]|[A-Z]",""); print}')" ]); then

            if [ -n "$ISNET" ]; then

                SRB2KARTASSETURL=$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases | gawk -F'"' '/'$SRB2KARTVER'\/.*Installer.exe/ {print $4}')
                if [ "$(curl -X GET -sLI "$SRB2KARTASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2Kart-Older.exe" 2> /dev/null)" ]; then

                    rm -f "$SRB2BLDROOT/assets/SRB2Kart-Older.exe"
                    curl -RL "$SRB2KARTASSETURL" -o "$SRB2BLDROOT/assets/SRB2Kart-Older.exe"

                fi

            fi

            unrar x -y "$SRB2BLDROOT/assets/SRB2Kart-Older.exe" "*.kart" "*.srb" "*.dat" "mdls/*" "$BUILD/assets/installer"

        else

            if [ -n "$ISNET" ]; then

                SRB2KARTASSETURL=$(curl -s https://api.github.com/repos/STJr/Kart-Public/releases/latest | gawk -F'"' '/browser_download_url.*Installer.exe/ {print $4}')
                if [ "$(curl -X GET -sLI "$SRB2KARTASSETURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/SRB2Kart-Latest.exe" 2> /dev/null)" ]; then

                    rm -f "$SRB2BLDROOT/assets/SRB2Kart-Latest.exe"
                    curl -RL "$SRB2KARTASSETURL" -o "$SRB2BLDROOT/assets/SRB2Kart-Latest.exe"

                fi

            fi

            unrar x -y "$SRB2BLDROOT/assets/SRB2Kart-Latest.exe" "*.kart" "*.srb" "*.dat" "mdls/*" "$BUILD/assets/installer"

        fi

        find "$BUILD/assets/installer" -type d -exec chmod 755 {} \;

    fi
}

fetchupdatebuild() {
    ISNET=$(curl -vI https://github.com 2>&1 | gawk '/> Host:/ {gsub("\r",""); print $NF}')

    if [ "$(dirname $BUILD)" = "$BUILDPATH/srb2-custom" ]; then

        GIT="git clone $GITOPTS $($PRINTF $SRB2BLDGITPATH | gawk '{gsub(".git$",""); print}').git --recursive $GITVER"

    else

        GIT="git clone $GITOPTS $GITURL --recursive"

    fi

    # Download or update build's source code.
    if [ ! -d "$BUILD/.git" ] && [ -n "$ISNET" ]; then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading $BUILDNAME's source code. Please wait..."
        $GIT "$BUILD"
        git -C "$BUILD" checkout $($PRINTF "$GITVER" | gawk '{print $NF}')

    elif [ -d "$BUILD/.git" ] && [ -n "$GITURL" ] && [ $(git -C "$BUILD" remote show origin 2> /dev/null | gawk '/Fetch URL/ {print $NF}') != "$GITURL" ] && [ -n "$ISNET" ]; then

        # Replace build, if variable GITURL was updated to new Git repository.
        if [ -f "$BUILD/.comrev" ] && [ -n "$(cat "$BUILD/.comrev")" ]; then

            CONF=$(cat "$BUILD/.comrev")

        fi

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Removing existing source at path $BUILD. Please wait..."
        sleep 1
        rm -rf "$BUILD"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading $BUILDNAME's source code. Please wait..."
        $GIT "$BUILD"
        git -C "$BUILD" checkout $($PRINTF "$GITVER" | gawk '{print $NF}')
        $PRINTF "%s\n" "$CONF" > "$BUILD/.comrev"

    elif [ -d "$BUILD/.git" ]; then

        if [ "$SRB2BLDDEVMODE" != "1" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Cleaning up $BUILDNAME's source code. Please wait..."
            cleansource

        fi

        GITCURVER=$(git -C "$BUILD" rev-parse --abbrev-ref HEAD)

        if [ -n "$GITVER" ]; then

            git -C "$BUILD" checkout -q $($PRINTF "$GITVER" | gawk '{print $NF}')

        fi

        if [ -n "$ISNET" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating $BUILDNAME's source code. Please wait..."
            git -C "$BUILD" pull --recurse-submodules --rebase --autostash

        fi

        git -C "$BUILD" checkout -q "$GITCURVER"

    fi
}

flatpak() {
    clear

    # Blocking access to this option for users that have OS other than Linux since Flatpaks are Linux exclusive.
    if [ "$OS" != "Linux" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Currently building Flatpaks is only available for Linux. Exiting."
        exit

    fi

    # Remove musl variable for building Flatpaks.
    if [ "$LIBC" = "musl" ]; then

        unset LIBC

    fi

    # We have to set this in order to make Flatpak in Docker/Podman container.
    FLATPAK=1

    checkuseropt

    # Set current working directory.
    LNXPWD="$(pwd)"

    choosebuild

    buildvar

    fetchupdatebuild

    choosebranchcommit

    preparebuild

    setsudo

    preparecontainer

    containerentry

    sudo_ping

    settrap

    containerrun

    # Export commit revision name before creating Flatpak.
    export VERSION="$GITVER-$(git -C "$BUILD" rev-parse --short HEAD)"

    # Set path to Flatpak command.
    FLATPAKBIN="$(command -v /usr/bin/flatpak 2> /dev/null) --user"

    # Add Flathub repository for Flatpak.
    $FLATPAKBIN remote-add --if-not-exists flathub https://dl.flathub.org/repo/flathub.flatpakrepo

    # Install Flatpak platform and SDK.
    FLATPAKARCH="$ARCH"
    FLATPAKPLATFORM=$($FLATPAKBIN remote-info flathub org.freedesktop.Platform 2>&1 | gawk '{gsub(" ","\n"); gsub(",",""); print}' | gawk '/org\.freedesktop\.Platform\// {gsub("//","/'$FLATPAKARCH'/"); print}' | sort -V | tail -n1)
    FLATPAKSDK=$($FLATPAKBIN remote-info flathub org.freedesktop.Sdk 2>&1 | gawk '{gsub(" ","\n"); gsub(",",""); print}' | gawk '/org\.freedesktop\.Sdk\// {gsub("//","/'$FLATPAKARCH'/"); print}' | sort -V | tail -n1)
    FLATPAKGNOMEPLATFORM=$($FLATPAKBIN remote-info flathub org.gnome.Platform 2>&1 | gawk '{gsub(" ","\n"); gsub(",",""); print}' | gawk '/org\.gnome\.Platform\// {gsub("//","/'$FLATPAKARCH'/"); print}' | sort -V | tail -n1)
    FLATPAKGNOMESDK=$($FLATPAKBIN remote-info flathub org.gnome.Sdk 2>&1 | gawk '{gsub(" ","\n"); gsub(",",""); print}' | gawk '/org\.gnome\.Sdk\// {gsub("//","/'$FLATPAKARCH'/"); print}' | sort -V | tail -n1)

    # Determine name of the flatpak.
    if [ "$(dirname $BUILD)" = "$BUILDPATH/srb2-custom" ]; then

        SRB2CCONFDIR=$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print tolower($2)}' "$BUILD/src/doomdef.h" 2> /dev/null)
        FLATPAKNAME="org.srb2bld.$SRB2CCONFDIR"c"$CUSTOMDIR"

    else

        FLATPAKNAME="org.srb2bld.$($PRINTF $BUILD | gawk -F'/' '{gsub("-","_"); gsub("\\.",""); print $NF}')"

    fi

    # Create flatpak recipe.
    if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

        cat > "$BUILD/build/$FLATPAKNAME.json" << FLATPAK
{
  "app-id": "$FLATPAKNAME",
  "name": "$FLATPAKNAME",
  "runtime": "org.freedesktop.Platform",
  "runtime-version": "$($PRINTF $FLATPAKPLATFORM | gawk -F'/' '{print $NF}')",
  "sdk": "org.freedesktop.Sdk",
  "command": "AppRun",
  "finish-args": [
    "--allow=multiarch",
    "--share=ipc",
    "--share=network",
    "--socket=fallback-x11",
    "--socket=pulseaudio",
    "--socket=wayland",
    "--device=all",
    "--persist=.srb2$GITVERCONF"
  ],
  "add-extensions": {
    "org.freedesktop.Platform.Compat.i386": {
      "directory": "lib/i386-linux-gnu",
      "version": "$($PRINTF $FLATPAKPLATFORM | gawk -F'/' '{print $NF}')"
    },
    "org.freedesktop.Platform.GL32.default": {
      "directory": "lib/i386-linux-gnu/GL",
      "version": "$($PRINTF $FLATPAKPLATFORM | gawk -F'/' '{print $NF}')",
      "no-autodownload": "true"
    }
  },
  "modules": [
    {
      "name": "$FLATPAKNAME",
      "buildsystem": "simple",
      "sources": [
        {
          "type": "dir",
          "path": "$BUILD/build/AppDir/usr"
        }
      ],
      "build-commands": [
        "mkdir -p /app/bin /app/lib/i386-linux-gnu/GL /app/games /app/share",
        "cp -rf bin/* /app/bin",
        "printf '#!/bin/sh\n\nexport SDL_SOUNDFONTS=\"\\\$SDL_SOUNDFONTS\"\nexport SDL_FORCE_SOUNDFONTS=1\nexport SRB2WADDIR=/app/games/\\\$(ls /app/games)\n\n$(ls $BUILD/build/AppDir/usr/bin) \"\\\$@\"\n\nif [ \"\\\$?\" = \"127\" ]; then\n\n    zenity --error --text \"i386 compatibilty extension not installed:\n    • org.freedesktop.Platform.Compat.i386\n\nIn order to run this Flatpak, please first install this extension with command:\n<b>flatpak --user install org.freedesktop.Platform.Compat.i386</b>\"\n\nfi\n' > /app/bin/AppRun",
        "chmod 755 /app/bin/AppRun",
        "cp -rf lib/* /app/lib",
        "cp -rf games/* /app/games",
        "cp -rf share/* /app/share",
        "mv -f /app/share/applications/*-software.desktop /app/share/applications/$FLATPAKNAME-software.desktop",
        "mv -f /app/share/applications/*-opengl.desktop /app/share/applications/$FLATPAKNAME-opengl.desktop",
        "mv -f \$(find /app/share/icons/hicolor -name *.png 2> /dev/null) \$(find /app/share/icons/hicolor -name apps 2> /dev/null)/$FLATPAKNAME.png"
      ]
    }
  ]
}
FLATPAK

    elif [ "$BUILD" = "$BUILDPATH/wadcli" ] || [ "$BUILD" = "$BUILDPATH/kartmaker" ] || [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ] || [ "$BUILD" = "$BUILDPATH/followermaker" ]; then

        if [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

            FLATPAKCMD="wadcli"

        elif [ "$BUILD" = "$BUILDPATH/followermaker" ]; then

            FLATPAKCMD="followermaker"

        else

            FLATPAKCMD="kartmaker"

        fi

        cat > "$BUILD/build/$FLATPAKNAME.json" << FLATPAK
{
  "app-id": "$FLATPAKNAME",
  "name": "$FLATPAKNAME",
  "runtime": "org.freedesktop.Platform",
  "runtime-version": "$($PRINTF $FLATPAKPLATFORM | gawk -F'/' '{print $NF}')",
  "sdk": "org.freedesktop.Sdk",
  "command": "$FLATPAKCMD",
  "finish-args": [
    "--share=ipc",
    "--share=network",
    "--socket=fallback-x11",
    "--socket=pulseaudio",
    "--socket=wayland",
    "--device=all"
  ],
  "modules": [
    {
      "name": "$FLATPAKNAME",
      "buildsystem": "simple",
      "sources": [
        {
          "type": "dir",
          "path": "$BUILD/build/AppDir/usr"
        }
      ],
      "build-commands": [
        "mkdir -p /app/bin /app/lib /app/share",
        "cp -rf bin/* /app/bin",
        "cp -rf share/* /app/share",
        "mv -f /app/share/applications/*.desktop /app/share/applications/$FLATPAKNAME.desktop",
        "mv -f \$(find /app/share/icons/hicolor -name *.png 2> /dev/null) \$(find /app/share/icons/hicolor -name apps 2> /dev/null)/$FLATPAKNAME.png"
      ]
    }
  ]
}
FLATPAK

    elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

        # Installing SDK GNOME flatpaks.
        $FLATPAKBIN install -y flathub org.gnome.Platform/x86_64/43 org.gnome.Sdk/x86_64/43

        # Changing paths for GTK+ modules for Flatpak.
        gawk -i inplace '{gsub("^\".*/usr/lib","\"/app/lib"); print}' "$BUILD/build/AppDir/usr/lib/gdk-pixbuf/loaders.cache"

        cat > "$BUILD/build/$FLATPAKNAME.json" << FLATPAK
{
  "app-id": "$FLATPAKNAME",
  "name": "$FLATPAKNAME",
  "runtime": "org.gnome.Platform",
  "runtime-version": "43",
  "sdk": "org.gnome.Sdk",
  "command": "AppRun",
  "finish-args": [
    "--share=ipc",
    "--share=network",
    "--socket=fallback-x11",
    "--socket=pulseaudio",
    "--socket=wayland",
    "--device=all",
    "--filesystem=home",
    "--metadata=X-DConf=migrate-path=/net/mancubus/SLADE/"
  ],
  "modules": [
    {
      "name": "$FLATPAKNAME",
      "buildsystem": "simple",
      "sources": [
        {
          "type": "dir",
          "path": "$BUILD/build/AppDir/usr"
        }
      ],
      "build-commands": [
        "mkdir -p /app/bin /app/lib /app/share",
        "cp -rf bin/* /app/bin",
        "rm -rf share/slade3",
        "printf '#!/bin/sh\n\nexport LD_LIBRARY_PATH=/app/lib:/app/lib/gtk-3.0/modules:/app/lib/gdk-pixbuf/loaders:\$LD_LIBRARY_PATH\nexport GIO_MODULE_DIR=/app/lib/gio/modules\nexport GIO_EXTRA_MODULES=/app/lib/gio/modules\nexport GDK_PIXBUF_MODULEDIR=/app/lib/gdk-pixbuf/loaders\nexport GDK_PIXBUF_MODULE_FILE=/app/lib/gdk-pixbuf/loaders.cache\nexport XDG_DATA_DIRS=/app/share:/app/share/mime\nexport KDE_FULL_SESSION=false\nexec /app/bin/slade \"\$@\"\n' > /app/bin/AppRun",
        "chmod 755 /app/bin/AppRun",
        "cp -rf lib/* /app/lib",
        "cp -rf share/* /app/share",
        "mv -f /app/share/applications/*.desktop /app/share/applications/$FLATPAKNAME.desktop",
        "mv -f \$(find /app/share/icons/hicolor -name *.png 2> /dev/null) \$(find /app/share/icons/hicolor -name apps 2> /dev/null)/$FLATPAKNAME.png"
      ]
    }
  ]
}
FLATPAK

    elif [ "$BUILD" = "$BUILDPATH/ultimatezonebuilder" ]; then

        cat > "$BUILD/build/$FLATPAKNAME.json" << FLATPAK
{
  "app-id": "$FLATPAKNAME",
  "name": "$FLATPAKNAME",
  "runtime": "org.freedesktop.Platform",
  "runtime-version": "$($PRINTF $FLATPAKPLATFORM | gawk -F'/' '{print $NF}')",
  "sdk": "org.freedesktop.Sdk",
  "command": "AppRun",
  "finish-args": [
    "--share=ipc",
    "--share=network",
    "--socket=fallback-x11",
    "--socket=pulseaudio",
    "--socket=wayland",
    "--device=all"
  ],
  "modules": [
    {
      "name": "$FLATPAKNAME",
      "buildsystem": "simple",
      "sources": [
        {
          "type": "dir",
          "path": "$BUILD/build/AppDir/usr"
        }
      ],
      "build-commands": [
        "mkdir -p /app/bin /app/lib /app/share/ultimatezonebuilder",
        "cp -rf bin/* /app/share/ultimatezonebuilder",
        "printf '#!/bin/sh\n\ncd /app/share/ultimatezonebuilder\nexec /app/share/ultimatezonebuilder/uzb \"\\\$@\"\n' > /app/bin/AppRun",
        "chmod 755 /app/bin/AppRun",
        "cp -rf lib/* /app/lib",
        "cp -rf share/* /app/share",
        "mv -f /app/share/applications/*.desktop /app/share/applications/$FLATPAKNAME.desktop",
        "mv -f \$(find /app/share/icons/hicolor -name *.png 2> /dev/null) \$(find /app/share/icons/hicolor -name apps 2> /dev/null)/$FLATPAKNAME.png"
      ]
    }
  ]
}
FLATPAK

    elif [ "$BUILD" = "$BUILDPATH/highvoltagering" ]; then

        cat > "$BUILD/build/$FLATPAKNAME.json" << FLATPAK
{
  "app-id": "$FLATPAKNAME",
  "name": "$FLATPAKNAME",
  "runtime": "org.freedesktop.Platform",
  "runtime-version": "$($PRINTF $FLATPAKPLATFORM | gawk -F'/' '{print $NF}')",
  "sdk": "org.freedesktop.Sdk",
  "command": "AppRun",
  "finish-args": [
    "--share=ipc",
    "--share=network",
    "--socket=fallback-x11",
    "--socket=pulseaudio",
    "--socket=wayland",
    "--device=all"
  ],
  "modules": [
    {
      "name": "$FLATPAKNAME",
      "buildsystem": "simple",
      "sources": [
        {
          "type": "dir",
          "path": "$BUILD/build/AppDir/usr"
        }
      ],
      "build-commands": [
        "mkdir -p /app/bin /app/lib /app/share/highvoltagering",
        "cp -rf bin/* /app/share/highvoltagering",
        "printf '#!/bin/sh\n\ncd /app/share/highvoltagering\nexec /app/share/highvoltagering/hvr \"\\\$@\"\n' > /app/bin/AppRun",
        "chmod 755 /app/bin/AppRun",
        "cp -rf lib/* /app/lib",
        "cp -rf share/* /app/share",
        "mv -f /app/share/applications/*.desktop /app/share/applications/$FLATPAKNAME.desktop",
        "mv -f \$(find /app/share/icons/hicolor -name *.png 2> /dev/null) \$(find /app/share/icons/hicolor -name apps 2> /dev/null)/$FLATPAKNAME.png"
      ]
    }
  ]
}
FLATPAK

    elif [ "$BUILD" = "$BUILDPATH/aseprite" ]; then

        cat > "$BUILD/build/$FLATPAKNAME.json" << FLATPAK
{
  "app-id": "$FLATPAKNAME",
  "name": "$FLATPAKNAME",
  "runtime": "org.freedesktop.Platform",
  "runtime-version": "$($PRINTF $FLATPAKPLATFORM | gawk -F'/' '{print $NF}')",
  "sdk": "org.freedesktop.Sdk",
  "command": "aseprite",
  "finish-args": [
    "--share=ipc",
    "--share=network",
    "--socket=fallback-x11",
    "--socket=pulseaudio",
    "--socket=wayland",
    "--device=all"
  ],
  "modules": [
    {
      "name": "$FLATPAKNAME",
      "buildsystem": "simple",
      "sources": [
        {
          "type": "dir",
          "path": "$BUILD/build/AppDir/usr"
        }
      ],
      "build-commands": [
        "mkdir -p /app/bin /app/lib /app/share/aseprite",
        "cp -rf bin/* /app/bin",
        "printf '#!/bin/sh\n\nexec /app/lib/p7zip/7z \"\\\$@\"\n' > /app/bin/7z",
        "chmod 755 /app/bin/7z",
        "cp -rf lib/* /app/lib",
        "cp -rf share/* /app/share",
        "mv -f /app/share/applications/*.desktop /app/share/applications/$FLATPAKNAME.desktop",
        "mv -f \$(find /app/share/icons/hicolor -name *.png 2> /dev/null) \$(find /app/share/icons/hicolor -name apps 2> /dev/null)/$FLATPAKNAME.png"
      ]
    }
  ]
}
FLATPAK

    else

        # Set variables for each SRB2/SRB2Kart build.
        if [ "$BUILD" = "$BUILDPATH/ring-racers" ] || [ "$BUILD" = "$BUILDPATH/ring-racers-noire" ]; then

            SRB2CONFDIR=".ringracers$GITVERCONF"
            WADDIR="RINGRACERSWADDIR"

        elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-galaxy" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-hep" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-saturn" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-neptune" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

            SRB2CONFDIR=".srb2kart$GITVERCONF"
            WADDIR="SRB2WADDIR"

        elif [ "$(dirname $BUILD)" = "$BUILDPATH/srb2-custom" ]; then

            SRB2CONFDIR="."$SRB2CCONFDIR"c"$CUSTOMDIR""$GITVERCONF""
            WADDIR="SRB2WADDIR"

        else

            SRB2CONFDIR=".srb2$GITVERCONF"
            WADDIR="SRB2WADDIR"

        fi

        cat > "$BUILD/build/$FLATPAKNAME.json" << FLATPAK
{
  "app-id": "$FLATPAKNAME",
  "name": "$FLATPAKNAME",
  "runtime": "org.freedesktop.Platform",
  "runtime-version": "$($PRINTF $FLATPAKPLATFORM | gawk -F'/' '{print $NF}')",
  "sdk": "org.freedesktop.Sdk",
  "command": "AppRun",
  "finish-args": [
    "--share=ipc",
    "--share=network",
    "--socket=fallback-x11",
    "--socket=pulseaudio",
    "--socket=wayland",
    "--device=all",
    "--persist=$SRB2CONFDIR"
  ],
  "modules": [
    {
      "name": "$FLATPAKNAME",
      "buildsystem": "simple",
      "sources": [
        {
          "type": "dir",
          "path": "$BUILD/build/AppDir/usr"
        }
      ],
      "build-commands": [
        "mkdir -p /app/bin /app/lib /app/games /app/share",
        "cp -rf bin/* /app/bin",
        "printf '#!/bin/sh\n\nexport SDL_SOUNDFONTS=\"\\\$SDL_SOUNDFONTS\"\nexport SDL_FORCE_SOUNDFONTS=1\nexport $WADDIR=/app/games/\\\$(ls /app/games)\n\n$(ls $BUILD/build/AppDir/usr/bin) \"\\\$@\"\n' > /app/bin/AppRun",
        "chmod 755 /app/bin/AppRun",
        "cp -rf lib/* /app/lib",
        "cp -rf games/* /app/games",
        "cp -rf share/* /app/share",
        "mv -f /app/share/applications/*-software.desktop /app/share/applications/$FLATPAKNAME-software.desktop",
        "mv -f /app/share/applications/*-opengl.desktop /app/share/applications/$FLATPAKNAME-opengl.desktop",
        "mv -f \$(find /app/share/icons/hicolor -name *.png 2> /dev/null) \$(find /app/share/icons/hicolor -name apps 2> /dev/null)/$FLATPAKNAME.png"
      ]
    }
  ]
}
FLATPAK

    fi

    $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $BUILDNAME's Flatpak. Please wait..."
    $FLATPAKBIN install -y flathub "$FLATPAKPLATFORM" "$FLATPAKSDK"

    # Build Flatpak.
    cd "$BUILD" || exit
    flatpak-builder --force-clean --repo="$BUILD/build/srb2bld-repo" "$BUILD/build/flatpak-build" "$BUILD/build/$FLATPAKNAME.json"
    $($PRINTF "%s\n" "$FLATPAKBIN" | gawk '{print $1}') build-bundle "$BUILD/build/srb2bld-repo" "$BUILD/$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","-"); print}')-$VERSION-$ARCH.flatpak" "$FLATPAKNAME"

    # Set name of Flatpak in message.
    FLATPAKNAME=$(find "$BUILD" -name "*.flatpak" 2> /dev/null | gawk -F'/' '{print $NF}')

    # Move created Flatpak to working directory.
    mv -f "$BUILD/$FLATPAKNAME" "$LNXPWD" 2> /dev/null

    $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "Flatpak for $BUILDNAME is done. Look for \"$FLATPAKNAME\" in \"$LNXPWD\" path and install file with \"flatpak --user install $FLATPAKNAME\""

    if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

        $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "For built Flatpak bundles for 32-bit builds (SRB2 Final Demo, SRB2 JTE), you need to install Flatpak \"org.freedesktop.Platform.Compat.i386\" with command \"flatpak --user install org.freedesktop.Platform.Compat.i386/$($PRINTF "%s\n" "$FLATPAKPLATFORM" | gawk -F'/' '{print $2"/"$3}')\"."

    fi
}

installdepsglibc() {
    if [ -x "$(command -v doas 2> /dev/null)" ]; then

        SUDO="doas"

    else

        SUDO="sudo"

    fi

    # Creating cache to find packages matching missing library.
    if [ -n "$ISNET" ] && [ -n "$(LD_LIBRARY_PATH=$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib ldd $SRB2BINARYLNXPATH 2>&1 2> /dev/null | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {print $1}' | head -n1)" ]; then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Refreshing package database for $BUILDNAME to find packages matching missing library. Please wait..."

        if [ -n "$ISREADONLY" ]; then

            if [ -x "$(command -v rpm-ostree 2> /dev/null)" ]; then

                if [ -z "$(toolbox list --containers | gawk '/fedora/ {print}' | head -n1)" ]; then

                    yes | toolbox create

                fi

            elif [ -x "$(command -v nix 2> /dev/null)" ]; then

                #            VERSION_ID=$(gawk -F'"' '/VERSION_ID/ {print $2}' /etc/os-release)

                if [ ! -x "$(command -v nix-index 2> /dev/null)" ]; then

                    #                         $SUDO nix-env -iA nixos.nix-index
                    nix profile remove '.*nix-index' --extra-experimental-features 'nix-command flakes' 2> /dev/null && nix profile install "nixpkgs/release-$VERSION_ID#nix-index" --extra-experimental-features 'nix-command flakes'

                fi

                if [ ! -f "$HOME/.cache/nix-index/files" ] && [ ! -f "$XDG_CACHE_HOME/nix-index/files" ]; then

                    nix-index

                fi

            elif [ -x "$(command -v brew 2> /dev/null)" ]; then

                brew update

            fi

        else

            if [ -x "$(command -v emerge 2> /dev/null)" ]; then

                if [ ! -x "$(command -v e-file 2> /dev/null)" ]; then

                    $SUDO emerge pfl

                fi

            elif [ -x "$(command -v pacman 2> /dev/null)" ]; then

                $SUDO pacman -Fy

            elif [ -x "$(command -v apt-get 2> /dev/null)" ]; then

                if [ ! -x "$(command -v apt-file 2> /dev/null)" ]; then

                    $SUDO apt-get install -y apt-file

                fi

                $SUDO apt-file update

            elif [ -x "$(command -v xbps-install 2> /dev/null)" ]; then

                if [ ! -x "$(command -v xlocate 2> /dev/null)" ]; then

                    $SUDO xbps-install -y xtools

                fi

                xlocate -S

            elif [ -x "$(command -v nix 2> /dev/null)" ]; then

                #            VERSION_ID=$(gawk -F'"' '/VERSION_ID/ {print $2}' /etc/os-release)

                if [ ! -x "$(command -v nix-index 2> /dev/null)" ]; then

                    #                         $SUDO nix-env -iA nixos.nix-index
                    $SUDO nix profile remove '.*nix-index' --extra-experimental-features 'nix-command flakes' 2> /dev/null && $SUDO nix profile install "nixpkgs/release-$VERSION_ID#nix-index" --extra-experimental-features 'nix-command flakes'

                fi

                if [ ! -f "$HOME/.cache/nix-index/files" ] && [ ! -f "$XDG_CACHE_HOME/nix-index/files" ]; then

                    nix-index

                fi

            elif [ -x "$(command -v brew 2> /dev/null)" ]; then

                brew update

            fi

        fi

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing missing dependencies for $BUILDNAME to the system. Please wait..."
        PACKAGE=$(for l in $(LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BINARYLNXPATH" 2>&1 2> /dev/null | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {gsub(".so.*|-[0-9]\\.[0-9].so.*|[0-9]\\.[0-9].so.*",".so"); print $1}' | sort -u); do

            if [ -n "$ISREADONLY" ]; then

                if [ -x "$(command -v rpm-ostree 2> /dev/null)" ]; then

                    VERSION_ID=$(gawk -F'=' '/VERSION_ID/ {print $2}' /etc/os-release)

                    if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

                        toolbox run dnf provides -q "/usr/lib/$l" | gawk '/.fc'$VERSION_ID'.|.el'$($PRINTF "%s\n" $VERSION_ID | gawk -F'\\.' '{print $1}')'./ {print $1}' | gawk -F'\\.| ' '{gsub("-[0-9]|:[0-9]",""); print $1"."$NF}'

                    else

                        toolbox run dnf provides -q "/usr/lib$IS64/$l" | gawk '/.fc'$VERSION_ID'.|.el'$($PRINTF "%s\n" $VERSION_ID | gawk -F'\\.' '{print $1}')'./ {print $1}' | gawk -F'\\.| ' '{gsub("-[0-9]|:[0-9]",""); print $1"."$NF}'

                    fi

                elif [ -x "$(PATH=/usr/sbin:$PATH command -v transactional-update 2> /dev/null)" ]; then

                    l="$($PRINTF "%s\n" "$l" | gawk '{gsub(".so$","*.so.*"); print}')"

                    if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

                        zypper -q search --provides "$l" | gawk -F'|' '!/Name/ && /32bit/ {print $2}' | gawk 'NF{print}'

                    else

                        zypper -q search --provides "$l" | gawk -F'|' '!/Name|32bit/ {print $2}' | gawk 'NF{print}'

                    fi

                elif [ -x "$(command -v nix 2> /dev/null)" ]; then

                    nix-locate --top-level --regex "$($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*|-[0-9]\\.[0-9].so.*|[0-9]\\.[0-9].so.*",""); print "/lib/"$0".*.so|/wx/"$0".*.so"}')" 2>&1 | gawk '{if (/\/lib\/libz\.so|\/lib\/libSDL2_mixer\.so/) {gsub("^","nixos."); gsub("SDL2_mixer_2_0","SDL2_mixer"); print $1;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*|\/lib\/libz/) {gsub("^","nixos."); print $1;exit}}'
                    #                nix-locate --top-level --regex "$($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*|-[0-9]\\.[0-9].so.*|[0-9]\\.[0-9].so.*",""); print "/lib/"$0".*.so|/wx/"$0".*.so"}')" 2>&1 | gawk '{if (/\/lib\/libz\.so/) {gsub("^","nixpkgs/release-'$VERSION_ID'#"); print $1;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*|\/lib\/libz/ || /SDL2_mixer/) {gsub("^","nixpkgs/release-'$VERSION_ID'#"); print $1;exit}}'

                elif [ -x "$(command -v brew 2> /dev/null)" ]; then

                    l=$(LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BINARYLNXPATH" 2>&1 2> /dev/null | gawk '/not found/ && /'$(printf "%s\n" "$l" | gawk '{gsub(".so","*"); print}')'/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {print $1}')
                    curl -s "https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=contents&keywords=$l" | gawk '-F">|</a>' '/<\/a> \[[a-z]*[0-9]*\]/ {gsub("-dev|-[0-9].[0-9]-|0",""); gsub("libsdl","sdl"); gsub("-","_"); gsub("lua_ham","lua"); print $2}' | gawk '{gsub("wxgtk.*","wxwidgets"); print}' | head -n1

                fi

            else

                if [ -x "$(command -v emerge 2> /dev/null)" ]; then

                    p=$(e-file "/usr/lib/$l" | col | gawk '/^ \*/ {gsub(/29m|0m/,""); print $NF}')

                    if [ -z "$p" ]; then

                        e-file "/usr/lib64/$l" | col | gawk '/^ \*/ {gsub(/29m|0m/,""); print $NF}'

                    else

                        $PRINTF "%s\n" "$p"

                    fi

                elif [ -x "$(command -v pacman 2> /dev/null)" ]; then

                    if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

                        pacman -Fqx "$l" | gawk '{print}'

                    else

                        pacman -Fqx "$l" | gawk '!/lib32-/ {print}'

                    fi

                elif [ -x "$(command -v apt-get 2> /dev/null)" ]; then

                    apt-file -l find "$l" | gawk 'NF{print}'

                elif [ -x "$(command -v zypper 2> /dev/null)" ]; then

                    l="$($PRINTF "%s\n" "$l" | gawk '{gsub(".so$","*.so.*"); print}')"

                    if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

                        zypper -q search --provides "$l" | gawk -F'|' '!/Name/ && /32bit/ {print $2}' | gawk 'NF{print}'

                    else

                        zypper -q search --provides "$l" | gawk -F'|' '!/Name|32bit/ {print $2}' | gawk 'NF{print}'

                    fi

                elif [ -x "$(command -v dnf 2> /dev/null)" ]; then

                    VERSION_ID=$(gawk -F'"' '/VERSION_ID/ {print $2}' /etc/os-release)

                    if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

                        dnf provides -q "/usr/lib/$l" | gawk '/.fc'$VERSION_ID'.|.el'$($PRINTF "%s\n" $VERSION_ID | gawk -F'\\.' '{print $1}')'./ {print $1}'

                    else

                        dnf provides -q "/usr/lib$IS64/$l" | gawk '/.fc'$VERSION_ID'.|.el'$($PRINTF "%s\n" $VERSION_ID | gawk -F'\\.' '{print $1}')'./ {print $1}'

                    fi

                elif [ -x "$(command -v xbps-install 2> /dev/null)" ]; then

                    if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

                        xlocate "$l" | gawk '!/-devel-/ && /-32bit-/ {print $1}' | gawk '!a[$0]++ {print}'

                    else

                        xlocate "$l" | gawk '!/-devel-|-32bit-/ {print $1}' | gawk '!a[$0]++ {print}'

                    fi

                elif [ -x "$(command -v nix 2> /dev/null)" ]; then

                    nix-locate --top-level --regex "$($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*|-[0-9]\\.[0-9].so.*|[0-9]\\.[0-9].so.*",""); print "/lib/"$0".*.so|/wx/"$0".*.so"}')" 2>&1 | gawk '{if (/\/lib\/libz\.so|\/lib\/libSDL2_mixer\.so/) {gsub("^","nixos."); gsub("SDL2_mixer_2_0","SDL2_mixer"); print $1;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*|\/lib\/libz/) {gsub("^","nixos."); print $1;exit}}'
                    #                nix-locate --top-level --regex "$($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*|-[0-9]\\.[0-9].so.*|[0-9]\\.[0-9].so.*",""); print "/lib/"$0".*.so|/wx/"$0".*.so"}')" 2>&1 | gawk '{if (/\/lib\/libz\.so/) {gsub("^","nixpkgs/release-'$VERSION_ID'#"); print $1;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*|\/lib\/libz/ || /SDL2_mixer/) {gsub("^","nixpkgs/release-'$VERSION_ID'#"); print $1;exit}}'

                elif [ -x "$(command -v brew 2> /dev/null)" ]; then

                    l=$(LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BINARYLNXPATH" 2>&1 2> /dev/null | gawk '/not found/ && /'$(printf "%s\n" "$l" | gawk '{gsub(".so","*"); print}')'/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {print $1}')
                    curl -s "https://packages.debian.org/search?suite=default&section=all&arch=any&searchon=contents&keywords=$l" | gawk '-F">|</a>' '/<\/a> \[[a-z]*[0-9]*\]/ {gsub("-dev|-[0-9].[0-9]-|0",""); gsub("libsdl","sdl"); gsub("-","_"); gsub("lua_ham","lua"); print $2}' | gawk '{gsub("wxgtk.*","wxwidgets"); print}' | head -n1

                fi

            fi

        done)

        PACKAGE=$($PRINTF "%s\n" "$PACKAGE" | gawk '!a[$0]++ {print}')

        # Installing missing libraries for glibc based distros.
        if [ -n "$ISREADONLY" ]; then

            if [ -x "$(command -v rpm-ostree 2> /dev/null)" ]; then

                rpm-ostree install -A --allow-inactive -y $PACKAGE || true

            elif [ -x "$(PATH=/usr/sbin:$PATH command -v transactional-update 2> /dev/null)" ]; then

                $SUDO transactional-update pkg install -y $PACKAGE && $SUDO transactional-update apply || true

            elif [ -x "$(command -v nix 2> /dev/null)" ]; then

                PACKAGE=$($PRINTF "%s\n" "$PACKAGE" | gawk '!/wxGTK\.out/ {gsub("sdl","SDL"); print}' | sort -u)

                PACKAGENIXREMOVE=$(for l in $(nix profile list --extra-experimental-features 'nix-command flakes' | gawk -F'#| ' '{print $3}'); do

                    $PRINTF "%s\n" "$l"

                done)

                PACKAGENIXREMOVE=$($PRINTF "%s\n" "$PACKAGENIXREMOVE" | gawk '!/wxGTK\.out|wxGTK[0-9][0-9]]-gtk3\.out/ {gsub("sdl","SDL"); print}' | sort -u)
                #                    nix-env -irA $PACKAGE || true
                nix profile remove $PACKAGENIXREMOVE --extra-experimental-features 'nix-command flakes' 2> /dev/null && nix profile install $PACKAGE --extra-experimental-features 'nix-command flakes' || true

            elif [ -x "$(command -v brew 2> /dev/null)" ]; then

                PACKAGE=$($PRINTF "%s\n" "$PACKAGE" | gawk -F'/' '{gsub("libpng12",""); print $NF}' | sort -u)
                brew install $PACKAGE || true

            else

                $PRINTF "$NOTICE\n\n%s\n\e[0m" "Script can't detect package manager. Please install below missing libraries manually on your system using package manager or compile them from source:"
                LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BINARYLNXPATH" 2>&1 2> /dev/null | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {print $1}' | sort -u
                exit

            fi

        else

            if [ -x "$(command -v emerge 2> /dev/null)" ]; then

                $SUDO emerge $PACKAGE || true

            elif [ -x "$(command -v pacman 2> /dev/null)" ]; then

                $SUDO pacman -S --needed --noconfirm $PACKAGE || true

            elif [ -x "$(command -v apt-get 2> /dev/null)" ]; then

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

                    ISARM=$($PRINTF "%s\n" "$ISARM" | gawk -F'/' '{print $1}')
                    PACKAGE=$($PRINTF "%s\n" "$PACKAGE" | gawk '!/nvidia|primus|virtualbox/ {gsub("$","':$ISARM'"); print}')

                fi

                $SUDO apt-get install -y $PACKAGE || true

            elif [ -x "$(command -v zypper 2> /dev/null)" ]; then

                $SUDO zypper install -y $PACKAGE || true

            elif [ -x "$(command -v dnf 2> /dev/null)" ]; then

                $SUDO dnf install --best --skip-broken -y $PACKAGE || true

            elif [ -x "$(command -v xbps-install 2> /dev/null)" ]; then

                PACKAGE=$($PRINTF "%s\n" "$PACKAGE" | gawk '{gsub(" ","\n"); print}' | gawk -F'-' '{printf " "$1}')
                $SUDO xbps-install -y $PACKAGE || true

            elif [ -x "$(command -v nix 2> /dev/null)" ]; then

                PACKAGE=$($PRINTF "%s\n" "$PACKAGE" | gawk '!/wxGTK\.out/ {gsub("sdl","SDL"); print}' | sort -u)
                PACKAGENIXREMOVE=$(for l in $($SUDO nix profile list --extra-experimental-features 'nix-command flakes' | gawk -F'#| ' '{print $3}'); do

                    $PRINTF "%s\n" "$l"

                done)
                PACKAGENIXREMOVE=$($PRINTF "%s\n" "$PACKAGENIXREMOVE" | gawk '!/wxGTK\.out|wxGTK[0-9][0-9]]-gtk3\.out/ {gsub("sdl","SDL"); print}' | sort -u)
                #                    $SUDO nix-env -irA $PACKAGE || true

                $SUDO nix profile remove $PACKAGENIXREMOVE --extra-experimental-features 'nix-command flakes' 2> /dev/null && $SUDO nix profile install $PACKAGE --extra-experimental-features 'nix-command flakes' || true

            elif [ -x "$(command -v brew 2> /dev/null)" ]; then

                PACKAGE=$($PRINTF "%s\n" "$PACKAGE" | gawk -F'/' '{gsub("libpng12",""); print $2}' | sort -u)
                brew install $PACKAGE || true

            else

                $PRINTF "$NOTICE\n\n%s\n\e[0m" "Script can't detect package manager. Please install below missing libraries manually on your system using package manager or compile them from source:"
                LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BINARYLNXPATH" 2>&1 2> /dev/null | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {print $1}' | sort -u
                exit

            fi

        fi

    fi

    if [ -n "$($PRINTF "%s\n" "$ARGS" | gawk 'match($0, / -u -| -u$| --user -| --user$/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$SRB2BLDPREFIX" | gawk 'match($0, /\/home\/'$USER'\/.local/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$ISREADONLY" ]; then

        unset SUDO

    fi
}

installdepsmusl() {
    if [ -x "$(command -v doas 2> /dev/null)" ]; then

        SUDO="doas"

    else

        SUDO="sudo"

    fi

    # Creating cache to find packages matching missing library.
    if [ -n "$ISNET" ] && [ "$LIBC" = "musl" ] && [ -n "$(LD_LIBRARY_PATH=$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib ldd $SRB2BINARYLNXPATH 2>&1 | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u)" ]; then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing missing dependencies for $BUILDNAME to the system. Please wait..."

        if [ -x "$(command -v emerge 2> /dev/null)" ]; then

            if [ ! -x "$(command -v e-file 2> /dev/null)" ]; then

                $SUDO emerge pfl

            fi

        elif [ -x "$(command -v apk 2> /dev/null)" ]; then

            if [ ! -x "$(command -v apk-file 2> /dev/null)" ]; then

                $SUDO apk add apk-file

            fi

        elif [ -x "$(command -v xbps-install 2> /dev/null)" ]; then

            if [ ! -x "$(command -v xlocate 2> /dev/null)" ]; then

                $SUDO xbps-install -y xtools

            fi

            xlocate -S

        fi

        PACKAGE=$(for l in $(LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u); do

            if [ -x "$(command -v emerge 2> /dev/null)" ]; then

                p=$(e-file "/usr/lib/$l" | col | gawk '/^ \*/ {gsub(/29m|0m/,""); print $NF}')

                if [ -z "$p" ]; then

                    e-file "/usr/lib64/$l" | col | gawk '/^ \*/ {gsub(/29m|0m/,""); print $NF}'

                else

                    $PRINTF "%s\n" "$p"

                fi

            elif [ -x "$(command -v apk 2> /dev/null)" ]; then

                l="$($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*",".so"); print}')"

                apk-file "$l" | gawk '!/PACKAGE/ {print $2}' | sort -u

            elif [ -x "$(command -v xbps-install 2> /dev/null)" ]; then

                l="$($PRINTF "%s\n" "$l" | gawk '{gsub("liblua.*","libluajit.*"); print}')"

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

                    xlocate "$l" | gawk '!/-devel-|primus/ && /-32bit-/ {print $1}' | gawk '!a[$0]++ {print}'

                else

                    xlocate "$l" | gawk '!/-devel-|-32bit-|primus/ {print $1}' | gawk '!a[$0]++ {print}'

                fi

            fi

        done)

        PACKAGE=$($PRINTF "%s\n" "$PACKAGE" | gawk '!a[$0]++ {print}')

        # Installing missing libraries for musl based distros.
        if [ -n "$ISREADONLY" ]; then

            if [ -x "$(command -v nix 2> /dev/null)" ]; then

                VERSION_ID=$(gawk -F'"' '/VERSION_ID/ {print $2}' /etc/os-release)

                PACKAGE=$($PRINTF "%s\n" "$PACKAGE" | gawk '!/nixos\.wxGTK\.out/ {gsub("nixos.|[a-z]*/","") && gsub("^| "," nixpkgs.") && gsub("sdl","SDL"); print}' | sort -u)
                #                    nix-env -irA $PACKAGE || true
                nix profile remove '.*nix-index' --extra-experimental-features 'nix-command flakes' 2> /dev/null && nix profile install "nixpkgs/release-$VERSION_ID#nix-index" --extra-experimental-features 'nix-command flakes'

            elif [ -x "$(command -v brew 2> /dev/null)" ]; then

                PACKAGE=$($PRINTF "%s\n" "$PACKAGE" | gawk -F'/' '{gsub("libpng12",""); print $NF}' | sort -u)
                brew install $PACKAGE || true

            else

                $PRINTF "$NOTICE\n\n%s\n\e[0m" "Script can't detect package manager. Please install below missing libraries manually on your system using package manager or compile them from source:"
                LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u
                exit

            fi

        else

            if [ -x "$(command -v emerge 2> /dev/null)" ]; then

                $SUDO emerge $PACKAGE || true

            elif [ -x "$(command -v apk 2> /dev/null)" ]; then

                # Since Alpine 3.17 building and installing libexecinfo through abuild is required.
                if [ -z "$($PRINTF "%s\n" "$PACKAGE" | gawk 'match($0, /libexecinfo.so/) {print substr($0, RSTART, RLENGTH)}' | head -n1)" ]; then

                    if [ ! -x "$(command -v abuild 2> /dev/null)" ]; then

                        $SUDO apk add alpine-sdk

                    fi

                    curl -L https://git.alpinelinux.org/aports/plain/main/libexecinfo/APKBUILD?h=3.16-stable -o/tmp/APKBUILD
                    curl -L https://git.alpinelinux.org/aports/plain/main/libexecinfo/10-execinfo.patch?h=3.16-stable -o/tmp/10-execinfo.patch
                    curl -L https://git.alpinelinux.org/aports/plain/main/libexecinfo/20-define-gnu-source.patch?h=3.16-stable -o/tmp/20-define-gnu-source.patch
                    curl -L https://git.alpinelinux.org/aports/plain/main/libexecinfo/30-linux-makefile.patch?h=3.16-stable -o/tmp/30-linux-makefile.patch
                    cd /tmp || exit
                    abuild-keygen -nai
                    abuild -rc -P /tmp
                    $SUDO apk add $(find /tmp -name "*.apk" 2> /dev/null)
                    cd - || exit

                fi

                $SUDO apk add --force-broken-world $PACKAGE 2> /dev/null

            elif [ -x "$(command -v xbps-install 2> /dev/null)" ]; then

                if [ ! -f "$(xbps-query -f libexecinfo 2> /dev/null | head -n1)" ]; then

                    $SUDO xbps-install -y libexecinfo

                fi

                PACKAGE=$($PRINTF "%s\n" "$PACKAGE" | gawk '{gsub(" ","\n"); print}' | gawk -F'-' '{printf " "$1}')
                $SUDO xbps-install -y $PACKAGE 2> /dev/null

            else

                $PRINTF "$NOTICE\n\n%s\n\e[0m" "Script can't detect package manager. Please install below missing libraries manually on your system using package manager or compile them from source:"
                LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u
                exit

            fi

        fi

    fi

    if [ -n "$($PRINTF "%s\n" "$ARGS" | gawk 'match($0, / -u -| -u$| --user -| --user$/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$SRB2BLDPREFIX" | gawk 'match($0, /\/home\/'$USER'\/.local/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$ISREADONLY" ]; then

        unset SUDO

    fi
}

installtolinux() {
    # Saving configuration flags to variable.
    if [ -n "$(cat "$BUILD/conf")" ]; then

        CONF=$(cat "$BUILD/conf")

    fi

    # Adding path to commit revision file.
    COMREVFILEPATH="$BUILD/.comrev"

    # Making missing directory paths.
    if [ "$LNXOSNAME" != "NixOS" ]; then

        if [ "$SRB2BLDPREFIX" = "/usr/local" ]; then

            if [ ! -d "/usr/local/bin" ] && [ ! -d "/usr/local/share/applications" ] && [ ! -d "/usr/local/share/icons/hicolor/64x64/apps" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Creating /usr/local/bin, /usr/local/share/applications, /usr/local/share/icons/hicolor/64x64/apps and /usr/local/share/games directory paths. Please wait..."
                $SUDO install -d "/usr/local/bin"
                $SUDO install -d "/usr/local/share/applications"
                $SUDO install -d "/usr/local/share/icons/hicolor/64x64/apps"
                $SUDO install -d "/usr/local/share/games"

            fi

        else

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Creating $SRB2BLDPREFIX/bin, $SRB2BLDPREFIX/share/applications, $SRB2BLDPREFIX/share/icons/hicolor/64x64/apps and $SRB2BLDPREFIX/share/games directory paths. Please wait..."
            install -d "$SRB2BLDPREFIX/bin"
            install -d "$SRB2BLDPREFIX/share/applications"
            install -d "$SRB2BLDPREFIX/share/icons/hicolor/64x64/apps"
            install -d "$SRB2BLDPREFIX/share/games"

        fi

    fi

    removeduplicate

    # Installing build.
    if [ "$BUILD" = "$BUILDPATH/srb2" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2 binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2UncappedPlus"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2ucp"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2uncappedplus-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2uncappedplus-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2uncappedplus.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2ucp binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-netplus" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2NetPlus"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2np"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2netplus-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2netplus-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2netplus.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2np binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-rphys" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2rphys"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2rphys"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2rphys-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2rphys-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2rphys.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2rphys binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-tsourdt3rd" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2TSoURDt3rd"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2tsourdt3rd"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2tsourdt3rd-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2tsourdt3rd-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2tsourdt3rd.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2tsourdt3rd binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-vr" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2VR"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2vr"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2vr-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2vr-opengl.desktop"
        SRB2DESKTOPOPENVRLNXPATH="$SRB2BLDPREFIX/share/applications/srb2vr-openvr.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2vr.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2vr binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2legacy"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2legacy"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2legacy-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2legacy-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2legacy.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2legacy binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2-2.0"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2_2.0"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2_2.0-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2_2.0-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2_2.0.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2_2.0 binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdlsrb2" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2FinalDemo"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2fd"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2finaldemo-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2finaldemo-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2finaldemo.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2fd binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2JTE"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2jte"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2jte-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2jte-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2jte.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2jte binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdlsrb2JTE" "$SRB2BINARYLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2Persona"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2p"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2persona-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2persona-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2persona.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2p binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/ring-racers" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/RingRacers"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/ringracers"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/ring-racers-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/ring-racers-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/ringracers.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's ringracers binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/ringracers" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/build/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/RingRacers"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/ring-racers-noire" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/RingRacersNoire"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/ringracersnoire"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/ring-racers-noire-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/ring-racers-noire-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/ringracersnoire.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's ringracersnoire binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/ringracers" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/build/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/RingRacers"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2Kart"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2kart"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2kart-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2kart-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2kart.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2kart binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2kart" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2KartMoeMansion"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2kartmoe"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2kartmoemansion-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2kartmoemansion-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2kartmoemansion.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2kartmoe binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2kart" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-galaxy" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2KartGalaxy"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2kartgalaxy"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2kartgalaxy-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2kartgalaxy-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2kartgalaxy.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2kartgalaxy binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2kart" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-hep" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2KartHEP"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2karthep"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2karthep-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2karthep-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2karthep.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2karthep binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2kart" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-saturn" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2KartSaturn"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2kartsaturn"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2kartsaturn-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2kartsaturn-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2kartsaturn.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2kartsaturn binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2kart" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-neptune" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2KartNeptune"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2kartneptune"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2kartneptune-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2kartneptune-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2kartneptune.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2kartneptune binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2kart" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/SRB2KartVR"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/srb2kartvr"
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/srb2kartvr-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/srb2kartvr-opengl.desktop"
        SRB2DESKTOPOPENVRLNXPATH="$SRB2BLDPREFIX/share/applications/srb2kartvr-openvr.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/srb2kartvr.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's srb2kartvr binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/lsdl2srb2kart" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart"/* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$(dirname $BUILD)" = "$BUILDPATH/srb2-custom" ]; then

        SRB2CASSETDIR=$(gawk -F'"' '/SRB2APPLICATION/ {gsub(" ",""); print $2}' "$BUILD/src/doomdef.h" 2> /dev/null)
        SRB2CCONFDIR=$($PRINTF "%s\n" "$SRB2CASSETDIR" | gawk '{print tolower($0)}')
        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/games/"$SRB2CASSETDIR"C"$CUSTOMDIR""
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/"$SRB2CCONFDIR"c"$CUSTOMDIR""
        SRB2BINARYDEBUGLNXPATH=""$SRB2BINARYLNXPATH".debug"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/"$SRB2CCONFDIR"c"$CUSTOMDIR"-software.desktop"
        SRB2DESKTOPOPENGLLNXPATH="$SRB2BLDPREFIX/share/applications/"$SRB2CCONFDIR"c"$CUSTOMDIR"-opengl.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"$SRB2CCONFDIR"c"$CUSTOMDIR".png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's "$SRB2CCONFDIR"c"$CUSTOMDIR" binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 $(find "$BUILD/build/AppDir/usr/bin" -mindepth 1 -maxdepth 1 2> /dev/null) "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "$SRB2BINARYDEBUGLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf $(
                $SUDO find "$BUILD/build/AppDir/usr/games" -mindepth 2 -maxdepth 2 -type f -regex ".*\.[a-z]*[0-9]*" 2> /dev/null
                $SUDO find "$BUILD/build/AppDir/usr/games" -mindepth 2 -maxdepth 2 -type d 2> /dev/null
            ) "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/wadcli"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/wadcli.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/wadcli.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's wadcli binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/wadcli" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/kartmaker" ]; then

        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/kartmaker"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/kartmaker.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/kartmaker.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's kartmaker binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/kartmaker" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ]; then

        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/kartmaker_rr"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/kartmakerringracers.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/kartmakerringracers.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's kartmaker_rr binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/kartmaker" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/followermaker" ]; then

        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/followermaker"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/followermaker.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/followermaker.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's followermaker binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/followermaker" "$SRB2BINARYLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/slade3"
        SRB2LIBRARYLNXPATH="$SRB2BLDPREFIX/lib/slade3"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/slade"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/slade.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/slade.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's slade binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            if [ "$LIBC" != "musl" ]; then

                $SUDO install -d "$SRB2ASSETLNXPATH/mime" "$SRB2ASSETLNXPATH/icons" "$SRB2LIBRARYLNXPATH"
                printf '#!/bin/sh\n\nexport LD_LIBRARY_PATH='$SRB2LIBRARYLNXPATH':'$SRB2LIBRARYLNXPATH'/gtk-3.0/modules\nexport GIO_MODULE_DIR='$SRB2LIBRARYLNXPATH'/gio/modules\nexport GIO_EXTRA_MODULES='$SRB2LIBRARYLNXPATH'/gio/modules\nexport GDK_PIXBUF_MODULEDIR='$SRB2LIBRARYLNXPATH'/gdk-pixbuf/loaders\nexport GDK_PIXBUF_MODULE_FILE='$SRB2LIBRARYLNXPATH'/gdk-pixbuf/loaders.cache\nexport XDG_DATA_DIRS='$SRB2ASSETLNXPATH':'$SRB2ASSETLNXPATH'/mime\nexport KDE_FULL_SESSION=false\nexec '$SRB2ASSETLNXPATH'/'$($PRINTF "%s\n" $SRB2BINARYLNXPATH | gawk -F'/' '{print $NF}')'.bin "$@"\n' | $SUDO tee "$SRB2BINARYLNXPATH"
                $SUDO install -Dm644 "$BUILD/build/AppDir/usr/lib/"*.so* -t "$SRB2LIBRARYLNXPATH"
                $SUDO install -Dm644 "$BUILD/build/AppDir/usr/lib/gtk-3.0/modules/"* -t "$SRB2LIBRARYLNXPATH/gtk-3.0/modules"
                $SUDO install -Dm644 "$BUILD/build/AppDir/usr/lib/gio/modules/"* -t "$SRB2LIBRARYLNXPATH/gio/modules"
                $SUDO install -Dm644 "$BUILD/build/AppDir/usr/lib/gdk-pixbuf/loaders/"* -t "$SRB2LIBRARYLNXPATH/gdk-pixbuf/loaders"
                $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/glib-2.0/schemas/"* -t "$SRB2ASSETLNXPATH/glib-2.0/schemas"
                $SUDO cp -rf "$BUILD/build/AppDir/usr/share/mime/"* "$SRB2ASSETLNXPATH/mime"
                $SUDO cp -rf "$BUILD/build/AppDir/usr/share/icons/"* "$SRB2ASSETLNXPATH/icons"
                LD_LIBRARY_PATH="$SRB2LIBRARYLNXPATH" GIO_MODULE_DIR="$SRB2LIBRARYLNXPATH/gio/modules" GIO_EXTRA_MODULES="$SRB2LIBRARYLNXPATH/gio/modules" GDK_PIXBUF_MODULEDIR="$SRB2LIBRARYLNXPATH/gdk-pixbuf/loaders" $(find / -type f -name "gdk-pixbuf-query-loaders*" -executable -o -type l -xtype f -name "gdk-pixbuf-query-loaders*" -executable 2> /dev/null | head -n1) | $SUDO tee "$SRB2LIBRARYLNXPATH/gdk-pixbuf/loaders.cache" > /dev/null

            else

                $SUDO install -d "$SRB2ASSETLNXPATH"
                printf '#!/bin/sh\n\nexport KDE_FULL_SESSION=false\nexec '$SRB2ASSETLNXPATH'/'$($PRINTF "%s\n" $SRB2BINARYLNXPATH | gawk -F'/' '{print $NF}')'.bin "$@"\n' | $SUDO tee "$SRB2BINARYLNXPATH"

            fi

            $SUDO chmod 755 "$SRB2BINARYLNXPATH"
            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/"* "$SRB2ASSETLNXPATH/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').bin"
            $SUDO install -Dm644 $(find "$BUILD/build" -type f -name slade.pk3 2> /dev/null | head -n1) -t "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/ultimatezonebuilder" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/ultimatezonebuilder"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/uzb"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/ultimatezonebuilder.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/ultimatezonebuilder.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's uzb binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            cat << UZB | $SUDO tee "$SRB2BINARYLNXPATH" > /dev/null
#!/bin/sh

cd "$SRB2ASSETLNXPATH"

UZBLIBRARIES=\$(DISPLAY= $SRB2ASSETLNXPATH/uzb 2>&1 | gawk -F':' '{IGNORECASE=1} /Error/ && /no such file or directory/ && !/ld-linux/ || /undefined symbol/ {print \$2}' | gawk '{print \$NF}')

exec "$SRB2ASSETLNXPATH/uzb" "\$@" || [ "\$?" != "137" ] && printf "\e[1;93m\n%s\n\e[0m" "Ultimate Zone Builder didn't run successfully. Please check if you have these libraries in your path and install them if they are not there:
"\$UZBLIBRARIES"
Exiting..."

UZB

            $SUDO chmod 755 "$SRB2BINARYLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/bin/"* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/highvoltagering" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/highvoltagering"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/hvr"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/highvoltagering.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/highvoltagering.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's hvr binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            cat << HVR | $SUDO tee "$SRB2BINARYLNXPATH" > /dev/null
#!/bin/sh

cd "$SRB2ASSETLNXPATH"

HVRLIBRARIES=\$(DISPLAY= $SRB2ASSETLNXPATH/hvr 2>&1 | gawk -F':' '{IGNORECASE=1} /Error/ && /no such file or directory/ && !/ld-linux/ || /undefined symbol/ {print \$2}' | gawk '{print \$NF}')

exec "$SRB2ASSETLNXPATH/hvr" "\$@" || [ "\$?" != "137" ] && printf "\e[1;93m\n%s\n\e[0m" "High Voltage Ring didn't run successfully. Please check if you have these libraries in your path and install them if they are not there:
"\$HVRLIBRARIES"
Exiting..."

HVR
            $SUDO chmod 755 "$SRB2BINARYLNXPATH"
            $SUDO install -d "$SRB2ASSETLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/bin/"* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    elif [ "$BUILD" = "$BUILDPATH/aseprite" ]; then

        SRB2ASSETLNXPATH="$SRB2BLDPREFIX/share/aseprite"
        SRB2BINARYLNXPATH="$SRB2BLDPREFIX/bin/aseprite"
        SRB2DESKTOPLNXPATH="$SRB2BLDPREFIX/share/applications/aseprite.desktop"
        SRB2LNXICONSIZE=$(find "$BUILD/build/AppDir/usr/share/icons/hicolor/"*/apps -mindepth 1 -maxdepth 1 2> /dev/null | gawk -F'hicolor/|/apps' '{print $2}' | gawk '!a[$0]++ {print}')
        SRB2ICONLNXPATH="$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps/aseprite.png"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's aseprite binary, assets, icons and desktop file to the system. Please wait..."

        if [ "$LNXOSNAME" != "NixOS" ]; then

            $SUDO install -Dm755 "$BUILD/build/AppDir/usr/bin/aseprite" "$SRB2BINARYLNXPATH"
            $SUDO cp -rf "$BUILD/build/AppDir/usr/share/aseprite"* "$SRB2ASSETLNXPATH"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/applications/"* -t "$SRB2BLDPREFIX/share/applications"
            $SUDO install -Dm644 "$BUILD/build/AppDir/usr/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "$SRB2BLDPREFIX/share/icons/hicolor/$SRB2LNXICONSIZE/apps"

        fi

    fi

    # Create flake for NixOS.
    if [ "$LNXOSNAME" = "NixOS" ]; then

        cp -rf "$BUILD/build/AppDir" "/tmp/flake-build"

        if [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

            # Setting path to interpreter.
            $SUDO patchelf --set-interpreter $(ldd "$BUILD/build/AppDir/usr/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')" 2>&1 | gawk '/ld-linux.*/ {print $3}') "/tmp/flake-build/usr/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')" || true

            cat > "/tmp/flake-build/flake.nix" << NIX
{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
  };

  outputs = { self, nixpkgs }:
    let
      # Update the localFile to the actual path where the binary is located.
      localFile = ./usr;
    in
    {
      defaultPackage.$ARCH-linux =
        with import nixpkgs { system = "$ARCH-linux"; };

        stdenv.mkDerivation rec {
          name = "$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","-"); print tolower($0)}')-\${version}";

          version = "$(git -C "$BUILD" rev-parse --short HEAD)";

          # Set src to the localFile path
          src = localFile;

#          nativeBuildInputs = [
#            autoPatchelfHook
#          ];

#          buildInputs = [
#            zlib
#            bzip2
#            curlMinimal
#            freeimage
#            freetype
#            glew
#            sfml
#            ftgl
#            fmt
#            libGLU
#            libglvnd
#            mpg123
#            gtk3
#            wxGTK30-gtk3
#            lua5_3_compat
#            fluidsynth
#             liblzf
#          ];

          sourceRoot = ".";

          installPhase = ''
            install -d "\$out/bin"
            printf '#!/bin/sh\n\nexport LD_LIBRARY_PATH=/nix/var/nix/profiles/default/lib/wadcli\nexec /nix/var/nix/profiles/default/share/wadcli/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').bin \"\$@\"\n' > "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            chmod 755 "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            install -d "\$out/share/wadcli"
            install -Dm755 "\$src/bin/"* "\$out/share/wadcli/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').bin"
            install -Dm644 "\$src/lib/"* -t "\$out/lib/wadcli"
            install -Dm644 "\$src/share/applications/"* -t "\$out/share/applications"
            install -Dm644 "\$src/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "\$out/share/icons/hicolor/$SRB2LNXICONSIZE/apps"
          '';
        };
    };
}
NIX

        elif [ "$BUILD" = "$BUILDPATH/kartmaker" ] || [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ] || [ "$BUILD" = "$BUILDPATH/followermaker" ]; then

            # Setting path to interpreter.
            $SUDO patchelf --set-interpreter $(ldd "$BUILD/build/AppDir/usr/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')" 2>&1 | gawk '/ld-linux.*/ {print $3}') "/tmp/flake-build/usr/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')" || true

            cat > "/tmp/flake-build/flake.nix" << NIX
{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
  };

  outputs = { self, nixpkgs }:
    let
      # Update the localFile to the actual path where the binary is located.
      localFile = ./usr;
    in
    {
      defaultPackage.$ARCH-linux =
        with import nixpkgs { system = "$ARCH-linux"; };

        stdenv.mkDerivation rec {
          name = "$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","-"); print tolower($0)}')-\${version}";

          version = "$(git -C "$BUILD" rev-parse --short HEAD)";

          # Set src to the localFile path
          src = localFile;

          sourceRoot = ".";

          installPhase = ''
            install -d "\$out/bin"
            printf '#!/bin/sh\n\nexport LD_LIBRARY_PATH=/nix/var/nix/profiles/default/lib/kartmaker\nexec /nix/var/nix/profiles/default/share/kartmaker/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').bin \"\$@\"\n' > "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            chmod 755 "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            install -d "\$out/share/kartmaker"
            install -Dm755 "\$src/bin/"* "\$out/share/kartmaker/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').bin"
            install -Dm644 "\$src/share/applications/"* -t "\$out/share/applications"
            install -Dm644 "\$src/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "\$out/share/icons/hicolor/$SRB2LNXICONSIZE/apps"
          '';
        };
    };
}
NIX

        elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

            install -Dm644 $(find "$BUILD/build" -type f -name slade.pk3 2> /dev/null | head -n1) -t "/tmp/flake-build/usr/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')"

            # Setting path to interpreter.
            $SUDO patchelf --set-interpreter $(ldd "$BUILD/build/AppDir/usr/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')" 2>&1 | gawk '/ld-linux.*/ {print $3}') "/tmp/flake-build/usr/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')" || true

            cat > "/tmp/flake-build/flake.nix" << NIX
{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
  };

  outputs = { self, nixpkgs }:
    let
      # Update the localFile to the actual path where the binary is located.
      localFile = ./usr;
    in
    {
      defaultPackage.$ARCH-linux =
        with import nixpkgs { system = "$ARCH-linux"; };

        stdenv.mkDerivation rec {
          name = "$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","-"); print tolower($0)}')-\${version}";

          version = "$(git -C "$BUILD" rev-parse --short HEAD)";

          # Set src to the localFile path
          src = localFile;

#          nativeBuildInputs = [
#            autoPatchelfHook
#          ];

          buildInputs = [
#            zlib
#            bzip2
#            curlMinimal
#            freeimage
#            freetype
#            glew
#            sfml
#            ftgl
#            fmt
#            libGLU
#            libglvnd
#            mpg123
#            gtk3
#            libcanberra-gtk3
#            glib
#            libpng
            gdk-pixbuf
#            lua5_3_compat
#            fluidsynth
#            p11-kit
#            gnutls
#            libproxy
#            libnotify
#            librsvg
#            hicolor-icon-theme
          ];

          sourceRoot = ".";

          installPhase = ''
            install -d "\$out/bin" "\$out/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')" "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/mime"
            printf '#!/bin/sh\n\nexport LD_LIBRARY_PATH=/nix/var/nix/profiles/default/lib/$($PRINTF "%s\n" "$SRB2LIBRARYLNXPATH" | gawk -F'/' '{print $NF}'):/nix/var/nix/profiles/default/lib/$($PRINTF "%s\n" "$SRB2LIBRARYLNXPATH" | gawk -F'/' '{print $NF}')/gtk-3.0/modules\nexport GIO_MODULE_DIR=/nix/var/nix/profiles/default/lib/$($PRINTF "%s\n" "$SRB2LIBRARYLNXPATH" | gawk -F'/' '{print $NF}')/gio/modules\nexport GIO_EXTRA_MODULES=/nix/var/nix/profiles/default/lib/$($PRINTF "%s\n" "$SRB2LIBRARYLNXPATH" | gawk -F'/' '{print $NF}')/gio/modules\nexport GDK_PIXBUF_MODULEDIR=/nix/var/nix/profiles/default/lib/$($PRINTF "%s\n" "$SRB2LIBRARYLNXPATH" | gawk -F'/' '{print $NF}')/gdk-pixbuf/loaders\nexport GDK_PIXBUF_MODULE_FILE=/nix/var/nix/profiles/default/lib/$($PRINTF "%s\n" "$SRB2LIBRARYLNXPATH" | gawk -F'/' '{print $NF}')/gdk-pixbuf/loaders.cache\nexport XDG_DATA_DIRS=/nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}'):/nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/mime:/run/current-system/sw/share\nexport KDE_FULL_SESSION=false\nexec /nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').bin \"\$@\"\n' > "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            chmod 755 "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            install -Dm755 "\$src/bin/"* "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').bin"
            install -Dm644 "\$src/lib/"*.so* -t "\$out/lib/$($PRINTF "%s\n" "$SRB2LIBRARYLNXPATH" | gawk -F'/' '{print $NF}')"
            install -Dm644 "\$src/lib/gtk-3.0/modules/"* -t "\$out/lib/$($PRINTF "%s\n" "$SRB2LIBRARYLNXPATH" | gawk -F'/' '{print $NF}')/gtk-3.0/modules"
            install -Dm644 "\$src/lib/gio/modules/"* -t "\$out/lib/$($PRINTF "%s\n" "$SRB2LIBRARYLNXPATH" | gawk -F'/' '{print $NF}')/gio/modules"
            install -Dm644 "\$src/lib/gdk-pixbuf/loaders/"* -t "\$out/lib/$($PRINTF "%s\n" "$SRB2LIBRARYLNXPATH" | gawk -F'/' '{print $NF}')/gdk-pixbuf/loaders"
            install -Dm644 "\$src/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/slade.pk3" "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')"
            install -Dm644 "\$src/share/glib-2.0/schemas/"* -t "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/glib-2.0/schemas"
            cp -rf "\$src/share/mime/"* "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/mime"
            install -Dm644 "\$src/share/applications/"* -t "\$out/share/applications"
            install -Dm644 "\$src/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "\$out/share/icons/hicolor/$SRB2LNXICONSIZE/apps"
            LD_LIBRARY_PATH="\$out/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')" GIO_MODULE_DIR="\$out/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/gio/modules" GIO_EXTRA_MODULES="\$out/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/gio/modules" GDK_PIXBUF_MODULEDIR="\$out/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/gdk-pixbuf/loaders" gdk-pixbuf-query-loaders > "\$out/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/gdk-pixbuf/loaders.cache"
          '';
        };
    };
}
NIX

        elif [ "$BUILD" = "$BUILDPATH/ultimatezonebuilder" ] || [ "$BUILD" = "$BUILDPATH/highvoltagering" ]; then

            cat > "/tmp/flake-build/flake.nix" << NIX
{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
  };

  outputs = { self, nixpkgs }:
    let
      # Update the localFile to the actual path where the binary is located.
      localFile = ./usr;
    in
    {
      defaultPackage.$ARCH-linux =
        with import nixpkgs { system = "$ARCH-linux"; };

        stdenv.mkDerivation rec {
          name = "$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","-"); print tolower($0)}')-\${version}";

          version = "$(git -C "$BUILD" rev-parse --short HEAD)";

          # Set src to the localFile path
          src = localFile;

#          nativeBuildInputs = [
#             mono
#          ];

          sourceRoot = ".";

          installPhase = ''
            install -d "\$out/bin"
            printf '#!/bin/sh\n\nexport LD_LIBRARY_PATH=/nix/var/nix/profiles/default/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')\ncd /nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')\nexec mono Builder.exe \"\$@\"\n' > "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            chmod 755 "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            install -d "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')"
            cp -rf "\$src/bin/"* "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')"
            install -Dm644 "\$src/lib/"* -t "\$out/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')"
            install -Dm644 "\$src/share/applications/"* -t "\$out/share/applications"
            install -Dm644 "\$src/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "\$out/share/icons/hicolor/$SRB2LNXICONSIZE/apps"
          '';
        };
    };
}
NIX

        elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

            cat > "/tmp/flake-build/flake.nix" << NIX

{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
  };

  outputs = { self, nixpkgs }:
    let
      # Update the localFile to the actual path where the binary is located.
      localFile = ./usr;
    in
    {
      defaultPackage.$ARCH-linux =
        with import nixpkgs { system = "$ARCH-linux"; };

        pkgsi686Linuxstdenv.mkDerivation rec {
          name = "$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","-"); print tolower($0)}')-\${version}";

          version = "$(git -C "$BUILD" rev-parse --short HEAD)";

          # Set src to the localFile path
          src = localFile;

          sourceRoot = ".";

          nativeBuildInputs = [
            autoPatchelfHook
          ];
#
#          buildInputs = [
#            curlMinimal
#            SDL2_mixer
#            game-music-emu
#            libopenmpt
#            libpng
#          ];

#          autoPatchelfIgnoreMissingDeps = [
#            zfs
#          ];

          installPhase = ''
            install -d "\$out/bin"
            printf '#!/bin/sh\n\nexport LD_LIBRARY_PATH=/nix/var/nix/profiles/default/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')\nexport SRB2WADDIR=/nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')\nexec /nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').bin \"\$@\"\n' > "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            printf '#!/bin/sh\n\nexport LD_LIBRARY_PATH=/nix/var/nix/profiles/default/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')\nexport SRB2WADDIR=/nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')\nexec /nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')-debug.bin \"\$@\"\n' > "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').debug"
            chmod 755 "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            chmod 755 "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').debug"
            install -Dm755 \$(find "\$src/bin" -type f 2> /dev/null | gawk '!/\.debug/ {print}' | head -n1) "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').bin"
            install -Dm755 \$(find "\$src/bin" -type f -name "*.debug" 2> /dev/null | head -n1) "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')-debug.bin" || true
            cp -rf "\$src/games/"*/* "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')"
            install -Dm644 "\$src/lib/"* -t "\$out/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')"
            install -Dm644 "\$src/share/applications/"* -t "\$out/share/applications"
            install -Dm644 "\$src/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "\$out/share/icons/hicolor/$SRB2LNXICONSIZE/apps"
          '';
        };
    };
}
NIX

        elif [ "$BUILD" = "$BUILDPATH/aseprite" ]; then

            # Setting path to interpreter.
            $SUDO patchelf --set-interpreter $(ldd "$BUILD/build/AppDir/usr/bin/"* 2>&1 | gawk '/ld-linux.*/ {print $3}') "/tmp/flake-build/usr/bin/"* || true

            cat > "/tmp/flake-build/flake.nix" << NIX

{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
  };

  outputs = { self, nixpkgs }:
    let
      # Update the localFile to the actual path where the binary is located.
      localFile = ./usr;
    in
    {
      defaultPackage.$ARCH-linux =
        with import nixpkgs { system = "$ARCH-linux"; };

        stdenv.mkDerivation rec {
          name = "$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","-"); print tolower($0)}')-\${version}";

          version = "$(git -C "$BUILD" rev-parse --short HEAD)";

          # Set src to the localFile path
          src = localFile;

          sourceRoot = ".";

          nativeBuildInputs = [
            autoPatchelfHook
          ];

          installPhase = ''
            install -d "\$out/bin"
            printf '#!/bin/sh\n\nexport LD_LIBRARY_PATH=/nix/var/nix/profiles/default/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')\nexec /nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').bin \"\$@\"\n' > "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            chmod 755 "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            cp -rf "\$src/share/aseprite/"* "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')"
            install -Dm644 "\$src/lib/"* -t "\$out/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')"
            install -Dm644 "\$src/share/applications/"* -t "\$out/share/applications"
            install -Dm644 "\$src/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "\$out/share/icons/hicolor/$SRB2LNXICONSIZE/apps"
          '';
        };
    };
}
NIX

        else

            # Copy debug binary files.
            if [ -x "$(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1)" ]; then

                cp -rf $(find "$BUILD/bin" -name "*.debug" 2> /dev/null | head -n1) "/tmp/flake-build/usr/bin"

            fi

            # Setting path to interpreter.
            $SUDO patchelf --set-interpreter $(ldd "$BUILD/build/AppDir/usr/bin/"* 2>&1 | gawk '/ld-linux.*/ {print $3}') "/tmp/flake-build/usr/bin/"* || true

            cat > "/tmp/flake-build/flake.nix" << NIX

{
  inputs = {
    nixpkgs.url = "github:NixOS/nixpkgs";
  };

  outputs = { self, nixpkgs }:
    let
      # Update the localFile to the actual path where the binary is located.
      localFile = ./usr;
    in
    {
      defaultPackage.$ARCH-linux =
        with import nixpkgs { system = "$ARCH-linux"; };

        stdenv.mkDerivation rec {
          name = "$($PRINTF "%s\n" "$BUILDNAME" | gawk '{gsub(" ","-"); print tolower($0)}')-\${version}";

          version = "$(git -C "$BUILD" rev-parse --short HEAD)";

          # Set src to the localFile path
          src = localFile;

          sourceRoot = ".";

          nativeBuildInputs = [
            autoPatchelfHook
          ];
#
#          buildInputs = [
#            curlMinimal
#            SDL2_mixer
#            game-music-emu
#            libopenmpt
#            libpng
#          ];

#          autoPatchelfIgnoreMissingDeps = [
#            zfs
#          ];

          installPhase = ''
            install -d "\$out/bin"
            printf '#!/bin/sh\n\nexport LD_LIBRARY_PATH=/nix/var/nix/profiles/default/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')\nexport SRB2WADDIR=/nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')\nexport RINGRACERSWADDIR=/nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')\nexec /nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').bin \"\$@\"\n' > "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            printf '#!/bin/sh\n\nexport LD_LIBRARY_PATH=/nix/var/nix/profiles/default/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')\nexport SRB2WADDIR=/nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')\nexport RINGRACERSWADDIR=/nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')\nexec /nix/var/nix/profiles/default/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')-debug.bin \"\$@\"\n' > "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').debug"
            chmod 755 "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')"
            chmod 755 "\$out/bin/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').debug"
            install -Dm755 \$(find "\$src/bin" -type f 2> /dev/null | gawk '!/\.debug/ {print}' | head -n1) "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}').bin"
            install -Dm755 \$(find "\$src/bin" -type f -name "*.debug" 2> /dev/null | head -n1) "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')/$($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}')-debug.bin" || true
            cp -rf "\$src/games/"*/* "\$out/share/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')"
            install -Dm644 "\$src/lib/"* -t "\$out/lib/$($PRINTF "%s\n" "$SRB2ASSETLNXPATH" | gawk -F'/' '{print $NF}')"
            install -Dm644 "\$src/share/applications/"* -t "\$out/share/applications"
            install -Dm644 "\$src/share/icons/hicolor/$SRB2LNXICONSIZE/apps/"* -t "\$out/share/icons/hicolor/$SRB2LNXICONSIZE/apps"
          '';
        };
    };
}
NIX

        fi

        $SUDO nix profile install --extra-experimental-features 'nix-command flakes' "/tmp/flake-build"
        SRB2NIXPATH="$(readlink -f $(command -v $($PRINTF "%s\n" $($PRINTF "%s\n" "$SRB2BINARYLNXPATH" | gawk -F'/' '{print $NF}'))) | gawk -F'/' '{print "/nix/store/"$4}')"
        rm -rf "/tmp/flake-build"
        #               $SUDO nix-env -v -i -f "$BUILD/build/package.nix"

    fi

    installtolist

    # Refreshing menu icons.
    if [ -x "$(command -v gtk-update-icon-cache 2> /dev/null)" ]; then

        $SUDO gtk-update-icon-cache -qft "$SRB2BLDPREFIX/share/icons/hicolor"

    elif [ -x "$(find /usr/bin -name "kbuildsycoca*" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ]; then

        $SUDO "$(find /usr/bin -name "kbuildsycoca*" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" --noincremental

    fi

    # Install missing libraries and patching them to be linked against libSDL2_mixerX.
    LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BLDPREFIX/lib/libSDL2_mixer_ext.so" 2>&1 2> /dev/null | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {print $1}' | sort -u | while read -r l; do

        $SUDO patchelf --replace-needed "$l" $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib64 /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*",""); print $0"*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BLDPREFIX/lib/libSDL2_mixer_ext.so" 2> /dev/null || true

    done

    LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BLDPREFIX/lib/libSDL2_mixer_ext.so" 2>&1 2> /dev/null | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u | while read -r l; do

        $SUDO patchelf --replace-needed "$l" $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib64 /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*",""); print $0"*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BLDPREFIX/lib/libSDL2_mixer_ext.so" 2> /dev/null || true

    done

    #    # Install missing libraries and patching them to be linked against libyuv.
    #    LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BLDPREFIX/lib/libyuv.so" 2>&1 2> /dev/null | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {print $1}' | sort -u | while read -r l; do
    #
    #        $SUDO patchelf --replace-needed "$l" $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib64 /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*",""); print $0"*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BLDPREFIX/lib/libyuv.so" 2> /dev/null || true
    #
    #    done
    #
    #    LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BLDPREFIX/lib/libyuv.so" 2>&1 2> /dev/null | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u | while read -r l; do
    #
    #        $SUDO patchelf --replace-needed "$l" $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib64 /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*",""); print $0"*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BLDPREFIX/lib/libyuv.so" 2> /dev/null || true
    #
    #    done

    installdepsglibc

    if [ -n "$(ldd $SRB2BINARYLNXPATH 2>&1 2> /dev/null | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {print $1}' | head -n1)" ]; then

        # Setting path to interpreter.
        $SUDO patchelf --set-interpreter $(ldd "$SRB2BINARYLNXPATH" 2>&1 2> /dev/null | gawk '/ld-linux.*/ {print $3}') "$SRB2BINARYLNXPATH" || true

        # Patching compiled binary, in order to libraries be found.
        n=0
        while [ "$n" -lt 3 ]; do

            n=$((n + 1))

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Patching paths to dependencies for $BUILDNAME. Please wait..."

            ldd "$SRB2BINARYLNXPATH" 2>&1 2> /dev/null | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {print $1}' | sort -u | while read -r l; do

                VERSION=$($PRINTF "%s\n" "$l" | gawk 'match($0, /-[0-9]\.[0-9]|[0-9]\.[0-9]/) {gsub(".so.*|-",""); print substr($0, RSTART)}')

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

                    if [ -n "$VERSION" ] && [ ! -x "$(command -v brew 2> /dev/null)" ]; then

                        $SUDO patchelf --replace-needed "$l" $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*|-'$VERSION'.*so.*|'$VERSION'.*so.*",""); print $0"*'$VERSION'*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    else

                        $SUDO patchelf --replace-needed "$l" $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*",""); print $0"*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    fi

                else

                    if [ -n "$VERSION" ] && [ ! -x "$(command -v brew 2> /dev/null)" ]; then

                        $SUDO patchelf --replace-needed "$l" $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib64 /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*|-'$VERSION'.*so.*|'$VERSION'.*so.*",""); print $0"*'$VERSION'*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/ || /SDL2_mixer/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    else

                        $SUDO patchelf --replace-needed "$l" $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib64 /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*",""); print $0"*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/ || /SDL2_mixer/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    fi

                fi

            done

            # Additional patching, if still there are missing paths to libraries to be added to binary.
            ldd "$SRB2BINARYLNXPATH" 2>&1 2> /dev/null | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {print $1}' | sort -u | while read -r l; do

                VERSION=$($PRINTF "%s\n" "$l" | gawk 'match($0, /-[0-9]\.[0-9]|[0-9]\.[0-9]/) {gsub(".so.*|-",""); print substr($0, RSTART)}')

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

                    if [ -n "$VERSION" ] && [ ! -x "$(command -v brew 2> /dev/null)" ]; then

                        $SUDO patchelf --add-needed $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*|-'$VERSION'.*so.*|'$VERSION'.*so.*",""); print $0"*'$VERSION'*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    else

                        $SUDO patchelf --add-needed $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*",""); print $0"*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    fi

                else

                    if [ -n "$VERSION" ] && [ ! -x "$(command -v brew 2> /dev/null)" ]; then

                        $SUDO patchelf --add-needed $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib64 /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*|-'$VERSION'.*so.*|'$VERSION'.*so.*",""); print $0"*'$VERSION'*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    else

                        $SUDO patchelf --add-needed $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib64 /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*",""); print $0"*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    fi

                fi

            done

            installdepsglibc

            if [ -z "$(LD_LIBRARY_PATH=$SRB2BLDPREFIX/lib ldd "$SRB2BINARYLNXPATH" 2>&1 2> /dev/null | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {print $1}' | head -n1)" ]; then

                break

            fi

        done

        if [ -z "$(LD_LIBRARY_PATH=$SRB2BLDPREFIX/lib ldd "$SRB2BINARYLNXPATH" 2>&1 2> /dev/null | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {print $1}' | head -n1)" ]; then

            $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "Installation of $BUILDNAME's dependencies is successful."

        else

            $PRINTF "$NOTICE\n\n%s\n\e[0m" "Script couldn't install some packages for missing libraries listed below. Please install them manually on your system using package manager or compile them from source:"
            LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BINARYLNXPATH" 2>&1 2> /dev/null | gawk '/not found/ && !/GLIBC/ && !/symbol not found/ && !/\/usr\/local\/bin/ {print $1}' | sort -u
            exit

        fi

    fi

    installdepsmusl

    if [ "$LIBC" = "musl" ] && [ -n "$(ldd $SRB2BINARYLNXPATH 2>&1 | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u)" ]; then

        # Setting path to interpreter.
        $SUDO patchelf --set-interpreter $(ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk '/ld-musl.*/ {print $3}') "$SRB2BINARYLNXPATH" || true

        # Patching compiled binary, in order to libraries be found.
        n=0
        while [ "$n" -lt 3 ]; do

            n=$((n + 1))

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Patching paths to dependencies for $BUILDNAME. Please wait..."

            ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u | while read -r l; do

                VERSION=$($PRINTF "%s\n" "$l" | gawk 'match($0, /-[0-9]\.[0-9]|[0-9]\.[0-9]/) {gsub(".so.*|-",""); print substr($0, RSTART)}')

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

                    if [ -n "$VERSION" ] && [ ! -x "$(command -v brew 2> /dev/null)" ]; then

                        $SUDO patchelf --replace-needed "$l" $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*|-'$VERSION'.*so.*|'$VERSION'.*so.*",""); print $0"*'$VERSION'*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    else

                        $SUDO patchelf --replace-needed "$l" $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*",""); print $0"*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    fi

                else

                    if [ -n "$VERSION" ] && [ ! -x "$(command -v brew 2> /dev/null)" ]; then

                        $SUDO patchelf --replace-needed "$l" $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib64 /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*|-'$VERSION'.*so.*|'$VERSION'.*so.*",""); print $0"*'$VERSION'*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    else

                        $SUDO patchelf --replace-needed "$l" $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib64 /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*",""); print $0"*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    fi

                fi

            done

            # Additional patching, if still there are missing paths to libraries to be added to binary.
            ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u | while read -r l; do

                VERSION=$($PRINTF "%s\n" "$l" | gawk 'match($0, /-[0-9]\.[0-9]|[0-9]\.[0-9]/) {gsub(".so.*|-",""); print substr($0, RSTART)}')

                if [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ] || [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

                    if [ -n "$VERSION" ] && [ ! -x "$(command -v brew 2> /dev/null)" ]; then

                        $SUDO patchelf --add-needed $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*|-'$VERSION'.*so.*|'$VERSION'.*so.*",""); print $0"*'$VERSION'*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    else

                        $SUDO patchelf --add-needed $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*",""); print $0"*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    fi

                else

                    if [ -n "$VERSION" ] && [ ! -x "$(command -v brew 2> /dev/null)" ]; then

                        $SUDO patchelf --add-needed $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib64 /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*|-'$VERSION'.*so.*|'$VERSION'.*so.*",""); print $0"*'$VERSION'*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    else

                        $SUDO patchelf --add-needed $(find -L $SRB2BLDPREFIX/lib $HOME/.nix-portable/store /home/linuxbrew/.linuxbrew/lib /nix/store /usr/lib64 /usr/lib -name $($PRINTF "%s\n" "$l" | gawk '{gsub(".so.*",""); print $0"*so*"}' | head -n1) 2> /dev/null | gawk '{if (/^\/home\/'$USER'\/.nix-portable\/store|^\/home\/linuxbrew\/.linuxbrew\/lib|^\/home\/'$USER'\/.local\/lib\/|^\/var\/home\/'$USER'\/.local\/lib\/|^\/usr\/local\/lib|^\/usr\/lib\/|^\/usr\/lib64|^\/usr\/lib32/ && !/slade3/) {print;exit} else if (/[0-9]\.[0-9]\/lib|[0-9]\.[0-9][0-9]\/lib|[0-9]\.[0-9]\/wx|[0-9]\.[0-9][0-9]\/wx|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/lib|[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]\/wx|\/lib\/libz.so/ && !/libstdc\+\+[0-9]|lzfse|SDL2_.*/) {print;exit}}') "$SRB2BINARYLNXPATH" 2> /dev/null || true

                    fi

                fi

            done

            installdepsmusl

            if [ -z "$(LD_LIBRARY_PATH=$SRB2BLDPREFIX/lib ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u)" ]; then

                break

            fi

        done

        if [ -z "$(LD_LIBRARY_PATH=$SRB2BLDPREFIX/lib ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u)" ]; then

            $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "Installation of $BUILDNAME's dependencies is successful."

        else

            $PRINTF "$NOTICE\n\n%s\n\e[0m" "Script couldn't install some packages for missing libraries listed below. Please install them manually on your system using package manager or compile them from source:"
            LD_LIBRARY_PATH="$SRB2BLDPREFIX/lib:/home/linuxbrew/.linuxbrew/lib" ldd "$SRB2BINARYLNXPATH" 2>&1 | gawk -F':| ' '/No such file or directory/ && !/symbol not found/ {print $5}' | sort -u
            exit

        fi

    fi
}

installtolist() {
    # Making list of installed files.
    if [ ! -d "$SRB2BLDROOT/installed" ]; then

        mkdir -p "$SRB2BLDROOT/installed"

    fi

    if [ "$LNXOSNAME" = "NixOS" ]; then

        cat > "$SRB2BLDROOT/installed/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')" << INSTALL
$SRB2NIXPATH
$COMREVFILEPATH
---------------
$CONF
INSTALL

    else

        cat > "$SRB2BLDROOT/installed/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')" << INSTALL
$SRB2ASSETLNXPATH
$SRB2LIBRARYLNXPATH
$SRB2BINARYLNXPATH
$SRB2BINARYDEBUGLNXPATH
$SRB2DESKTOPLNXPATH
$SRB2DESKTOPOPENGLLNXPATH
$SRB2DESKTOPOPENVRLNXPATH
$SRB2ICONLNXPATH
$SRB2WINPATH
$SRB2WINMENUPATH
$SRB2MACPATH
$SRB2MACLINK
$COMREVFILEPATH
---------------
$CONF
INSTALL

    fi

    gawk -i inplace 'NF{print}' "$SRB2BLDROOT/installed/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')"

    COMREV=$(git -C "$BUILD" rev-parse --short HEAD)
    $PRINTF "$COMREV\n$GITVERCONF" > "$BUILD/.comrev"

    if [ "$LNXOSNAME" = "NixOS" ]; then

        SRB2PATH="$SRB2NIXPATH"

    elif [ -n "$SRB2BINARYLNXPATH" ]; then

        SRB2PATH="$SRB2BINARYLNXPATH"

    elif [ -n "$SRB2MACPATH" ]; then

        SRB2PATH="$SRB2MACPATH and $SRB2MACLINK"

    elif [ -n "$SRB2WINPATH" ]; then

        SRB2PATH="$SRB2WINPATH"

    fi

    $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "Installation of $BUILDNAME is successful and is located at \"$SRB2PATH\" path."
}

installtomacos() {
    # Exporting environment variables for compiling, installing game and libraries on macOS.
    export MACOSX_DEPLOYMENT_TARGET="$MACOSVER"
    export SDKROOT="$SDKROOT"
    export PATH="$SRB2BLDROOT/libraries/depot_tools:$MACPORTPREFIX/bin:$HOMEBREWPREFIX/bin:$PATH"
    export LIBRARY_PATH="$SRB2BLDPREFIX/lib:$MACPORTPREFIX/lib:$HOMEBREWPREFIX/lib:$LIBRARY_PATH"
    export C_INCLUDE_PATH="$SRB2BLDPREFIX/include:$MACPORTPREFIX/include:$HOMEBREWPREFIX/include:$C_INCLUDE_PATH"
    export CPLUS_INCLUDE_PATH="$C_INCLUDE_PATH"
    export PKG_CONFIG_PATH="$SRB2BLDPREFIX/lib/pkgconfig:$MACPORTPREFIX/lib/pkgconfig:$HOMEBREWPREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
    export STOW_DIR="$SRB2BLDPREFIX/stow"
    export VCPKG_ROOT="$SRB2BLDROOT/libraries/vcpkg"

    # Have commit revision as part of name for App Bundle.
    COMREV=$(git -C "$BUILD" rev-parse --short HEAD)

    # Change prefix depending on, if library is in $HOMEBREWPREFIX/lib or $MACPORTPREFIX/lib or $SRB2BLDPREFIX/lib.
    if [ -f "$HOMEBREWPREFIX/lib/libSDL2.dylib" ]; then

        LIBSDL2PREFIX="$HOMEBREWPREFIX"

    elif [ -f "$MACPORTPREFIX/lib/libSDL2.dylib" ]; then

        LIBSDL2PREFIX="$MACPORTPREFIX"

    else

        LIBSDL2PREFIX="$SRB2BLDPREFIX"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libSDL2_mixer.dylib" ]; then

        LIBSDL2MIXERPREFIX="$HOMEBREWPREFIX"

    elif [ -f "$MACPORTPREFIX/lib/libSDL2_mixer.dylib" ]; then

        LIBSDL2MIXERPREFIX="$MACPORTPREFIX"

    else

        LIBSDL2MIXERPREFIX="$SRB2BLDPREFIX"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libgme.dylib" ]; then

        LIBGMEPREFIX="$HOMEBREWPREFIX"

    elif [ -f "$MACPORTPREFIX/lib/libgme.dylib" ]; then

        LIBGMEPREFIX="$MACPORTPREFIX"

    else

        LIBGMEPREFIX="$SRB2BLDPREFIX"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libopenmpt.dylib" ]; then

        LIBOPENMPTPREFIX="$HOMEBREWPREFIX"

    elif [ -f "$MACPORTPREFIX/lib/libopenmpt.dylib" ]; then

        LIBOPENMPTPREFIX="$MACPORTPREFIX"

    else

        LIBOPENMPTPREFIX="$SRB2BLDPREFIX"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libpng.dylib" ]; then

        LIBPNGPREFIX="$HOMEBREWPREFIX"

    elif [ -f "$MACPORTPREFIX/lib/libpng.dylib" ]; then

        LIBPNGPREFIX="$MACPORTPREFIX"

    else

        LIBPNGPREFIX="$SRB2BLDPREFIX"

    fi

    if [ -f "$HOMEBREWPREFIX/lib/libmpg123.dylib" ]; then

        LIBMPG123PREFIX="$HOMEBREWPREFIX"

    elif [ -f "$MACPORTPREFIX/lib/libmpg123.dylib" ]; then

        LIBMPG123PREFIX="$MACPORTPREFIX"

    else

        LIBMPG123PREFIX="$SRB2BLDPREFIX"

    fi

    # Upgrade build. Making sure, that there are only used compilation flags.
    if [ -n "$UPGRADEBUILD" ] && [ -z "$CUSTOMDIR" ]; then

        export CONF="$(gawk '/---------------/ {gsub("---------------","");getline; print}' "$SRB2BLDROOT/installed/$UPGRADEBUILD")"

    elif [ -n "$UPGRADEBUILD" ] && [ -n "$CUSTOMDIR" ]; then

        export CONF="$(gawk '/---------------/ {gsub("---------------","");getline; print}' "$SRB2BLDROOT/installed/$CUSTOMDIR")"

    # Otherwise set compilation flags, build and install as usual.
    else

        # Warning for MacOS users.
        $PRINTF "$NOTICE\n%s\n\e[0m" "WARNING for macOS users! This script makes changes from rpath to absolute paths within some libraries installed from Homebrew, MacPorts or compiled (mostly should affects libraries compiled by user), that are associated with SRB2 binary, so installing or making App Bundles would be successful. In the future this could make unexpected results with apps or SRB2 builds, that depend on those libraries. Possible changes that would be applied. Save those below commands to text file and revert those changes after process:

        sudo ln -sf /Library/Developer/CommandLineTools/usr/lib/clang/*/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib $SRB2BLDPREFIX/lib/libclang_rt.ubsan_osx_dynamic.dylib
        sudo install_name_tool -change "@rpath/libclang_rt.ubsan_osx_dynamic.dylib" "$SRB2BLDPREFIX/lib/libclang_rt.ubsan_osx_dynamic.dylib" $SRB2BLDPREFIX/lib/libgme.dylib

        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$SRB2BLDPREFIX/lib/libbrotlicommon.dylib" $SRB2BLDPREFIX/lib/libbrotlidec.dylib
        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$SRB2BLDPREFIX/lib/libbrotlicommon.dylib" $SRB2BLDPREFIX/lib/libbrotlienc.dylib

        sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$SRB2BLDPREFIX/lib/libSDL2.dylib" $SRB2BLDPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libSDL2-2.0.dylib" "$SRB2BLDPREFIX/lib/libSDL2.dylib" $SRB2BLDPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libmodplug.dylib" "$SRB2BLDPREFIX/lib/libmodplug.dylib" $SRB2BLDPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libmodplug.dylib" "$SRB2BLDPREFIX/lib/libmodplug.dylib" $SRB2BLDPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" $HOMEBREWPREFIX/lib/libbrotlidec.dylib
        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" $HOMEBREWPREFIX/lib/libbrotlienc.dylib

        sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$MACPORTPREFIX/lib/libbrotlicommon.dylib" $MACPORTPREFIX/lib/libbrotlidec.dylib
        sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$MACPORTPREFIX/lib/libbrotlicommon.dylib" $MACPORTPREFIX/lib/libbrotlienc.dylib

        sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib

        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbis.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbisfile.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libopenmpt.dylib
        sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib

Press y/yes to continue, or n/no or ctrl+c to quit."

        $PRINTF "$PROMPT\n%s\e[0m" "> "
        read -r CONFIRM

        if [ "$CONFIRM" = y ] || [ "$CONFIRM" = Y ] || [ "$CONFIRM" = yes ] || [ "$CONFIRM" = Yes ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Preparing and displaying $BUILDNAME's configure options for compilation. Please wait..."

            # Display content of Makefile for a good view of available compilation flags.
            if [ "$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print $2}' "$BUILD/src/doomdef.h" 2> /dev/null)" = "RingRacers" ]; then

                BLDCMD="cmake -S $BUILD -B $BUILD/build --preset ninja-x64_osx_vcpkg-release -DVCPKG_TARGET_TRIPLET=x64-osx -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++ -DCMAKE_OSX_SYSROOT=$SDKROOT -DCMAKE_OSX_DEPLOYMENT_TARGET=$MACOSVERSLADE -DCMAKE_BUILD_TYPE=Release -DCPACK_PACKAGE_DESCRIPTION_SUMMARY=\"$BUILDNAME\" -DCPACK_PACKAGE_FILE_NAME=\"$BUILDNAME\" -DSRB2_SDL2_EXE_NAME=\"$BUILDNAME\" -DCPACK_PACKAGE_VENDOR=srb2bld -DSRB2_CONFIG_ASSET_DIRECTORY=$BUILD/assets/installer -DSRB2_CPACK_GENERATOR=DragNDrop -DCMAKE_INSTALL_PREFIX=$SRB2BLDPREFIX -DSRB2_CONFIG_ENABLE_WEBM_MOVIES=ON -G 'Unix Makefiles'"
                eval $BLDCMD -LAH 2>&1 | gawk '{if(f)print} /-- Cache values/{f=1}' 2> /dev/null

            elif [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

                cat "$BUILD/README.md"
                BLDCMD="make -k -j$NCPU -C $BUILD"

            elif [ "$BUILD" = "$BUILDPATH/kartmaker" ] || [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ] || [ "$BUILD" = "$BUILDPATH/followermaker" ]; then

                BLDCMD="$BUILD/build.sh"

            elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

                BLDCMD="cmake -S $BUILD -B $BUILD/build -DwxWidgets_CONFIG_EXECUTABLE=$(command -v $MACPORTPREFIX/Library/Frameworks/wxWidgets.framework/Versions/wxWidgets/*/bin/wx-config wx-config wx-config-gtk3 2> /dev/null | head -n1) -DCMAKE_OSX_SYSROOT=$SDKROOT -DCMAKE_OSX_DEPLOYMENT_TARGET=$MACOSVERSLADE -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$SRB2BLDPREFIX -DMPG123_INCLUDE_DIR=$LIBMPG123PREFIX/include -DMPG123_LIBRARIES=$LIBMPG123PREFIX/lib/libmpg123.dylib"
                eval $BLDCMD -LAH 2>&1 | gawk '{if(f)print} /-- Cache values/{f=1}' 2> /dev/null

            elif [ "$BUILD" = "$BUILDPATH/aseprite" ]; then

                BLDCMD="cmake -S $BUILD -B $BUILD/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES=$ARCH -DCMAKE_OSX_DEPLOYMENT_TARGET=$MACOSVER -DCMAKE_OSX_SYSROOT=$SDKROOT -DBUILD_TESTING=OFF -DCLIP_TESTS=OFF -DCMARK_TESTS=OFF -DENABLE_TEST=OFF -DENABLE_TESTS=OFF -DFMT_CUDA_TEST=OFF -DFMT_TEST=OFF -DJSON11_BUILD_TESTS=OFF -DLAF_WITH_TESTS=OFF -DOBSERVABLE_TESTS=OFF -DPNG_TESTS=OFF -DUNDO_TESTS=OFF -Dtinyxml2_BUILD_TESTING=OFF -DLAF_BACKEND=skia -DSKIA_DIR=$SRB2BLDROOT/libraries/libskia -DSKIA_LIBRARY_DIR=$SRB2BLDROOT/libraries/libskia/out/Release-x64 -DSKIA_LIBRARY=$SRB2BLDROOT/libraries/libskia/out/Release-x64/libskia.a -G Ninja"
                eval $BLDCMD -LAH 2>&1 | gawk '{if(f)print} /-- Cache values/{f=1}' 2> /dev/null

            else

                BLDCMD="cmake -S $BUILD -B $BUILD/build -DCMAKE_OSX_SYSROOT=$SDKROOT -DCMAKE_OSX_DEPLOYMENT_TARGET=$MACOSVER -DCMAKE_BUILD_TYPE=Release -DCPACK_PACKAGE_DESCRIPTION_SUMMARY=\"$BUILDNAME\" -DCPACK_PACKAGE_FILE_NAME=\"$BUILDNAME\" -DSRB2_SDL2_EXE_NAME=\"$BUILDNAME\" -DCPACK_PACKAGE_VENDOR=srb2bld -DSRB2_CONFIG_ASSET_DIRECTORY=$BUILD/assets/installer -DSRB2_CONFIG_SHARED_INTERNAL_LIBRARIES=ON -DSRB2_CONFIG_SYSTEM_LIBRARIES=ON -DSRB2_CPACK_GENERATOR=DragNDrop -DCMAKE_INSTALL_PREFIX=$SRB2BLDPREFIX -DCMAKE_EXE_LINKER_FLAGS_RELEASE=-headerpad_max_install_names -DCMAKE_MODULE_LINKER_FLAGS_RELEASE=-headerpad_max_install_names -DCMAKE_SHARED_LINKER_FLAGS_RELEASE=-headerpad_max_install_names -DSDL2_INCLUDE_DIR=$LIBSDL2PREFIX/include/SDL2 -DSDL2_LIBRARY=$LIBSDL2PREFIX/lib/libSDL2.dylib -DSDL2_MIXER_INCLUDE_DIR=$LIBSDL2MIXERPREFIX/include/SDL2 -DSDL2_MIXER_LIBRARY=$LIBSDL2MIXERPREFIX/lib/libSDL2_mixer.dylib -DGME_INCLUDE_DIR=$LIBGMEPREFIX/include/gme -DGME_LIBRARY=$LIBGMEPREFIX/lib/libgme.dylib -DOPENMPT_INCLUDE_DIR=$LIBOPENMPTPREFIX/include/libopenmpt -DOPENMPT_LIBRARY=$LIBOPENMPTPREFIX/lib/libopenmpt.dylib -DPNG_PNG_INCLUDE_DIR=$LIBPNGPREFIX/include -DPNG_LIBRARY=$LIBPNGPREFIX/lib/libpng.dylib -DCMAKE_SKIP_RPATH=ON -DCMAKE_SKIP_INSTALL_RPATH=ON"
                eval $BLDCMD -LAH 2>&1 | gawk '{if(f)print} /-- Cache values/{f=1}' 2> /dev/null

            fi

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please enter $BUILDNAME's space separated compilation flags and then press enter, or just press enter to begin compiling. Default command and flags for compilation:"
            $PRINTF "$NOTICE%s\n\e[0m" "$BLDCMD [YOUR-COMPILATION-FLAGS-WILL-BE-HERE]"

            # Add compilation flags.
            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r CONF

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "Exiting shell script."
            exit

        fi

        # Some checks, if the build's certain compilation flags were entered.
        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_PNG=OFF/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_PNG:BOOL=OFF/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISPNG=

        else

            ISPNG=libpng

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_GME=OFF/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_GME:BOOL=OFF/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISGME=

        else

            ISGME=libgme

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_OPENMPT=OFF/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_OPENMPT:BOOL=OFF/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISOPENMPT=

        else

            ISOPENMPT=libopenmpt

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_SDL2_USEMIXER=OFF/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_SDL2_USEMIXER:BOOL=OFF/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISSDL2MIXER=

        else

            ISSDL2MIXER=libsdl2_mixer

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_MIXERX=ON/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_MIXERX:BOOL=ON/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISSDL2MIXERX=libsdl2_mixerx

        else

            ISSDL2MIXERX=

        fi

        if [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_DISCORDRPC=ON/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$CONF" | gawk 'match($0, /SRB2_CONFIG_HAVE_DISCORDRPC:BOOL=ON/) {print substr($0, RSTART, RLENGTH)}')" ]; then

            ISDISCORDRPC=libdiscord-rpc

        else

            ISDISCORDRPC=

        fi

    fi

    # Download and extract assets.
    if [ -z "$(find "$BUILD/build/assets/installer/"* -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ] && ([ "$BUILD" != "$BUILDPATH/wadcli" ] && [ "$BUILD" != "$BUILDPATH/kartmaker" ] && [ "$BUILD" != "$BUILDPATH/kartmaker-ring-racers" ] && [ "$BUILD" != "$BUILDPATH/followermaker" ] && [ "$BUILD" != "$BUILDPATH/slade" ] && [ "$BUILD" != "$BUILDPATH/ultimatezonebuilder" ] && [ "$BUILD" != "$BUILDPATH/highvoltagering" ] && [ "$BUILD" != "$BUILDPATH/aseprite" ]); then

        if [ -n "$ISNET" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading and extracting $BUILDNAME's assets. Please wait..."

        else

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Extracting $BUILDNAME's assets. Please wait..."

        fi

        if [ "$GITVER" != "$GITDEFVER" ] || [ "$(dirname $BUILD)" = "$BUILDPATH/srb2-custom" ]; then

            extractmacoscustomassets

        else

            extractmacosassets

        fi

    fi

    $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing missing dependencies. Please wait..."
    sudo_ping

    # Fixing permission conflicts between compiled libraries and installed from package manager.
    if [ "$(stat -f %u $SRB2BLDPREFIX/stow 2> /dev/null)" = "0" ]; then

        sudo chown -R "$USER" $SRB2BLDPREFIX/stow

    fi

    if [ "$BUILD" = "$BUILDPATH/ring-racers" ] || [ "$BUILD" = "$BUILDPATH/ring-racers-noire" ]; then

        # Download vcpkg's source code, build and install it.
        if [ ! -d "$SRB2BLDROOT/libraries/vcpkg/.git" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading vcpkg's source code. Please wait..."
            git clone $GITOPTS https://github.com/microsoft/vcpkg.git --recursive --branch "$MACOSVCPKGVER" "$SRB2BLDROOT/libraries/vcpkg"
            git config --global --add safe.directory "$SRB2BLDROOT/libraries/vcpkg"

        else

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up vcpkg's source code. Please wait..."

            if [ -n "$ISNET" ]; then

                git config --global --add safe.directory "$SRB2BLDROOT/libraries/vcpkg"
                git -C "$SRB2BLDROOT/libraries/vcpkg" clean -dffx
                git -C "$SRB2BLDROOT/libraries/vcpkg" reset --hard
                git -C "$SRB2BLDROOT/libraries/vcpkg" pull --recurse-submodules --rebase --autostash

            fi

        fi

        "$SRB2BLDROOT/libraries/vcpkg/bootstrap-vcpkg.sh" -disableMetrics

    elif [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

        # Download liblzf's source code, build and install it.
        if [ ! -d "$SRB2BLDROOT/libraries/liblzf/.git" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading liblzf's source code. Please wait..."
            git clone $GITOPTS https://salsa.debian.org/debian/liblzf.git --recursive --branch "$MACOSLZFVER" "$SRB2BLDROOT/libraries/liblzf"

        else

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up liblzf's source code. Please wait..."
            git config --global --add safe.directory "$SRB2BLDROOT/libraries/liblzf"
            git -C "$SRB2BLDROOT/libraries/liblzf" clean -qdffx -e .comrev
            git -C "$SRB2BLDROOT/libraries/liblzf" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/liblzf" checkout -q master

            if [ -n "$ISNET" ]; then

                git -C "$SRB2BLDROOT/libraries/liblzf" pull --recurse-submodules --rebase --autostash

            fi

            git -C "$SRB2BLDROOT/libraries/liblzf" checkout -q "$MACOSLZFVER"

        fi

        if [ ! -f $SRB2BLDPREFIX/lib/liblzf.a ] || ([ -n "$(cat "$SRB2BLDROOT/libraries/liblzf/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/liblzf" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/liblzf/.comrev" 2> /dev/null)" ]); then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing liblzf. Please wait..."
            cd "$SRB2BLDROOT/libraries/liblzf" || exit
            cp -rf "$SRB2BLDROOT/libraries/liblzf/debian/extras/"* "$SRB2BLDROOT/libraries/liblzf"
            patch -Np1 -i "$SRB2BLDROOT/libraries/liblzf/debian/patches/"*.patch
            CC="/usr/bin/gcc" CXX="/usr/bin/g++" "$SRB2BLDROOT/libraries/liblzf/configure" --prefix="$SRB2BLDPREFIX/stow/liblzf" --includedir="$SRB2BLDPREFIX/stow/liblzf/include/liblzf"
            make -k -j"$NCPU" -C "$SRB2BLDROOT/libraries/liblzf"
            sudo make -C "$SRB2BLDROOT/libraries/liblzf" install
            sudo -E stow -v --adopt liblzf

            git -C "$SRB2BLDROOT/libraries/liblzf" clean -qdffx -e .comrev
            git -C "$SRB2BLDROOT/libraries/liblzf" reset -q --hard

            COMREV=$(git -C "$SRB2BLDROOT/libraries/liblzf" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/liblzf/.comrev"
            cd "$BUILD" || exit

        fi

    elif [ "$BUILD" = "$BUILDPATH/kartmaker" ] || [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ] || [ "$BUILD" = "$BUILDPATH/followermaker" ]; then

        $PRINTF "$NOTICE%s\n\e[0m" "No dependencies to install for kartmaker/followermaker."

    elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

        # Install package using port command, if detected.
        if [ -n "$(command -v port 2> /dev/null)" ]; then

            sudo port -Nfcb install ftgl glew fluidsynth gtk3 freeimage sfml libmodplug $(port -q search wxwidgets-[0-9] | tail -n1) lua

        else

            brew install -f ftgl glew fluid-synth gtk+ freeimage sfml libmodplug wxwidgets lua

        fi

    elif [ "$BUILD" = "$BUILDPATH/aseprite" ]; then

        # Install package using port command, if detected.
        if [ -n "$(command -v port 2> /dev/null)" ]; then

            sudo port -Nfcb install python3 ninja

        else

            brew install -f python3 ninja

        fi

        # Unset environment variables for conflicting libraries and header files.
        unset LIBRARY_PATH C_INCLUDE_PATH CPLUS_INCLUDE_PATH PKG_CONFIG_PATH

        # Download Google Depot Tools' source code, build and install it.
        if [ ! -d "$SRB2BLDROOT/libraries/depot_tools/.git" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading Google Depot Tools' source code. Please wait..."
            git clone $GITOPTS https://chromium.googlesource.com/chromium/tools/depot_tools.git --recursive --branch "$MACOSDEPOTTOOLSVER" "$SRB2BLDROOT/libraries/depot_tools"

        else

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up Google Depot Tools' source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/depot_tools" clean -qdffx -e .comrev
            git -C "$SRB2BLDROOT/libraries/depot_tools" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/depot_tools" checkout -q main

            if [ -n "$ISNET" ]; then

                git -C "$SRB2BLDROOT/libraries/depot_tools" pull --recurse-submodules --rebase --autostash

            fi

            git -C "$SRB2BLDROOT/libraries/depot_tools" checkout -q "$MACOSDEPOTTOOLSVER"

        fi

        if [ -n "$(cat "$SRB2BLDROOT/libraries/depot_tools/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/depot_tools" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/depot_tools/.comrev" 2> /dev/null)" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing depot_tools. Please wait..."

            git -C "$SRB2BLDROOT/libraries/depot_tools" clean -qdffx -e .comrev
            git -C "$SRB2BLDROOT/libraries/depot_tools" reset -q --hard

            COMREV=$(git -C "$SRB2BLDROOT/libraries/depot_tools" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/depot_tools/.comrev"

        fi

        # Download libskia's source code, build and install it.
        if [ ! -d "$SRB2BLDROOT/libraries/libskia/.git" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libskia's source code. Please wait..."
            git clone $GITOPTS https://github.com/aseprite/skia.git --recursive --branch "$MACOSSKIAVER" "$SRB2BLDROOT/libraries/libskia"

        else

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libskia's source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libskia" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/libskia" checkout -q master

            if [ -n "$ISNET" ]; then

                git -C "$SRB2BLDROOT/libraries/libskia" pull --recurse-submodules --rebase --autostash

            fi

            git -C "$SRB2BLDROOT/libraries/libskia" checkout -q "$MACOSSKIAVER"

        fi

        if ([ ! -f "$SRB2BLDROOT/libraries/libskia/out/Release-x64/libskia.a" ] && [ ! -f "$HOMEBREWPREFIX/lib/libskia.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libskia.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libskia/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libskia" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libskia/.comrev" 2> /dev/null)" ]); then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libskia. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libskia" clean -qdffx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libskia" reset -q --hard

            cd "$SRB2BLDROOT/libraries/libskia" || exit
            python3 "$SRB2BLDROOT/libraries/libskia/tools/git-sync-deps"
            $SRB2BLDROOT/libraries/depot_tools/gn gen "$SRB2BLDROOT/libraries/libskia/out/Release-x64" --args="is_debug=false is_official_build=true skia_use_system_expat=false skia_use_system_icu=false skia_use_system_libjpeg_turbo=false skia_use_system_libpng=false skia_use_system_libwebp=false skia_use_system_zlib=false skia_use_sfntly=false skia_use_freetype=true skia_use_harfbuzz=true skia_pdf_subset_harfbuzz=true skia_use_system_freetype2=false skia_use_system_harfbuzz=false target_cpu=\"x64\" extra_cflags=[\"-stdlib=libc++\", \"-mmacosx-version-min=10.9\"] extra_cflags_cc=[\"-frtti\"]"
            ninja -C "$SRB2BLDROOT/libraries/libskia/out/Release-x64" skia modules -k0 -j"$NCPU"

            COMREV=$(git -C "$SRB2BLDROOT/libraries/libskia" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libskia/.comrev"

        fi

    else

        # Download libpng's source code, build and install it.
        if [ "$ISPNG" = "libpng" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libpng/.git" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libpng's source code. Please wait..."
                git clone $GITOPTS git://git.code.sf.net/p/libpng/code.git --recursive --branch "v$MACOSPNGVER" "$SRB2BLDROOT/libraries/libpng"

            else

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libpng's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libpng" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libpng" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libpng" checkout -q master

                if [ -n "$ISNET" ]; then

                    git -C "$SRB2BLDROOT/libraries/libpng" pull --recurse-submodules --rebase --autostash

                fi

                git -C "$SRB2BLDROOT/libraries/libpng" checkout -q "v$MACOSPNGVER"

            fi

            if ([ ! -f "$SRB2BLDPREFIX/lib/libpng.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libpng.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libpng.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libpng/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libpng" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libpng/.comrev" 2> /dev/null)" ]); then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libpng. Please wait..."
                #                cmake -S "$SRB2BLDROOT/libraries/libpng" -B "$SRB2BLDROOT/libraries/libpng/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$SRB2BLDPREFIX/stow/libpng -DCMAKE_MACOSX_RPATH=OFF
                #                cmake --build "$SRB2BLDROOT/libraries/libpng/build" -j"$NCPU" --config Release
                #                sudo -E cmake --install "$SRB2BLDROOT/libraries/libpng/build"
                cd "$SRB2BLDROOT/libraries/libpng" || exit
                ./configure --prefix=$SRB2BLDPREFIX/stow/libpng
                make -k -j"$NCPU"
                sudo -E make install
                sudo -E stow -v --adopt libpng

                git -C "$SRB2BLDROOT/libraries/libpng" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libpng" reset -q --hard

                COMREV=$(git -C "$SRB2BLDROOT/libraries/libpng" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libpng/.comrev"

            fi

        fi

        # Download libogg's source code, build and install it.
        if [ "$ISOPENMPT" = "libopenmpt" ] || [ "$ISSDL2MIXER" = "libsdl2_mixer" ] || [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libogg/.git" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libogg's source code. Please wait..."
                git clone $GITOPTS https://gitlab.xiph.org/xiph/ogg.git --recursive --branch "v$MACOSOGGVER" "$SRB2BLDROOT/libraries/libogg"

            else

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libogg's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libogg" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libogg" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libogg" checkout -q master

                if [ -n "$ISNET" ]; then

                    git -C "$SRB2BLDROOT/libraries/libogg" pull --recurse-submodules --rebase --autostash

                fi

                git -C "$SRB2BLDROOT/libraries/libogg" checkout -q "v$MACOSOGGVER"

            fi

            if ([ ! -f "$SRB2BLDPREFIX/lib/libogg.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libogg.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libogg.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libogg/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libogg" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libogg/.comrev" 2> /dev/null)" ]); then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libogg. Please wait..."
                mkdir -p "$SRB2BLDROOT/libraries/libogg/build"
                cmake -S "$SRB2BLDROOT/libraries/libogg" -B "$SRB2BLDROOT/libraries/libogg/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=true -DCMAKE_INSTALL_PREFIX=$SRB2BLDPREFIX/stow/libogg -DCMAKE_MACOSX_RPATH=OFF
                cmake --build "$SRB2BLDROOT/libraries/libogg/build" -j"$NCPU" --config Release
                sudo -E cmake --install "$SRB2BLDROOT/libraries/libogg/build"
                sudo -E stow -v --adopt libogg

                git -C "$SRB2BLDROOT/libraries/libogg" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libogg" reset -q --hard

                COMREV=$(git -C "$SRB2BLDROOT/libraries/libogg" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libogg/.comrev"

            fi

        fi

        # Download libvorbis' source code, build and install it.
        if [ "$ISOPENMPT" = "libopenmpt" ] || [ "$ISSDL2MIXER" = "libsdl2_mixer" ] || [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libvorbis/.git" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libvorbis' source code. Please wait..."
                git clone $GITOPTS https://gitlab.xiph.org/xiph/vorbis.git --recursive --branch "v$MACOSVORBISVER" "$SRB2BLDROOT/libraries/libvorbis"

            else

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libvorbis' source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libvorbis" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libvorbis" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libvorbis" checkout -q master

                if [ -n "$ISNET" ]; then

                    git -C "$SRB2BLDROOT/libraries/libvorbis" pull --recurse-submodules --rebase --autostash

                fi

                git -C "$SRB2BLDROOT/libraries/libvorbis" checkout -q "v$MACOSVORBISVER"

            fi

            if ([ ! -f "$SRB2BLDPREFIX/lib/libvorbis.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libvorbis.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libvorbis.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libvorbis/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libvorbis" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libvorbis/.comrev" 2> /dev/null)" ]); then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libvorbis. Please wait..."
                cd "$SRB2BLDROOT/libraries/libvorbis" || exit
                gawk -i inplace '{gsub("-force_cpusubtype_ALL",""); print}' "$SRB2BLDROOT/libraries/libvorbis/configure.ac"
                ./autogen.sh
                ./configure --prefix=$SRB2BLDPREFIX/stow/libvorbis
                make -k -j"$NCPU"
                sudo -E make install
                sudo -E stow -v --adopt libvorbis

                git -C "$SRB2BLDROOT/libraries/libvorbis" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libvorbis" reset -q --hard

                COMREV=$(git -C "$SRB2BLDROOT/libraries/libvorbis" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libvorbis/.comrev"
                cd "$BUILD" || exit

            fi

        fi

        # Download libmpg123's source code, build and install it.
        if [ "$ISOPENMPT" = "libopenmpt" ] || [ "$ISSDL2MIXER" = "libsdl2_mixer" ] || [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libmpg123/.git" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libmpg123's source code. Please wait..."
                git clone $GITOPTS https://github.com/madebr/mpg123.git --recursive --branch "$MACOSMPG123VER" "$SRB2BLDROOT/libraries/libmpg123"

            else

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libmpg123's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libmpg123" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libmpg123" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libmpg123" checkout -q master

                if [ -n "$ISNET" ]; then

                    git -C "$SRB2BLDROOT/libraries/libmpg123" pull --recurse-submodules --rebase --autostash

                fi

                #                git -C "$SRB2BLDROOT/libraries/libmpg123" checkout -q c81472cffd430e27e
                git -C "$SRB2BLDROOT/libraries/libmpg123" checkout -q "$MACOSMPG123VER"

            fi

            if ([ ! -f "$SRB2BLDPREFIX/lib/libmpg123.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libmpg123.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libmpg123.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libmpg123/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libmpg123" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libmpg123/.comrev" 2> /dev/null)" ]); then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libmpg123. Please wait..."
                cd "$SRB2BLDROOT/libraries/libmpg123" || exit
                autoreconf -iv
                ./configure --prefix=$SRB2BLDPREFIX/stow/libmpg123
                make -k -j"$NCPU"
                sudo -E make install
                sudo -E stow -v --adopt libmpg123

                git -C "$SRB2BLDROOT/libraries/libmpg123" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libmpg123" reset -q --hard

                COMREV=$(git -C "$SRB2BLDROOT/libraries/libmpg123" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libmpg123/.comrev"
                cd "$BUILD" || exit

            fi

        fi

        # Download libSDL2's source code, build and install it.
        if [ ! -d "$SRB2BLDROOT/libraries/libsdl2/.git" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libSDL2's source code. Please wait..."
            git clone $GITOPTS https://github.com/libsdl-org/SDL.git --recursive --branch "$MACOSSDL2VER" "$SRB2BLDROOT/libraries/libsdl2"

        else

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libSDL2's source code. Please wait..."
            git -C "$SRB2BLDROOT/libraries/libsdl2" clean -qdffx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libsdl2" reset -q --hard
            git -C "$SRB2BLDROOT/libraries/libsdl2" checkout -q main

            if [ -n "$ISNET" ]; then

                git -C "$SRB2BLDROOT/libraries/libsdl2" pull --recurse-submodules --rebase --autostash

            fi

            git -C "$SRB2BLDROOT/libraries/libsdl2" checkout -q "$MACOSSDL2VER"

        fi

        if ([ ! -f "$SRB2BLDPREFIX/lib/libSDL2.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libSDL2.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libSDL2.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libsdl2/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libsdl2" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libsdl2/.comrev" 2> /dev/null)" ]); then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libSDL2. Please wait..."
            #            mkdir -p "$SRB2BLDROOT/libraries/libsdl2/build"
            #            cmake -S "$SRB2BLDROOT/libraries/libsdl2" -B "$SRB2BLDROOT/libraries/libsdl2/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DSDL_HIDAPI_JOYSTICK=ON -DCMAKE_INSTALL_PREFIX=$SRB2BLDPREFIX/stow/libsdl2 -DCMAKE_MACOSX_RPATH=OFF
            #            cmake --build "$SRB2BLDROOT/libraries/libsdl2/build" -j"$NCPU" --config Release
            #            sudo -E cmake --install "$SRB2BLDROOT/libraries/libsdl2/build"
            cd "$SRB2BLDROOT/libraries/libsdl2" || exit
            ./configure --prefix=$SRB2BLDPREFIX/stow/libsdl2 --enable-rpath=no
            make -k -j"$NCPU"
            sudo -E make install
            sudo -E stow -v --adopt libsdl2

            git -C "$SRB2BLDROOT/libraries/libsdl2" clean -qdffx -e .comrev
            git -C "$SRB2BLDROOT/libraries/libsdl2" reset -q --hard

            COMREV=$(git -C "$SRB2BLDROOT/libraries/libsdl2" rev-parse --short HEAD)
            $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libsdl2/.comrev"

        fi

        # Download libopenmpt's source code, build and install it.
        if [ "$ISOPENMPT" = "libopenmpt" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libopenmpt/.git" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libopenmpt's source code. Please wait..."
                git clone $GITOPTS https://github.com/OpenMPT/openmpt.git --recursive --branch "libopenmpt-$MACOSOPENMPTVER" "$SRB2BLDROOT/libraries/libopenmpt"

            else

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libopenmpt's source code. Please wait..."
                sudo -E git -C "$SRB2BLDROOT/libraries/libopenmpt" clean -qdffx -e .comrev
                sudo -E git -C "$SRB2BLDROOT/libraries/libopenmpt" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libopenmpt" checkout -q master

                if [ -n "$ISNET" ]; then

                    git -C "$SRB2BLDROOT/libraries/libopenmpt" pull --recurse-submodules --rebase --autostash

                fi

                git -C "$SRB2BLDROOT/libraries/libopenmpt" checkout -q "libopenmpt-$MACOSOPENMPTVER"

            fi

            if ([ ! -f "$SRB2BLDPREFIX/lib/libopenmpt.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libopenmpt.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libopenmpt.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libopenmpt/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libopenmpt" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libopenmpt/.comrev" 2> /dev/null)" ]); then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libopenmpt. Please wait..."
                cd "$SRB2BLDROOT/libraries/libopenmpt" || exit
                sudo mkdir -p "$SRB2BLDPREFIX/stow/libopenmpt/lib"
                gawk -i inplace '{gsub("DYNLINK=1","DYNLINK=0"); gsub("TEST=1","TEST=0"); gsub("SOSUFFIX=.so","SOSUFFIX=.dylib"); gsub("STATIC_LIB=1","STATIC_LIB=0"); gsub("EXAMPLES=1","EXAMPLES=0"); gsub("OPENMPT123=1","OPENMPT123=0"); print}' "$SRB2BLDROOT/libraries/libopenmpt/Makefile"
                gawk -i inplace '{gsub("\\$\\(INSTALL_DATA\\) bin/libopenmpt.pc \\$\\(DESTDIR\\)\\$\\(PREFIX\\)/lib/pkgconfig/libopenmpt.pc|\\$\\(INSTALL_LIB\\) bin/\\$\\(LIBOPENMPT_SONAME\\) \\$\\(DESTDIR\\)\\$\\(PREFIX\\)/lib/\\$\\(LIBOPENMPT_SONAME\\)|\\$\\(INSTALL_LIB\\) bin/libopenmpt\\$\\(SOSUFFIX\\) \\$\\(DESTDIR\\)\\$\\(PREFIX\\)/lib/libopenmpt\\$\\(SOSUFFIX\\)",""); print}' "$SRB2BLDROOT/libraries/libopenmpt/Makefile"
                gawk -i inplace '{gsub("bin/libopenmpt","'$SRB2BLDPREFIX'/stow/libopenmpt/lib/libopenmpt"); print}' "$SRB2BLDROOT/libraries/libopenmpt/Makefile"
                sudo -E make -k -j"$NCPU" NO_PORTAUDIO=1 NO_PORTAUDIOCPP=1 NO_SNDFILE=1 NO_FLAC=1 NO_PULSEAUDIO=1
                sudo -E make PREFIX=$SRB2BLDPREFIX/stow/libopenmpt install
                sudo -E stow -v --adopt libopenmpt

                sudo -E git -C "$SRB2BLDROOT/libraries/libopenmpt" clean -qdffx -e .comrev
                sudo -E git -C "$SRB2BLDROOT/libraries/libopenmpt" reset -q --hard

                COMREV=$(git -C "$SRB2BLDROOT/libraries/libopenmpt" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libopenmpt/.comrev"
                cd "$BUILD" || exit

            fi

        fi

        # Download libgme's source code, build and install it.
        if [ "$ISGME" = "libgme" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libgme/.git" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libgme's source code. Please wait..."
                git clone $GITOPTS https://bitbucket.org/mpyne/game-music-emu.git --recursive --branch "$MACOSGMEVER" "$SRB2BLDROOT/libraries/libgme"

            else

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libgme's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libgme" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libgme" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libgme" checkout -q master

                if [ -n "$ISNET" ]; then

                    git -C "$SRB2BLDROOT/libraries/libgme" pull --recurse-submodules --rebase --autostash

                fi

                git -C "$SRB2BLDROOT/libraries/libgme" checkout -q "$MACOSGMEVER"

            fi

            if ([ ! -f "$SRB2BLDPREFIX/lib/libgme.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libgme.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libgme.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libgme/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libgme" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libgme/.comrev" 2> /dev/null)" ]); then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libgme. Please wait..."
                mkdir -p "$SRB2BLDROOT/libraries/libgme/build"
                cmake -S "$SRB2BLDROOT/libraries/libgme" -B "$SRB2BLDROOT/libraries/libgme/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DGME_YM2612_EMU=MAME -DENABLE_UBSAN=OFF -DCMAKE_INSTALL_PREFIX=$SRB2BLDPREFIX/stow/libgme -DCMAKE_MACOSX_RPATH=OFF
                cmake --build "$SRB2BLDROOT/libraries/libgme/build" -j"$NCPU" --config Release
                sudo -E cmake --install "$SRB2BLDROOT/libraries/libgme/build"
                sudo -E stow -v --adopt libgme

                git -C "$SRB2BLDROOT/libraries/libgme" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libgme" reset -q --hard

                COMREV=$(git -C "$SRB2BLDROOT/libraries/libgme" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libgme/.comrev"

            fi

        fi

        # Download libmodplug's source code, build and install it.
        if [ "$ISOPENMPT" = "libopenmpt" ] || [ "$ISSDL2MIXER" = "libsdl2_mixer" ] || [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libmodplug/.git" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libmodplug's source code. Please wait..."
                git clone $GITOPTS https://github.com/Konstanty/libmodplug.git --recursive --branch "$MACOSMODPLUGVER" "$SRB2BLDROOT/libraries/libmodplug"

            else

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libmodplug's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libmodplug" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libmodplug" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libmodplug" checkout -q master

                if [ -n "$ISNET" ]; then

                    git -C "$SRB2BLDROOT/libraries/libmodplug" pull --recurse-submodules --rebase --autostash

                fi

                git -C "$SRB2BLDROOT/libraries/libmodplug" checkout -q "$MACOSMODPLUGVER"

            fi

            if ([ ! -f "$SRB2BLDPREFIX/lib/libmodplug.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libmodplug.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libmodplug.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libmodplug/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libmodplug" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libmodplug/.comrev" 2> /dev/null)" ]); then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libmodplug. Please wait..."
                mkdir -p "$SRB2BLDROOT/libraries/libmodplug/build"
                cmake -S "$SRB2BLDROOT/libraries/libmodplug" -B "$SRB2BLDROOT/libraries/libmodplug/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=true -DCMAKE_INSTALL_PREFIX=$SRB2BLDPREFIX/stow/libmodplug -DCMAKE_MACOSX_RPATH=OFF
                cmake --build "$SRB2BLDROOT/libraries/libmodplug/build" -j"$NCPU" --config Release
                sudo -E cmake --install "$SRB2BLDROOT/libraries/libmodplug/build"
                sudo -E stow -v --adopt libmodplug

                git -C "$SRB2BLDROOT/libraries/libmodplug" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libmodplug" reset -q --hard

                COMREV=$(git -C "$SRB2BLDROOT/libraries/libmodplug" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libmodplug/.comrev"

            fi

        fi

        # Download libSDL2_mixer's source code, build and install it.
        if [ "$ISSDL2MIXER" = "libsdl2_mixer" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libsdl2-mixer/.git" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libSDL2_mixer's source code. Please wait..."
                git clone $GITOPTS https://github.com/libsdl-org/SDL_mixer.git --recursive --branch "$MACOSSDL2MIXERVER" "$SRB2BLDROOT/libraries/libsdl2-mixer"

            else

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libSDL2_mixer's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" checkout -q main

                if [ -n "$ISNET" ]; then

                    git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" pull --recurse-submodules

                fi

                git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" checkout -q "$MACOSSDL2MIXERVER"

            fi

            if ([ ! -f "$SRB2BLDPREFIX/lib/libSDL2_mixer.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libSDL2_mixer.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libSDL2_mixer.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libsdl2-mixer/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libsdl2-mixer/.comrev" 2> /dev/null)" ]); then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libSDL2_mixer. Please wait..."
                cd "$SRB2BLDROOT/libraries/libsdl2-mixer" || exit
                ./configure \
                    --disable-dependency-tracking \
                    --disable-music-flac \
                    --disable-music-flac-shared \
                    --enable-music-midi \
                    --disable-music-midi-fluidsynth \
                    --disable-music-midi-fluidsynth-shared \
                    --enable-music-midi-native \
                    --disable-music-midi-timidity \
                    --enable-music-mod \
                    --disable-music-mod-mikmod \
                    --disable-music-mod-mikmod-shared \
                    --enable-music-mod-modplug \
                    --disable-music-mod-modplug-shared \
                    --enable-music-mp3 \
                    --enable-music-mp3-mpg123 \
                    --disable-music-mp3-mpg123-shared \
                    --enable-music-ogg \
                    --disable-music-ogg-shared \
                    --disable-music-opus \
                    --disable-music-opus-shared \
                    --enable-music-wave \
                    --prefix=$SRB2BLDPREFIX/stow/libsdl2-mixer
                make -k -j"$NCPU"
                sudo -E make install
                sudo -E stow -v --adopt libsdl2-mixer

                git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" reset -q --hard

                COMREV=$(git -C "$SRB2BLDROOT/libraries/libsdl2-mixer" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libsdl2-mixer/.comrev"
                cd "$BUILD" || exit

            fi

        fi

        # Download libSDL2_mixerX's source code, build and install it.
        if [ "$ISSDL2MIXERX" = "libsdl2_mixerx" ]; then

            if [ ! -d "$SRB2BLDROOT/libraries/libsdl2-mixerx/.git" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libSDL2_mixerX's source code. Please wait..."
                git clone $GITOPTS https://github.com/WohlSoft/SDL-Mixer-X.git --recursive --branch "$MACOSSDL2MIXERXVER" "$SRB2BLDROOT/libraries/libsdl2-mixerx"

            else

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libSDL2_mixerX's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q master

                if [ -n "$ISNET" ]; then

                    git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" pull --recurse-submodules --rebase --autostash

                fi

                git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" checkout -q "$MACOSSDL2MIXERXVER"

            fi

            if ([ ! -f "$SRB2BLDPREFIX/lib/libSDL2_mixer_ext.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libSDL2_mixer_ext.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libSDL2_mixer_ext.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev" 2> /dev/null)" ]); then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libSDL2_mixerX. Please wait..."
                mkdir -p "$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
                cmake -S "$SRB2BLDROOT/libraries/libsdl2-mixerx" -B "$SRB2BLDROOT/libraries/libsdl2-mixerx/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DDOWNLOAD_AUDIO_CODECS_DEPENDENCY=ON -DAUDIO_CODECS_BUILD_LOCAL_SDL2=OFF -DUSE_SYSTEM_SDL2=ON -DSDL_MIXER_X_STATIC=OFF -DUSE_GME=ON -DUSE_MIDI=ON -DUSE_MIDI_FLUIDSYNTH=ON -DUSE_MIDI_FLUIDLITE=OFF -DUSE_MIDI_TIMIDITY=ON -DUSE_MIDI_OPNMIDI=OFF -DUSE_MIDI_ADLMIDI=OFF -DUSE_MIDI_EDMIDI=OFF -DUSE_MIDI_NATIVE=OFF -DUSE_SYSTEM_AUDIO_LIBRARIES=ON -DMIXERX_ENABLE_LGPL=ON -DMIXERX_ENABLE_GPL=ON -DUSE_FLAC=OFF -DUSE_MP3_MPG123=OFF -DCMAKE_INSTALL_PREFIX=$SRB2BLDPREFIX/stow/libsdl2-mixerx -DCMAKE_MACOSX_RPATH=OFF
                cmake --build "$SRB2BLDROOT/libraries/libsdl2-mixerx/build" -j"$NCPU" --config Release
                sudo -E cmake --install "$SRB2BLDROOT/libraries/libsdl2-mixerx/build"
                sudo -E stow -v --adopt libsdl2-mixerx

                git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" reset -q --hard

                COMREV=$(git -C "$SRB2BLDROOT/libraries/libsdl2-mixerx" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libsdl2-mixerx/.comrev"

            fi

        fi

        # Download DiscordRPC's source code, build and install it.
        if [ "$ISDISCORDRPC" = "libdiscord-rpc" ] && ([ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ] || [ "$BUILD" = "$BUILDPATH/srb2-netplus" ] || [ "$BUILD" = "$BUILDPATH/srb2-rphys" ] || [ "$BUILD" = "$BUILDPATH/srb2-tsourdt3rd" ] || [ "$BUILD" = "$BUILDPATH/srb2-vr" ] || [ "$(dirname $BUILD)" = "$BUILDPATH/srb2-custom" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-galaxy" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-hep" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-saturn" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-neptune" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]); then

            if [ ! -d "$SRB2BLDROOT/libraries/discord-rpc/.git" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading DiscordRPC's source code. Please wait..."
                git clone $GITOPTS https://github.com/discord/discord-rpc.git --recursive --branch "$MACOSDISCORDRPCVER" "$SRB2BLDROOT/libraries/discord-rpc"

            else

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up DiscordRPC's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/discord-rpc" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/discord-rpc" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/discord-rpc" checkout -q master

                if [ -n "$ISNET" ]; then

                    git -C "$SRB2BLDROOT/libraries/discord-rpc" pull --recurse-submodules --rebase --autostash

                fi

                git -C "$SRB2BLDROOT/libraries/discord-rpc" checkout -q "$MACOSDISCORDRPCVER"

            fi

            if ([ ! -f "$SRB2BLDPREFIX/lib/libdiscord-rpc.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libdiscord-rpc.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libdiscord-rpc.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/discord-rpc/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/discord-rpc" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/discord-rpc/.comrev" 2> /dev/null)" ]); then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing DiscordRPC. Please wait..."
                mkdir -p "$SRB2BLDROOT/libraries/discord-rpc/build"
                cmake -S "$SRB2BLDROOT/libraries/discord-rpc" -B "$SRB2BLDROOT/libraries/discord-rpc/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DBUILD_EXAMPLES=OFF -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=$SRB2BLDPREFIX/stow/discord-rpc -DCMAKE_MACOSX_RPATH=OFF
                cmake --build "$SRB2BLDROOT/libraries/discord-rpc/build" -j"$NCPU" --config Release
                sudo -E cmake --install "$SRB2BLDROOT/libraries/discord-rpc/build"
                sudo -E stow -v --adopt discord-rpc

                git -C "$SRB2BLDROOT/libraries/discord-rpc" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/discord-rpc" reset -q --hard

                COMREV=$(git -C "$SRB2BLDROOT/libraries/discord-rpc" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/discord-rpc/.comrev"

            fi

        fi

        # Download libopenvr's source code, build and install it.
        if ([ "$BUILD" = "$BUILDPATH/srb2-vr" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]); then

            if [ ! -d "$SRB2BLDROOT/libraries/libopenvr/.git" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Downloading libopenvr's source code. Please wait..."
                git clone $GITOPTS https://github.com/ValveSoftware/openvr.git --recursive --branch "v$MACOSOPENVRVER" "$SRB2BLDROOT/libraries/libopenvr"

            else

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Updating and cleaning up libopenvr's source code. Please wait..."
                git -C "$SRB2BLDROOT/libraries/libopenvr" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libopenvr" reset -q --hard
                git -C "$SRB2BLDROOT/libraries/libopenvr" checkout -q master

                if [ -n "$ISNET" ]; then

                    git -C "$SRB2BLDROOT/libraries/libopenvr" pull --recurse-submodules --rebase --autostash

                fi

                git -C "$SRB2BLDROOT/libraries/libopenvr" checkout -q "v$MACOSOPENVRVER"

            fi

            if ([ ! -f "$SRB2BLDPREFIX/lib/libopenvr_api.dylib" ] && [ ! -f "$HOMEBREWPREFIX/lib/libopenvr_api.dylib" ] && [ ! -f "$MACPORTPREFIX/lib/libopenvr_api.dylib" ]) || ([ -n "$(cat "$SRB2BLDROOT/libraries/libopenvr/.comrev" 2> /dev/null)" ] && [ "$(git -C "$SRB2BLDROOT/libraries/libopenvr" rev-parse --short HEAD)" != "$(cat "$SRB2BLDROOT/libraries/libopenvr/.comrev" 2> /dev/null)" ]); then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building and installing libopenvr. Please wait..."
                mkdir -p "$SRB2BLDROOT/libraries/libopenvr/build"
                cp -rf "$SRB2BLDROOT/libraries/libopenvr/src/vrcommon" "$SRB2BLDROOT/libraries/libopenvr/src/vrcore"
                cmake -S "$SRB2BLDROOT/libraries/libopenvr" -B "$SRB2BLDROOT/libraries/libopenvr/build" -DCMAKE_OSX_DEPLOYMENT_TARGET="$MACOSVER" -DCMAKE_BUILD_TYPE=Release -DBUILD_UNIVERSAL=OFF -DBUILD_SHARED=ON -DCMAKE_INSTALL_PREFIX=$SRB2BLDPREFIX/stow/libopenvr -DCMAKE_MACOSX_RPATH=OFF
                cmake --build "$SRB2BLDROOT/libraries/libopenvr/build" -j"$NCPU" --config Release
                sudo -E cmake --install "$SRB2BLDROOT/libraries/libopenvr/build"
                sudo -E stow -v --adopt libopenvr

                git -C "$SRB2BLDROOT/libraries/libopenvr" clean -qdffx -e .comrev
                git -C "$SRB2BLDROOT/libraries/libopenvr" reset -q --hard

                COMREV=$(git -C "$SRB2BLDROOT/libraries/libopenvr" rev-parse --short HEAD)
                $PRINTF "%s\n" "$COMREV" > "$SRB2BLDROOT/libraries/libopenvr/.comrev"

            fi

        fi

    fi

    # Fixing permission conflicts between compiled libraries and installed from package manager.
    if [ "$(stat -f %u $SRB2BLDPREFIX/stow 2> /dev/null)" = "0" ]; then

        sudo chown -R "$USER" $SRB2BLDPREFIX/stow

    fi

    if [ "$GITVERCONF" = "$GITDEFVER" ] && [ -z "$SRB2BLDGITVER" ]; then

        unset GITVERCONF

    fi

    # Patching CMakeLists.txt to prevent macOS from loading external frameworks prior to libraries installed by Homebrew.
    if [ "$BUILD" != "$BUILDPATH/srb2-2.0" ] && [ "$BUILD" != "$BUILDPATH/srb2-final-demo" ] && [ "$BUILD" != "$BUILDPATH/srb2-jte" ] && [ "$BUILD" != "$BUILDPATH/wadcli" ] && [ "$BUILD" != "$BUILDPATH/kartmaker" ] && [ "$BUILD" != "$BUILDPATH/kartmaker-ring-racers" ] && [ "$BUILD" != "$BUILDPATH/followermaker" ]; then

        gawk -i inplace '{gsub("add_definitions\\(-DMACOSX\\)","add_definitions(-DMACOSX)\n        set(CMAKE_FIND_FRAMEWORK LAST)"); print}' "$BUILD/CMakeLists.txt"

        gawk -i inplace '{gsub("set\\(CMAKE_C_FLAGS \\${CMAKE_C_FLAGS} -Wno-trigraphs\\)",""); print}' "$BUILD/src/CMakeLists.txt"

    fi

    # Patching SRB2 Uncapped Plus' source code to fix error with implicit declaration of function R_ResetFirstLerp is invalid in C99 [-Werror,-Wimplicit-function-declaration]. Thanks Lach for help with this.
    if [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ]; then

        gawk -i inplace '{gsub("#include \"doomdef.h\"","#include \"r_fps.h\"\n#include \"doomdef.h\""); print}' "$BUILD/src/p_setup.c"

    # Patching SRB2 rphys' source code to add missing file rphys.pk3.
    elif [ "$BUILD" = "$BUILDPATH/srb2-rphys" ]; then

        gawk -i inplace '{gsub("set\\(SRB2_ASSETS_GAME","set(SRB2_ASSETS_GAME\n\t\"rphys.pk3\""); print}' "$BUILD/assets/CMakeLists.txt"

    # Patching SRB2 Persona's source code to fix error with implicit declaration of function W_GetNumForNameMusic is invalid in C99 [-Werror,-Wimplicit-function-declaration].
    elif [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        gawk -i inplace '/\/\/ W_GetNumForNameMusic/ {suppress=1} /\/\/ Like W_GetNumForName/ {suppress=0} !suppress' "$BUILD/src/w_wad.c"

        gawk -i inplace -v RS="^$" '{gsub("\\/\\/\\/ ------------------------\n\nstatic lumpnum_t S_GetMusicLumpNum\\(const char \\*mname\\)","\nlumpnum_t W_GetNumForNameMusic(const char *name)\n{\n\tlumpnum_t i;\n\n\ti = W_CheckNumForName(name);\n\n\treturn i;\n}\n\nstatic lumpnum_t S_GetMusicLumpNum(const char *mname)"); print}' "$BUILD/src/s_sound.c"

    fi

    # Replace path to liblzf in Makefile.
    if [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

        cd "$BUILD" || exit
        gawk -i inplace '{gsub("_LDLIBS=-l:liblzf.so","_LDLIBS=-L'$SRB2BLDPREFIX'/lib"); print}' "$BUILD/makefile"

    fi

    # Modify first line of build script, to avoid issue with running it.
    if [ "$BUILD" = "$BUILDPATH/kartmaker" ] || [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ]; then

        cd "$BUILD" || exit

        if [ -n "$ISNET" ]; then

            curl -RL https://raw.githubusercontent.com/BombchuLink/kartmaker/master/build.sh -o "$BUILD/build.sh"
            chmod 755 "$BUILD/build.sh"

        fi

        gawk -i inplace '{gsub("#!/bin/env sh","#!/bin/sh"); print}' "$BUILD/build.sh"

    fi

    # Modify the build's configuration and assets directory names to avoid conflicts between installed builds.
    if [ "$BUILD" = "$BUILDPATH/srb2" ] || [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ] || [ "$BUILD" = "$BUILDPATH/srb2-netplus" ] || [ "$BUILD" = "$BUILDPATH/srb2-rphys" ] || [ "$BUILD" = "$BUILDPATH/srb2-tsourdt3rd" ] || [ "$BUILD" = "$BUILDPATH/srb2-vr" ] || [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2\"","#define DEFAULTDIR \"srb2'$GITVERCONF'\""); print}' "$BUILD/src/doomdef.h"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2_21\"","#define DEFAULTDIR \"srb2_2.1\""); print}' "$BUILD/src/doomdef.h"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2\"","#define DEFAULTDIR \"srb2_2.0\""); print}' "$BUILD/src/doomdef.h"

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb21094\"","#define DEFAULTDIR \"srb2fd'$GITVERCONF'\""); print}' "$BUILD/src/doomdef.h"

    elif [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2\"","#define DEFAULTDIR \"srb2jte'$GITVERCONF'\""); print}' "$BUILD/src/doomdef.h"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-galaxy" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-hep" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-saturn" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-neptune" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        gawk -i inplace '{gsub("#define DEFAULTDIR \"srb2kart\"","#define DEFAULTDIR \"srb2kart'$GITVERCONF'\""); print}' "$BUILD/src/doomdef.h"

    elif [ "$BUILD" = "$BUILDPATH/ring-racers" ] || [ "$BUILD" = "$BUILDPATH/ring-racers-noire" ]; then

        gawk -i inplace '{gsub("! UNCOMMITTED CHANGES !",""); print}' "$BUILD/src/f_finale.c"
        gawk -i inplace '{gsub("! UNCOMMITTED CHANGES !",""); print}' "$BUILD/src/d_netcmd.c"

    elif [ "$(dirname $BUILD)" = "$BUILDPATH/srb2-custom" ]; then

        SRB2CASSETDIR=$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print $2}' "$BUILD/src/doomdef.h" 2> /dev/null)
        SRB2CCONFDIR=$($PRINTF "%s\n" "$SRB2CASSETDIR" | gawk '{print tolower($0)}')
        gawk -i inplace '{gsub("#define DEFAULTDIR \\"'$SRB2CCONFDIR'\\"","#define DEFAULTDIR \\"'$SRB2CCONFDIR'c'$CUSTOMDIR''$GITVERCONF'\\""); print}' "$BUILD/src/doomdef.h"

    fi

    # Compile the build's source code.
    $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $BUILDNAME. Please wait..."
    mkdir -p "$BUILD/build"

    if [ "$BUILD" = "$BUILDPATH/wadcli" ] || [ "$BUILD" = "$BUILDPATH/kartmaker" ] || [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ] || [ "$BUILD" = "$BUILDPATH/followermaker" ]; then

        eval $BLDCMD $CONF

    else

        eval $BLDCMD $CONF
        cmake --build "$BUILD/build" -j"$NCPU" --config Release

    fi

    if [ "$BUILD" != "$BUILDPATH/wadcli" ] && [ "$BUILD" != "$BUILDPATH/kartmaker" ] && [ "$BUILD" != "$BUILDPATH/kartmaker-ring-racers" ] && [ "$BUILD" != "$BUILDPATH/followermaker" ] && [ "$BUILD" != "$BUILDPATH/slade" ] && [ "$BUILD" != "$BUILDPATH/ultimatezonebuilder" ] && [ "$BUILD" != "$BUILDPATH/highvoltagering" ] && [ "$BUILD" != "$BUILDPATH/aseprite" ]; then

        # Get app icon.
        mkdir -p "$BUILD/build/bin/$BUILDNAME.app/Contents/Resources"
        makeicns -in "$BUILD/src/win32/Srb2win.ico" -64 -out "$BUILD/build/bin/$BUILDNAME.app/Contents/Resources/Srb2mac.icns" 2> /dev/null
        gawk -i inplace -v RS= '{sub("<key>CFBundleIconFile</key>\n	<string></string>","<key>CFBundleIconFile</key>\n	<string>Srb2mac</string>"); print}' "$BUILD/build/bin/$BUILDNAME.app/Contents/Info.plist"

        # Create $SRB2BLDPREFIX/lib, if does not exist.
        if [ ! -d $SRB2BLDPREFIX/lib ]; then

            sudo mkdir -p $SRB2BLDPREFIX/lib

        fi

        # Fix paths of installed libraries.
        if [ -f "$(find /Library/Developer/CommandLineTools/usr/lib/clang -name libclang_rt.ubsan_osx_dynamic.dylib 2> /dev/null | head -n1)" ]; then

            sudo ln -sf /Library/Developer/CommandLineTools/usr/lib/clang/$(clang -v 2>&1 | gawk -F'Apple clang version|\\(| ' '/version/ {print $3}')/lib/darwin/libclang_rt.ubsan_osx_dynamic.dylib $SRB2BLDPREFIX/lib/libclang_rt.ubsan_osx_dynamic.dylib

        fi

        if [ -f $SRB2BLDPREFIX/lib/libbrotlicommon.dylib ]; then

            sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$SRB2BLDPREFIX/lib/libbrotlicommon.dylib" $SRB2BLDPREFIX/lib/libbrotlidec.dylib
            sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$SRB2BLDPREFIX/lib/libbrotlicommon.dylib" $SRB2BLDPREFIX/lib/libbrotlienc.dylib

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" ]; then

            sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" $HOMEBREWPREFIX/lib/libbrotlidec.dylib
            sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$HOMEBREWPREFIX/lib/libbrotlicommon.dylib" $HOMEBREWPREFIX/lib/libbrotlienc.dylib

        fi

        if [ -f "$MACPORTPREFIX/lib/libbrotlicommon.dylib" ]; then

            sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$MACPORTPREFIX/lib/libbrotlicommon.dylib" $MACPORTPREFIX/lib/libbrotlidec.dylib
            sudo install_name_tool -change "@loader_path/libbrotlicommon.1.dylib" "$MACPORTPREFIX/lib/libbrotlicommon.dylib" $MACPORTPREFIX/lib/libbrotlienc.dylib

        fi

        if [ -f $SRB2BLDPREFIX/lib/libSDL2_mixer.dylib ]; then

            sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$SRB2BLDPREFIX/lib/libSDL2.dylib" $SRB2BLDPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libSDL2-2.0.dylib" "$SRB2BLDPREFIX/lib/libSDL2.dylib" $SRB2BLDPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "@rpath/libmodplug.dylib" "$SRB2BLDPREFIX/lib/libmodplug.dylib" $SRB2BLDPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libmodplug.dylib" "$SRB2BLDPREFIX/lib/libmodplug.dylib" $SRB2BLDPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libSDL2_mixer.dylib

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libSDL2_mixer.dylib" ]; then

            sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "@rpath/libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libSDL2_mixer.dylib

        fi

        if [ -f "$MACPORTPREFIX/lib/libSDL2_mixer.dylib" ]; then

            sudo install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "@rpath/libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libSDL2_mixer.dylib

        fi

        if [ -f $SRB2BLDPREFIX/lib/libvorbis.dylib ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libvorbis.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libvorbis.dylib

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libvorbis.dylib" ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbis.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbis.dylib

        fi

        if [ -f "$MACPORTPREFIX/lib/libvorbis.dylib" ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbis.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbis.dylib

        fi

        if [ -f $SRB2BLDPREFIX/lib/libvorbisfile.dylib ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libvorbisfile.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libvorbisfile.dylib

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libvorbisfile.dylib" ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbisfile.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libvorbisfile.dylib

        fi

        if [ -f "$MACPORTPREFIX/lib/libvorbisfile.dylib" ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbisfile.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libvorbisfile.dylib

        fi

        if [ -f $SRB2BLDPREFIX/lib/libopenmpt.dylib ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libopenmpt.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$SRB2BLDPREFIX/lib/libogg.dylib" $SRB2BLDPREFIX/lib/libopenmpt.dylib

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libopenmpt.dylib" ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libopenmpt.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$HOMEBREWPREFIX/lib/libogg.dylib" $HOMEBREWPREFIX/lib/libopenmpt.dylib

        fi

        if [ -f "$MACPORTPREFIX/lib/libopenmpt.dylib" ]; then

            sudo install_name_tool -change "@rpath/libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libopenmpt.dylib
            sudo install_name_tool -change "libogg.0.dylib" "$MACPORTPREFIX/lib/libogg.dylib" $MACPORTPREFIX/lib/libopenmpt.dylib

        fi

        if [ -f $SRB2BLDPREFIX/lib/libgme.dylib ]; then

            sudo install_name_tool -change "@rpath/libclang_rt.ubsan_osx_dynamic.dylib" "$SRB2BLDPREFIX/lib/libclang_rt.ubsan_osx_dynamic.dylib" $SRB2BLDPREFIX/lib/libgme.dylib

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libgme.dylib" ]; then

            sudo install_name_tool -change "@rpath/libclang_rt.ubsan_osx_dynamic.dylib" "$SRB2BLDPREFIX/lib/libclang_rt.ubsan_osx_dynamic.dylib" $HOMEBREWPREFIX/lib/libgme.dylib

        fi

        if [ -f "$MACPORTPREFIX/lib/libgme.dylib" ]; then

            sudo install_name_tool -change "@rpath/libclang_rt.ubsan_osx_dynamic.dylib" "$SRB2BLDPREFIX/lib/libclang_rt.ubsan_osx_dynamic.dylib" $MACPORTPREFIX/lib/libgme.dylib

        fi

        # Fix linking of libraries to build's binary.
        if [ -f $SRB2BLDPREFIX/lib/libSDL2.dylib ]; then

            install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$SRB2BLDPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libSDL2-2.0.dylib" "$SRB2BLDPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libSDL2.dylib" ]; then

            install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libSDL2-2.0.dylib" "$HOMEBREWPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libSDL2.dylib" ]; then

            install_name_tool -change "@rpath/libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libSDL2-2.0.dylib" "$MACPORTPREFIX/lib/libSDL2.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f $SRB2BLDPREFIX/lib/libmodplug.dylib ]; then

            install_name_tool -change "@rpath/libmodplug.dylib" "$SRB2BLDPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libmodplug.dylib" "$SRB2BLDPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libmodplug.dylib" ]; then

            install_name_tool -change "@rpath/libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libmodplug.dylib" "$HOMEBREWPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libmodplug.dylib" ]; then

            install_name_tool -change "@rpath/libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libmodplug.dylib" "$MACPORTPREFIX/lib/libmodplug.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f $SRB2BLDPREFIX/lib/libopenmpt.dylib ]; then

            install_name_tool -change "bin/libopenmpt.dylib" "$SRB2BLDPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libopenmpt.dylib" "$SRB2BLDPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libopenmpt.dylib" ]; then

            install_name_tool -change "bin/libopenmpt.dylib" "$HOMEBREWPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libopenmpt.dylib" "$HOMEBREWPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libopenmpt.dylib" ]; then

            install_name_tool -change "bin/libopenmpt.dylib" "$MACPORTPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libopenmpt.dylib" "$MACPORTPREFIX/lib/libopenmpt.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f $SRB2BLDPREFIX/lib/libgme.dylib ]; then

            install_name_tool -change "@rpath/libgme.0.dylib" "$SRB2BLDPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libgme.0.dylib" "$SRB2BLDPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libgme.dylib" ]; then

            install_name_tool -change "@rpath/libgme.0.dylib" "$HOMEBREWPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libgme.0.dylib" "$HOMEBREWPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libgme.dylib" ]; then

            install_name_tool -change "@rpath/libgme.0.dylib" "$MACPORTPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libgme.0.dylib" "$MACPORTPREFIX/lib/libgme.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f $SRB2BLDPREFIX/lib/libpng.dylib ]; then

            install_name_tool -change "@rpath/libpng16.16.dylib" "$SRB2BLDPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libpng16.16.dylib" "$SRB2BLDPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libpng.dylib" ]; then

            install_name_tool -change "@rpath/libpng16.16.dylib" "$HOMEBREWPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libpng16.16.dylib" "$HOMEBREWPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libpng.dylib" ]; then

            install_name_tool -change "@rpath/libpng16.16.dylib" "$MACPORTPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libpng16.16.dylib" "$MACPORTPREFIX/lib/libpng.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f $SRB2BLDPREFIX/lib/libdiscord-rpc.dylib ]; then

            install_name_tool -change "@rpath/libdiscord-rpc.dylib" "$SRB2BLDPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libdiscord-rpc.dylib" "$SRB2BLDPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libdiscord-rpc.dylib" ]; then

            install_name_tool -change "@rpath/libdiscord-rpc.dylib" "$HOMEBREWPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libdiscord-rpc.dylib" "$HOMEBREWPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libdiscord-rpc.dylib" ]; then

            install_name_tool -change "@rpath/libdiscord-rpc.dylib" "$MACPORTPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libdiscord-rpc.dylib" "$MACPORTPREFIX/lib/libdiscord-rpc.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f $SRB2BLDPREFIX/lib/libopenvr_api.dylib ]; then

            install_name_tool -change "@rpath/libopenvr_api.dylib" "$SRB2BLDPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libopenvr_api.dylib" "$SRB2BLDPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$HOMEBREWPREFIX/lib/libopenvr_api.dylib" ]; then

            install_name_tool -change "@rpath/libopenvr_api.dylib" "$HOMEBREWPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libopenvr_api.dylib" "$HOMEBREWPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

        if [ -f "$MACPORTPREFIX/lib/libopenvr_api.dylib" ]; then

            install_name_tool -change "@rpath/libopenvr_api.dylib" "$MACPORTPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"
            install_name_tool -change "libopenvr_api.dylib" "$MACPORTPREFIX/lib/libopenvr_api.dylib" "$BUILD/build/bin/$BUILDNAME.app/Contents/MacOS/$BUILDNAME"

        fi

    fi

    # Building App Bundle.
    if [ "$APPBUNDLE" = "1" ]; then

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Building $BUILDNAME's App Bundle. Please wait..."

        if [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

            mkdir -p "$BUILD/build"
            cd "$BUILD/build" || exit
            ln -sf /Applications Application
            cp -f "$BUILD/LICENSE" "$BUILD/wadcli" "$BUILD/build"
            cd "$BUILD" || exit
            hdiutil create -volname "$BUILDNAME" -srcfolder "$BUILD/build" "$BUILD/build/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')-$GITVER-$COMREV.dmg"

        elif [ "$BUILD" = "$BUILDPATH/kartmaker" ] || [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ]; then

            mkdir -p "$BUILD/build"
            cd "$BUILD/build" || exit
            ln -sf /Applications Application
            cp -f "$BUILD/LICENSE"* "$BUILD/build"
            cd "$BUILD" || exit
            hdiutil create -volname "$BUILDNAME" -srcfolder "$BUILD/build" "$BUILD/build/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')-$GITVER-$COMREV.dmg"

        elif [ "$BUILD" = "$BUILDPATH/followermaker" ]; then

            mkdir -p "$BUILD/build"
            cd "$BUILD/build" || exit
            ln -sf /Applications Application
            cp -f "$BUILD/LICENSE.txt" "$BUILD/followermaker" "$BUILD/build"
            cd "$BUILD" || exit
            hdiutil create -volname "$BUILDNAME" -srcfolder "$BUILD/build" "$BUILD/build/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')-$GITVER-$COMREV.dmg"

        elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

            mkdir -p "$BUILD/build/appbundle-build" "$BUILD/build/slade.app/Contents/Frameworks"
            cp -rf "$BUILD/build/slade.app" "$BUILD/build/appbundle-build/$BUILDNAME.app"
            cd "$BUILD/build/appbundle-build" || exit
            ln -sf /Applications Application
            cp -f "$BUILD/LICENSE" "$BUILD/build/appbundle-build"
            cd "$BUILD/build" || exit
            hdiutil create -volname "$BUILDNAME" -srcfolder "$BUILD/build/appbundle-build" "$BUILD/build/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')-$GITVER-$COMREV.dmg"

        elif [ "$BUILD" = "$BUILDPATH/aseprite" ]; then

            ASEPRITEDMGURL="https://www.aseprite.org/$(curl -sL https://aseprite.org/trial | gawk -F'href="|"' '/\.dmg/ {print $4}')"
            if [ -n "$ISNET" ] && [ "$(curl -X GET -sLI "$ASEPRITEDMGURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/Aseprite-trial-macOS.dmg" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/Aseprite-trial-macOS.dmg"
                curl -RL "$ASEPRITEDMGURL" -o "$SRB2BLDROOT/assets/Aseprite-trial-macOS.dmg"

            fi

            mkdir -p "$BUILD/build/appbundle-build" "$BUILD/build/appbundle-mount"
            yes y | PAGER=cat hdiutil attach -quiet -nobrowse -noverify -noautoopen -mountpoint "$BUILD/build/appbundle-mount" "$SRB2BLDROOT/assets/Aseprite-trial-macOS.dmg" > /dev/null
            cp -rf "$BUILD/build/appbundle-mount/Aseprite.app" "$BUILD/build/appbundle-build"
            hdiutil detach -quiet "$BUILD/build/appbundle-mount"
            cd "$BUILD/build/appbundle-build" || exit
            ln -sf /Applications Application
            cp -f "$BUILD/EULA.txt" "$BUILD/build/appbundle-build"
            cp -f "$BUILD/build/bin/aseprite" "$BUILD/build/appbundle-build/Aseprite.app/Contents/MacOS"
            rm -rf "$BUILD/build/appbundle-build/Aseprite.app/Contents/Resources/data"
            cp -rf "$BUILD/build/bin/data" "$BUILD/build/appbundle-build/Aseprite.app/Contents/Resources"
            git clone $GITOPTS https://github.com/DragonDePlatino/Kart-Builder "$BUILD/build/appbundle-build/Aseprite.app/Contents/Resources/data/extensions/kart-builder"
            cd "$BUILD/build" || exit
            hdiutil create -volname "$BUILDNAME" -srcfolder "$BUILD/build/appbundle-build" "$BUILD/build/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')-$GITVER-$COMREV.dmg"

        else

            make -k -j"$NCPU" -C "$BUILD/build" package

        fi

    # Installing build's binary, assets, libraries, icons and desktop file to the system.
    else

        SRB2MACPATH="$SRB2BLDPREFIX/$BUILDNAME.app"

        removeduplicate

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's binary, assets, libraries, icons and desktop file to the system. Please wait..."

        if [ ! -d "$SRB2BLDPREFIX" ]; then

            sudo mkdir -p "$SRB2BLDPREFIX"

        fi

        if [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

            sudo mv -f "$BUILD/wadcli" "$SRB2BLDPREFIX"

        elif [ "$BUILD" = "$BUILDPATH/kartmaker" ]; then

            sudo mv -f "$BUILD/build/kartmaker" "$SRB2BLDPREFIX"

        elif [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ]; then

            sudo mv -f "$BUILD/build/kartmaker" "$SRB2BLDPREFIX/kartmaker_rr"

        elif [ "$BUILD" = "$BUILDPATH/followermaker" ]; then

            sudo mv -f "$BUILD/followermaker" "$SRB2BLDPREFIX"

        elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

            sudo mv -f "$BUILD/build/slade.app" "$SRB2MACPATH"

        elif [ "$BUILD" = "$BUILDPATH/aseprite" ]; then

            ASEPRITEDMGURL="https://www.aseprite.org/$(curl -sL https://aseprite.org/trial | gawk -F'href="|"' '/\.dmg/ {print $4}')"
            if [ -n "$ISNET" ] && [ "$(curl -X GET -sLI "$ASEPRITEDMGURL" | gawk -F'Content-Length: ' '{IGNORECASE=1} /Content-Length/ {gsub("\r",""); print $NF}' 2> /dev/null | tail -n1)" != "$(stat -f %z "$SRB2BLDROOT/assets/Aseprite-trial-macOS.dmg" 2> /dev/null)" ]; then

                rm -f "$SRB2BLDROOT/assets/Aseprite-trial-macOS.dmg"
                curl -RL "$ASEPRITEDMGURL" -o "$SRB2BLDROOT/assets/Aseprite-trial-macOS.dmg"

            fi

            mkdir -p "$BUILD/build/install-build" "$BUILD/build/appbundle-mount"
            yes y | PAGER=cat hdiutil attach -quiet -nobrowse -noverify -noautoopen -mountpoint "$BUILD/build/appbundle-mount" "$SRB2BLDROOT/assets/Aseprite-trial-macOS.dmg" > /dev/null
            cp -rf "$BUILD/build/appbundle-mount/Aseprite.app" "$BUILD/build/install-build"
            hdiutil detach -quiet "$BUILD/build/appbundle-mount"
            cp -f "$BUILD/build/bin/aseprite" "$BUILD/build/install-build/Aseprite.app/Contents/MacOS"
            rm -rf "$BUILD/build/install-build/Aseprite.app/Contents/Resources/data"
            cp -rf "$BUILD/build/bin/data" "$BUILD/build/install-build/Aseprite.app/Contents/Resources"
            git clone $GITOPTS https://github.com/DragonDePlatino/Kart-Builder "$BUILD/build/install-build/Aseprite.app/Contents/Resources/data/extensions/kart-builder"
            sudo mv -f "$BUILD/build/install-build/Aseprite.app" "$SRB2MACPATH"

        else

            sudo -E make -C "$BUILD/build" install

        fi

        # Saving configuration flags for future upgrades.
        $PRINTF "%s\n" "$CONF" > "$BUILD/conf"

        if [ -n "$(cat "$BUILD/conf")" ]; then

            CONF=$(cat "$BUILD/conf")

        fi

        # Adding path to commit revision file.
        COMREVFILEPATH="$BUILD/.comrev"

        # Making symbolic link to .app file in /Applications.
        if [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

            SRB2MACPATH="$SRB2BLDPREFIX/wadcli"
            SRB2MACLINK="/usr/local/bin/wadcli"

        elif [ "$BUILD" = "$BUILDPATH/kartmaker" ]; then

            SRB2MACPATH="$SRB2BLDPREFIX/kartmaker"
            SRB2MACLINK="/usr/local/bin/kartmaker"

        elif [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ]; then

            SRB2MACPATH="$SRB2BLDPREFIX/kartmaker_rr"
            SRB2MACLINK="/usr/local/bin/kartmaker_rr"

        elif [ "$BUILD" = "$BUILDPATH/followermaker" ]; then

            SRB2MACPATH="$SRB2BLDPREFIX/followermaker"
            SRB2MACLINK="/usr/local/bin/followermaker"

        else

            SRB2MACLINK="/Applications/$BUILDNAME.app"

        fi

        sudo rm -f "$SRB2MACLINK"
        sudo ln -sf "$SRB2MACPATH" "$SRB2MACLINK"

    fi
}

installtowindows() {
    # Saving configuration flags to variable.
    if [ -n "$(cat "$BUILD/conf")" ]; then

        CONF=$(cat "$BUILD/conf")

    fi

    # Adding path to commit revision file.
    COMREVFILEPATH="$BUILD/.comrev"

    removeduplicate

    # Installing build's binary, assets, libraries, icons and desktop files to the system.
    $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Installing $BUILDNAME's binary, assets, libraries, icons and desktop files to the system. Please wait..."

    if [ "$BUILD" = "$BUILDPATH/srb2" ]; then

        SRB2WINDIR="SRB2"
        SRB2WINMENUDIR="Sonic Robo Blast 2"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-uncapped-plus" ]; then

        SRB2WINDIR="SRB2 Uncapped Plus"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Uncapped PLUS"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-netplus" ]; then

        SRB2WINDIR="SRB2 NetPlus"
        SRB2WINMENUDIR="Sonic Robo Blast 2 NetPlus"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-rphys" ]; then

        SRB2WINDIR="SRB2 rphys"
        SRB2WINMENUDIR="Sonic Robo Blast 2 rphys"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-tsourdt3rd" ]; then

        SRB2WINDIR="SRB2 TSoURDt3rd"
        SRB2WINMENUDIR="Sonic Robo Blast 2 TSoURDt3rd"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-vr" ]; then

        SRB2WINDIR="SRB2 VR"
        SRB2WINMENUDIR="Sonic Robo Blast 2 VR"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -openvr -win" > "$SRB2WINPATH/$SRB2WINDIR (OpenVR).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.1-legacy" ]; then

        SRB2WINDIR="SRB2 v2.1 Legacy"
        SRB2WINMENUDIR="Sonic Robo Blast 2 v2.1 Legacy"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-2.0" ]; then

        SRB2WINDIR="SRB2 v2.0"
        SRB2WINMENUDIR="Sonic Robo Blast 2 v2.0"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        touch "$SRB2WINPATH/md2.dat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-final-demo" ]; then

        SRB2WINDIR="SRB2 Final Demo"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Final Demo"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-jte" ]; then

        SRB2WINDIR="SRB2 JTE"
        SRB2WINMENUDIR="Sonic Robo Blast 2 JTE"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-persona" ]; then

        SRB2WINDIR="SRB2 Persona"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Persona"
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/ring-racers" ]; then

        SRB2WINDIR="Ring Racers"
        SRB2WINMENUDIR="Dr. Robotnik's Ring Racers"
        SRB2WINBIN=$(find "$BUILD/build/ninja-x86_mingw_static_vcpkg-release/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/build/ninja-x86_mingw_static_vcpkg-release/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/RingRacers/"* "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software -noexchndl" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl -noexchndl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/ring-racers-noire" ]; then

        SRB2WINDIR="Ring Racers Noire"
        SRB2WINMENUDIR="Dr. Robotnik's Ring Racers Noire"
        SRB2WINBIN=$(find "$BUILD/build/ninja-x86_mingw_static_vcpkg-release/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/build/ninja-x86_mingw_static_vcpkg-release/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/RingRacers/"* "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software -noexchndl" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl -noexchndl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart" ]; then

        SRB2WINDIR="SRB2 Kart"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Kart"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ]; then

        SRB2WINDIR="SRB2 Kart Moe Mansion"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Kart Moe Mansion"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-galaxy" ]; then

        SRB2WINDIR="SRB2 Kart Galaxy"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Kart Galaxy"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-hep" ]; then

        SRB2WINDIR="SRB2 Kart HEP"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Kart HEP"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-saturn" ]; then

        SRB2WINDIR="SRB2 Kart Saturn"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Kart Saturn"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-neptune" ]; then

        SRB2WINDIR="SRB2 Kart Neptune"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Kart Neptune"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

    elif [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        SRB2WINDIR="SRB2 Kart VR"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Kart VR"
        SRB2WINBIN=$(find "$BUILD/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" -name "$SRB2WINBIN" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/SRB2Kart/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"
        $PRINTF "@echo off\nstart $SRB2WINBIN -openvr -win" > "$SRB2WINPATH/$SRB2WINDIR (OpenVR).bat"

    elif [ "$(dirname $BUILD)" = "$BUILDPATH/srb2-custom" ]; then

        SRB2WINDIR="SRB2 Custom $CUSTOMDIR"
        SRB2WINMENUDIR="Sonic Robo Blast 2 Custom $CUSTOMDIR"
        SRB2WINBIN=$(find "$BUILD/bin" "$BUILD/build/ninja-x86_mingw_static_vcpkg-release/bin" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Games/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf $(find "$BUILD/bin" "$BUILD/build/ninja-x86_mingw_static_vcpkg-release/bin" -name "*.exe" -type f 2> /dev/null) "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/games/$ASSETAPPDIR/"* "$SRB2WINPATH"
        cp -rf "$BUILD/build/AppDir/usr/lib/"*.dll "$SRB2WINPATH" 2> /dev/null || true

        if [ "$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print $2}' "$BUILD/src/doomdef.h" 2> /dev/null)" = "RingRacers" ]; then

            $PRINTF "@echo off\nstart $SRB2WINBIN -software -noexchndl" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
            $PRINTF "@echo off\nstart $SRB2WINBIN -opengl -noexchndl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

        else

            $PRINTF "@echo off\nstart $SRB2WINBIN -software" > "$SRB2WINPATH/$SRB2WINDIR (Software).bat"
            $PRINTF "@echo off\nstart $SRB2WINBIN -opengl" > "$SRB2WINPATH/$SRB2WINDIR (OpenGL).bat"

        fi

    elif [ "$BUILD" = "$BUILDPATH/wadcli" ]; then

        SRB2WINDIR="wadcli"
        SRB2WINMENUDIR="wadcli"
        SRB2WINBIN="wadcli"
        SRB2WINPATH="$HOME/SRB2 Software/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/$SRB2WINBIN" "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN.exe" > "$SRB2WINPATH/$SRB2WINDIR.bat"

    elif [ "$BUILD" = "$BUILDPATH/kartmaker" ]; then

        SRB2WINDIR="kartmaker"
        SRB2WINMENUDIR="kartmaker (SRB2 Kart)"
        SRB2WINBIN="kartmaker"
        SRB2WINPATH="$HOME/SRB2 Software/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/build/$SRB2WINBIN" "$SRB2WINPATH/$SRB2WINBIN.exe"
        $PRINTF "@echo off\nstart $SRB2WINBIN.exe" > "$SRB2WINPATH/$SRB2WINDIR.bat"

    elif [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ]; then

        SRB2WINDIR="kartmakerringracers"
        SRB2WINMENUDIR="kartmaker (Ring Racers)"
        SRB2WINBIN="kartmaker"
        SRB2WINPATH="$HOME/SRB2 Software/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/build/$SRB2WINBIN" "$SRB2WINPATH/$SRB2WINBIN.exe"
        $PRINTF "@echo off\nstart $SRB2WINBIN.exe" > "$SRB2WINPATH/$SRB2WINDIR.bat"

    elif [ "$BUILD" = "$BUILDPATH/followermaker" ]; then

        SRB2WINDIR="followermaker"
        SRB2WINMENUDIR="followermaker (Ring Racers)"
        SRB2WINBIN="followermaker"
        SRB2WINPATH="$HOME/SRB2 Software/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/$SRB2WINBIN.exe" "$SRB2WINPATH/$SRB2WINBIN.exe"
        $PRINTF "@echo off\nstart $SRB2WINBIN.exe" > "$SRB2WINPATH/$SRB2WINDIR.bat"

    elif [ "$BUILD" = "$BUILDPATH/slade" ]; then

        SRB2WINDIR="SLADE"
        SRB2WINMENUDIR="SLADE"
        SRB2WINBIN=$(find "$BUILD" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Software/$SRB2WINDIR"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/$SRB2WINBIN" "$SRB2WINPATH"
        $PRINTF "@echo off\nstart $SRB2WINBIN" > "$SRB2WINPATH/$SRB2WINDIR.bat"

    elif [ "$BUILD" = "$BUILDPATH/ultimatezonebuilder" ]; then

        SRB2WINDIR="Ultimate Zone Builder"
        SRB2WINMENUDIR="Ultimate Zone Builder"
        SRB2WINBIN=$(find "$BUILD/Build" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Software"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        rm -rf "$BUILD/Build/AppDir" "$BUILD/Build/builder"
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/Build" "$SRB2WINPATH/$SRB2WINDIR"
        $PRINTF "@echo off\nstart $SRB2WINBIN" > "$SRB2WINPATH/$SRB2WINDIR/$SRB2WINDIR.bat"

    elif [ "$BUILD" = "$BUILDPATH/highvoltagering" ]; then

        SRB2WINDIR="High Voltage Ring"
        SRB2WINMENUDIR="High Voltage Ring"
        SRB2WINBIN=$(find "$BUILD/Build" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Software"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        rm -rf "$BUILD/Build/AppDir" "$BUILD/Build/builder"
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/Build" "$SRB2WINPATH/$SRB2WINDIR"
        $PRINTF "@echo off\nstart $SRB2WINBIN" > "$SRB2WINPATH/$SRB2WINDIR/$SRB2WINDIR.bat"

    elif [ "$BUILD" = "$BUILDPATH/aseprite" ]; then

        SRB2WINDIR="Aseprite"
        SRB2WINMENUDIR="Aseprite"
        SRB2WINBIN=$(find "$BUILD/build" -name "*.exe" -type f 2> /dev/null | gawk -F'/' '{print $NF}' | head -n1)
        SRB2WINPATH="$HOME/SRB2 Software"
        SRB2WINMENUPATH="$HOME/Start Menu/Programs/$SRB2WINMENUDIR"
        rm -rf "$BUILD/build/AppDir"
        mkdir -p "$SRB2WINPATH"
        cp -rf "$BUILD/build" "$SRB2WINPATH/$SRB2WINDIR"
        $PRINTF "@echo off\nstart $SRB2WINBIN" > "$SRB2WINPATH/$SRB2WINDIR/$SRB2WINDIR.bat"

    fi

    # Using VBScript to create menu entry for Windows.
    if [ "$BUILD" = "$BUILDPATH/wadcli" ] || [ "$BUILD" = "$BUILDPATH/kartmaker" ] || [ "$BUILD" = "$BUILDPATH/kartmaker-ring-racers" ] || [ "$BUILD" = "$BUILDPATH/followermaker" ] || [ "$BUILD" = "$BUILDPATH/slade" ] || [ "$BUILD" = "$BUILDPATH/ultimatezonebuilder" ] || [ "$BUILD" = "$BUILDPATH/highvoltagering" ] || [ "$BUILD" = "$BUILDPATH/aseprite" ]; then

        cat > "$BUILD/build/CreateShortcut.vbs" << WINMENUSHORTCUT
Set oWS = CreateObject("WScript.Shell")
strHomeFolder = oWS.ExpandEnvironmentStrings("%USERPROFILE%")

Set oFSO = CreateObject("Scripting.FileSystemObject")
oFSO.CreateFolder strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR"

Set oWS = WScript.CreateObject("WScript.Shell")
sLinkFile = strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR\\$SRB2WINDIR.bat.lnk"
Set oLink = oWS.CreateShortcut(sLinkFile)
oLink.TargetPath = strHomeFolder & "\\SRB2 Software\\$SRB2WINDIR\\$SRB2WINDIR.bat"
oLink.WorkingDirectory = strHomeFolder & "\\SRB2 Software\\$SRB2WINDIR"
oLink.IconLocation = strHomeFolder & "\\SRB2 Software\\$SRB2WINDIR\\icon.ico"
oLink.Save
WINMENUSHORTCUT

    else

        cat > "$BUILD/build/CreateShortcut.vbs" << WINMENUSHORTCUT
Set oWS = CreateObject("WScript.Shell")
strHomeFolder = oWS.ExpandEnvironmentStrings("%USERPROFILE%")

Set oFSO = CreateObject("Scripting.FileSystemObject")
oFSO.CreateFolder strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR"

Set oWS = WScript.CreateObject("WScript.Shell")
sLinkFile = strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR\\$SRB2WINDIR (Software).bat.lnk"
Set oLink = oWS.CreateShortcut(sLinkFile)
oLink.TargetPath = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINDIR (Software).bat"
oLink.WorkingDirectory = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR"
oLink.IconLocation = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINBIN"
oLink.Save

sLinkFile = strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR\\$SRB2WINDIR (OpenGL).bat.lnk"
Set oLink = oWS.CreateShortcut(sLinkFile)
oLink.TargetPath = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINDIR (OpenGL).bat"
oLink.WorkingDirectory = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR"
oLink.IconLocation = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINBIN"
oLink.Save
WINMENUSHORTCUT

    fi

    if [ "$BUILD" = "$BUILDPATH/srb2-vr" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

        cat >> "$BUILD/build/CreateShortcut.vbs" << WINMENUSHORTCUT
sLinkFile = strHomeFolder & "\\Start Menu\\Programs\\$SRB2WINMENUDIR\\$SRB2WINDIR (OpenVR).bat.lnk"
Set oLink = oWS.CreateShortcut(sLinkFile)
oLink.TargetPath = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINDIR (OpenVR).bat"
oLink.WorkingDirectory = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR"
oLink.IconLocation = strHomeFolder & "\\SRB2 Games\\$SRB2WINDIR\\$SRB2WINBIN"
oLink.Save
WINMENUSHORTCUT

    fi

    cscript "$BUILD/build/CreateShortcut.vbs" 2> /dev/null
}

listasset() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/assets" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find downloaded assets."
        exit

    fi

    # List downloaded assets.
    find "$SRB2BLDROOT/assets" -mindepth 1 -maxdepth 1 -type f -printf "\033[1;97m%P\n\033[0m" 2> /dev/null | gawk -F'/' '{print $NF}' | sort
}

listbuild() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/builds" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find downloaded builds."
        exit

    fi

    # List downloaded source code.
    find "$SRB2BLDROOT/builds" ! -iname srb2-custom -mindepth 1 -maxdepth 1 -type d -printf "\033[1;97m%P\n\033[0m" 2> /dev/null | sort
    $PRINTF "\e[1;97msrb2-custom\e[0m$(find "$SRB2BLDROOT/builds/srb2-custom" -mindepth 1 -maxdepth 1 -type d -printf "\n├%P" 2> /dev/null)\n"
}

listconfig() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find installed builds."
        exit

    fi

    # List configuration flags for installed build.
    $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please choose installed build by typing number and then pressing enter. Press enter or ctrl+c to quit."
    array=$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)
    arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            CONF=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
            $PRINTF "%s\n" ""
            $PRINTF "$PROMPT%s\n\e[0m" "$(gawk '/---------------/ {gsub("---------------","");getline; print}' "$CONF")"
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

listdep() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/libraries" -mindepth 1 -maxdepth 1 -type d 2> /dev/null)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find dependencies."
        exit

    fi

    # List downloaded source code.
    find "$SRB2BLDROOT/libraries" ! -iname srb2-custom -mindepth 1 -maxdepth 1 -type d -printf "\033[1;97m%P\n\033[0m" 2> /dev/null | sort
}

listinstalled() {
    clear

    if [ -z "$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find installed builds."
        exit

    fi

    # List files for installed build.
    $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Please choose installed build by typing number and then pressing enter. Press enter or ctrl+c to quit."
    array=$(find "$SRB2BLDROOT/installed" -mindepth 1 -maxdepth 1 -type f 2> /dev/null | sort)
    arrayname=$($PRINTF "%s\n" "$array" | gawk -F'/' '{print $NF}')
    count="$($PRINTF "%s\n" "$array" | wc -l)"
    n=""
    $PRINTF "%s\n" "$arrayname" | gawk '{print NR")", $0}'
    while true; do

        $PRINTF "#? "
        read -r n

        if [ -n "$n" ] && [ "$n" -eq "$n" ] && [ "$n" -gt 0 ] && [ "$n" -le "$count" ]; then

            CONF=$($PRINTF "%s\n" "$array" | gawk NR=="${n}")
            $PRINTF "%s\n" ""
            $PRINTF "$PROMPT%s\n\e[0m" "$(gawk '/^\//,/---------------/ {gsub("---------------",""); print}' "$CONF")"
            break

        else

            $PRINTF "$NOTICE\n%s\n\e[0m" "No option has been chosen."
            exit

        fi

    done
}

preparebuild() {
    # Make directories for storing essential files.
    $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Preparing directories to store $BUILDNAME's source code, assets and libraries. Please wait..."
    if [ "$OS" = "Darwin" ]; then

        mkdir -p "$SRB2BLDROOT/builds" "$SRB2BLDROOT/assets" "$SRB2BLDROOT/libraries" "$BUILD/assets/installer"

    else

        mkdir -p "$SRB2BLDROOT/builds" "$SRB2BLDROOT/assets" "$SRB2BLDROOT/libraries" "$BUILD/build/AppDir/usr/bin" "$BUILD/build/AppDir/usr/games" "$BUILD/build/AppDir/usr/lib" "$BUILD/build/AppDir/usr/share/applications"

        if [ "$BUILD" = "$BUILDPATH/srb2-kart" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-moe-mansion" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-galaxy" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-hep" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-saturn" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-neptune" ] || [ "$BUILD" = "$BUILDPATH/srb2-kart-vr" ]; then

            ASSETAPPDIR="SRB2Kart"
            mkdir -p "$BUILD/build/AppDir/usr/games/$ASSETAPPDIR"

        elif [ "$(gawk -F'\"' '/SRB2APPLICATION/ {gsub(" ",""); print $2}' "$BUILD/src/doomdef.h" 2> /dev/null)" = "RingRacers" ]; then

            ASSETAPPDIR="RingRacers"
            mkdir -p "$BUILD/build/AppDir/usr/games/$ASSETAPPDIR"

        elif [ "$BUILD" != "$BUILDPATH/wadcli" ] && [ "$BUILD" != "$BUILDPATH/kartmaker" ] && [ "$BUILD" != "$BUILDPATH/kartmaker-ring-racers" ] && [ "$BUILD" != "$BUILDPATH/followermaker" ] && [ "$BUILD" != "$BUILDPATH/slade" ] && [ "$BUILD" != "$BUILDPATH/ultimatezonebuilder" ] && [ "$BUILD" != "$BUILDPATH/highvoltagering" ] && [ "$BUILD" != "$BUILDPATH/aseprite" ]; then

            ASSETAPPDIR="SRB2"
            mkdir -p "$BUILD/build/AppDir/usr/games/$ASSETAPPDIR"

        fi

    fi

    cd "$BUILD" || exit

    if [ "$BUILD" != "$BUILDPATH/wadcli" ] && [ "$BUILD" != "$BUILDPATH/kartmaker" ] && [ "$BUILD" != "$BUILDPATH/kartmaker-ring-racers" ] && [ "$BUILD" != "$BUILDPATH/followermaker" ] && [ "$BUILD" != "$BUILDPATH/slade" ] && [ "$BUILD" != "$BUILDPATH/ultimatezonebuilder" ] && [ "$BUILD" != "$BUILDPATH/highvoltagering" ] && [ "$BUILD" != "$BUILDPATH/aseprite" ]; then

        if [ "$GITVER" != "$GITDEFVER" ]; then

            # Set branch in build's configuration directory name.
            GITVERCONF="$GITVER"

            # Set asset's path, if branch was set to other than default.
            if [ -z "$SRB2BLDASSETPATH" ] || [ "$(dirname $BUILD)" != "$BUILDPATH/srb2-custom" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\e[0m" "Please enter $BUILDNAME's assets path, or just press enter to download and extract the latest SRB2/SRB2Kart stable release assets. Supported links/paths:
	- websites with direct link to file, for example, \"https://github.com/STJr/SRB2/releases/download/SRB2_release_2.2.10/SRB2-v2210-Full.zip\",
	- mega.nz,
	- drive.google.com,
	- dropbox.com,
	- full path to downloaded archived file in formats supported by p7zip (https://www.7-zip.org) or full path to directory with build's assets, for example $HOME/Downloads/SRB2.zip for Linux and macOS or C:\Downloads\SRB2.zip for Windows.
"
                $PRINTF "$PROMPT\n%s\e[0m" "> "
                read -r SRB2BLDASSETPATH

            fi

            # Assume default branch and latest SRB2/SRB2Kart assets, if entered nothing in prompt.
            if [ -z "$SRB2BLDASSETPATH" ] && [ -z "$UPGRADEBUILD" ]; then

                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Assuming the latest SRB2/SRB2Kart release assets for $BUILDNAME."
                GITVER="$GITDEFVER"

            # Set to custom asset's path locally or remotely.
            else

                # Fixing Windows path to source code to be found by script.
                if [ "$OS" = "Windows" ]; then

                    SRB2BLDASSETPATH=$($PRINTF "%s\n" "$SRB2BLDASSETPATH" | gawk 'gsub("\\\\","\\\\");{print}' | gawk '!a[$0]++ {print}')

                fi

                if [ -n "$(find "$SRB2BLDASSETPATH" 2> /dev/null | head -n1)" ]; then

                    FILETYPE=$(find "$SRB2BLDASSETPATH" 2> /dev/null | gawk -F'.' '{print $NF}' | head -n1)
                    $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Copying assets. Please wait..."
                    sleep 1

                    # Copy directory with assets to script's data path.
                    if [ "$(file -b "$SRB2BLDASSETPATH" 2> /dev/null)" = "directory" ]; then

                        if [ "$OS" = "Darwin" ]; then

                            cp -rf "$SRB2BLDASSETPATH/"* "$BUILD/build/assets/installer/$ASSETAPPDIR"

                        else

                            cp -rf "$SRB2BLDASSETPATH/"* "$BUILD/build/AppDir/usr/games/$ASSETAPPDIR"

                        fi

                    # Copy archived file of assets to script's data path.
                    else

                        cp -rf "$SRB2BLDASSETPATH" "$SRB2BLDROOT/assets/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')-$GITVER.$FILETYPE"

                    fi

                fi

            fi

        fi

        if [ -z "$SRB2BLDEXTRAASSETPATH" ] && [ "$(dirname $BUILD)" = "$BUILDPATH/srb2-custom" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\e[0m" "Please enter $BUILDNAME's extra assets path, or just press enter, if you want to skip this part. Supported links/paths:
        	- websites with direct link to file, for example, \"https://github.com/STJr/SRB2/releases/download/SRB2_release_2.2.10/SRB2-v2210-Full.zip\",
        	- mega.nz,
        	- drive.google.com,
        	- dropbox.com,
        	- full path to downloaded archived file in formats supported by p7zip (https://www.7-zip.org) or full path to directory with build's assets, for example $HOME/Downloads/SRB2.zip for Linux and macOS or C:\Downloads\SRB2.zip for Windows.
        "
            $PRINTF "$PROMPT\n%s\e[0m" "> "
            read -r SRB2BLDEXTRAASSETPATH

        fi

        # Assume default branch and latest SRB2/SRB2Kart assets, if entered nothing in prompt.
        if [ -z "$SRB2BLDEXTRAASSETPATH" ] && [ -z "$UPGRADEBUILD" ]; then

            $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Assuming the latest SRB2/SRB2Kart release assets for $BUILDNAME."
            GITVER="$GITDEFVER"

        # Set to custom asset's path locally or remotely.
        else

            # Fixing Windows path to source code to be found by script.
            if [ "$OS" = "Windows" ]; then

                SRB2BLDEXTRAASSETPATH=$($PRINTF "%s\n" "$SRB2BLDEXTRAASSETPATH" | gawk 'gsub("\\\\","\\\\");{print}' | gawk '!a[$0]++ {print}')

            fi

            if [ -n "$(find "$SRB2BLDEXTRAASSETPATH" 2> /dev/null | head -n1)" ]; then

                FILETYPE=$(find "$SRB2BLDEXTRAASSETPATH" 2> /dev/null | gawk -F'.' '{print $NF}' | head -n1)
                $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Copying assets. Please wait..."
                sleep 1

                # Copy directory with assets to script's data path.
                if [ "$(file -b "$SRB2BLDEXTRAASSETPATH" 2> /dev/null)" = "directory" ]; then

                    if [ "$OS" = "Darwin" ]; then

                        cp -rf "$SRB2BLDEXTRAASSETPATH/"* "$BUILD/build/assets/installer/$ASSETAPPDIR"

                    else

                        cp -rf "$SRB2BLDEXTRAASSETPATH/"* "$BUILD/build/AppDir/usr/games/$ASSETAPPDIR"

                    fi

                # Copy archived file of assets to script's data path.
                else

                    cp -rf "$SRB2BLDEXTRAASSETPATH" "$SRB2BLDROOT/assets/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')-$GITVER.$FILETYPE"

                fi

            fi

        fi

    fi
}

preparecontainer() {
    # If podman is installed, this will be used instead of docker.
    if [ -x "$(command -v podman 2> /dev/null)" ]; then

        if [ "$OS" = "Linux" ]; then

            if [ -n "$($PRINTF "%s\n" "$ARGS" | gawk 'match($0, / -u -| -u$| --user -| --user$/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$SRB2BLDPREFIX" | gawk 'match($0, /\/home\/'$USER'\/.local/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$ISREADONLY" ]; then

                if [ ! -d "$HOME/.config/containers" ]; then

                    mkdir -p "$HOME/.config/containers"

                fi

                # Setting insecureAcceptAnything in case of missing this policy in file /etc/containers/policy.json.
                if [ ! -f "$HOME/.config/containers/policy.json" ]; then

                    cat > "$HOME/.config/containers/policy.json" << NIX
{
"default": [
        {
            "type": "insecureAcceptAnything"
        }
    ]
}
NIX

                fi

            else

                if [ ! -d /etc/containers ]; then

                    $SUDO mkdir -p /etc/containers

                fi

                # Setting insecureAcceptAnything in case of missing this policy in file /etc/containers/policy.json.
                if [ ! -f "/etc/containers/policy.json" ] || [ -z "$(gawk '/insecureAcceptAnything/ {print}' /etc/containers/policy.json 2> /dev/null)" ]; then

                    $SUDO podman image trust set -t accept default

                fi

            fi

            if [ -n "$($PRINTF "%s\n" "$ARGS" | gawk 'match($0, / -u -| -u$| --user -| --user$/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$SRB2BLDPREFIX" | gawk 'match($0, /\/home\/'$USER'\/.local/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$ISREADONLY" ]; then

                OSVIRT="podman --root $HOME/.local/share/containers/storage"

            else

                OSVIRT="$SUDO podman --root /var/lib/containers/storage"

            fi

        else

            if [ -x "$(command -v winpty 2> /dev/null)" ]; then

                OSVIRT="winpty podman"

            else

                OSVIRT="podman"

            fi

        fi

    else

        if [ -x "$(command -v winpty 2> /dev/null)" ]; then

            OSVIRT="winpty docker"

        else

            OSVIRT="docker"

        fi

    fi
}

removeduplicate() {
    # Removing previously installed files before installing the latest one.
    if [ -n "$($PRINTF "%s\n" "$ARGS" | gawk 'match($0, / -u -| -u$| --user -| --user$/) {print substr($0, RSTART, RLENGTH)}')" ] && [ -z "$UPGRADEBUILD" ]; then

        if [ -x "$(command -v doas 2> /dev/null)" ]; then

            SUDO="doas"

        else

            SUDO="sudo"

        fi

    fi

    if [ "$($PRINTF "%s\n" "$SRB2BLDPREFIX" | gawk 'match($0, /\/usr\/local|\/home\/'$USER'\/.local|\/home\/'$USER'\/Local|\/home\/'$USER'\/SRB2 Games|\/home\/'$USER'\/SRB2 Software|\/Start Menu\/Programs/) {print substr($0, RSTART, RLENGTH)}')" != "$(gawk 'match($0, /\/usr\/local|\/home\/'$USER'\/.local|\/home\/'$USER'\/Local|\/home\/'$USER'\/SRB2 Games|\/home\/'$USER'\/SRB2 Software|\/Start Menu\/Programs/) {print substr($0, RSTART, RLENGTH)}' "$SRB2BLDROOT/installed/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')" 2> /dev/null | head -n1)" ] && [ -f "$SRB2BLDROOT/installed/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')" ] && [ -z "$UPGRADEBUILD" ]; then

        BUILDINSTALLED="$SRB2BLDROOT/installed/$($PRINTF "%s\n" "$BUILD" | gawk -F'/' '{print $NF}')"
        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Removing previously installed build. Please wait..."
        sleep 1
        gawk -i inplace -v RS= '{gsub("---------------\n[A-Z]*=1|---------------",""); print}' "$BUILDINSTALLED"

        if [ "$OS" = "Windows" ]; then

            while read -r FILE; do
                rm -rfv "$FILE"
            done < "$BUILDINSTALLED"

        elif [ "$LNXOSNAME" = "NixOS" ]; then

            $SUDO nix profile remove $(head -n1 "$BUILDINSTALLED")

        else

            while read -r FILE; do
                $SUDO rm -rfv "$FILE"
            done < "$BUILDINSTALLED"

        fi

        rm -rfv "$BUILDINSTALLED"

    fi

    if [ -n "$($PRINTF "%s\n" "$ARGS" | gawk 'match($0, / -u -| -u$| --user -| --user$/) {print substr($0, RSTART, RLENGTH)}')" ] && [ -z "$UPGRADEBUILD" ]; then

        unset SUDO

    fi
}

setsudo() {
    if [ -n "$($PRINTF "%s\n" "$ARGS" | gawk 'match($0, / -u -| -u$| --user -| --user$/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$($PRINTF "%s\n" "$SRB2BLDPREFIX" | gawk 'match($0, /\/home\/'$USER'\/.local/) {print substr($0, RSTART, RLENGTH)}')" ] || [ -n "$ISREADONLY" ]; then

        unset SUDO

    else

        if [ -x "$(command -v doas 2> /dev/null)" ]; then

            SUDO="doas"

        else

            SUDO="sudo"

        fi

    fi
}

settrap() {
    # Trigger certain commands with trap signals.
    if [ "$OS" = "Windows" ]; then

        if [ "$SRB2BLDDEVMODE" = "1" ]; then

            trap '$PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m" "Exiting shell script. Please wait..." ; exit' 0 1 2 3 6 15

        else

            trap '$PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m" "Cleaning up $BUILDNAME'\''s source code and exiting shell script. Please wait..." ; cleansource ; exit' 0 1 2 3 6 15

        fi

    elif [ "$OS" = "Darwin" ]; then

        trap '$PRINTF "\n\n$PROMPT==> $FAILURE%s\n\e[0m" "ERROR: Build didn'\''t finish due to error or cancelling process."' 1 2 3 6 15

        if [ "$SRB2BLDDEVMODE" = "1" ]; then

            trap '$PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m" "Exiting shell script. Please wait..." ; sudo_ping stop ; exit' 0

        else

            trap '$PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m" "Cleaning up $BUILDNAME'\''s source code and exiting shell script. Please wait..." ; cleansource ; sudo_ping stop ; exit' 0

        fi

    elif [ "$OS" = "Linux" ]; then

        if [ "$SRB2BLDDEVMODE" = "1" ]; then

            trap '$PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m" "Exiting shell script. Please wait..." ; sudo_ping stop ; exit' 0 1 2 3 6 15

        else

            trap '$PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m" "Cleaning up $BUILDNAME'\''s source code and exiting shell script. Please wait..." ; cleansource ; sudo_ping stop ; exit' 0 1 2 3 6 15

        fi

    fi
}

sudo_ping() {
    if [ -z "$($PRINTF "%s\n" "$ARGS" | gawk 'match($0, / -u -| -u$| --user -| --user$/) {print substr($0, RSTART, RLENGTH)}')" ] && [ -z "$($PRINTF "%s\n" "$SRB2BLDPREFIX" | gawk 'match($0, /\/home\/'$USER'\/.local/) {print substr($0, RSTART, RLENGTH)}')" ] && [ -z "$ISREADONLY" ]; then

        # Make sudo to extend password timeout.
        if [ -n "$SUDO_PID" ]; then

            if [ "$1" = stop ]; then

                kill "$SUDO_PID"
                return

            else

                return

            fi

        fi

        sudo -v

        if [ $? -eq 1 ]; then

            return

        fi

        while true; do

            sudo -v
            sleep 30

        done &
        SUDO_PID=$!

    fi
}

upgrade() {
    clear

    UPGRADE=1

    checkuseropt

    checkuserid

    if [ -z "$(find "$BUILDPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | gawk -F'/' '{print $NF}' | sort)" ]; then

        $PRINTF "$FAILURE%s\n\e[0m" "ERROR: Can't find installed builds."
        exit

    fi

    ISNET=$(curl -vI https://github.com 2>&1 | gawk '/> Host:/ {gsub("\r",""); print $NF}')

    # Make a loop to find the SRB2 source code directories and then update them one by one.
    for u in $(find "$BUILDPATH" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | gawk -F'/' '{print $NF}' | sort -u); do

        unset GITVERCONF

        if [ "$u" = "srb2-custom" ]; then

            for d in $(find "$BUILDPATH/$u" -mindepth 1 -maxdepth 1 -type d 2> /dev/null | gawk -F'/' '{print $NF}' | sort -u); do

                export BUILD="$BUILDPATH/$u/$d"
                export GITVER=$(tail -n+2 "$BUILD/.comrev" 2> /dev/null)
                export CUSTOMDIR="$d"
                unset CONF
                upgradetasks

            done

        else

            export BUILD="$BUILDPATH/$u"
            export GITVER=$(tail -n+2 "$BUILD/.comrev" 2> /dev/null)
            unset CONF
            upgradetasks

        fi

    done && $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m\a" "Upgrading is finished."

    # Making sure to kill sudo_ping function process after finishing upgrade.
    if [ -n "$SUDO_PID" ]; then

        trap '$PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m" "Exiting shell script. Please wait..." ; kill $SUDO_PID ; exit' 0 1 2 3 6 15

    else

        trap '$PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m" "Exiting shell script. Please wait..." ; exit' 0 1 2 3 6 15

    fi
}

upgradetasks() {
    buildvar

    fetchupdatebuild

    if [ -f "$BUILD/.comrev" ] && [ "$(git -C "$BUILD" rev-parse --short HEAD)" != "$(head -n1 "$BUILD/.comrev")" ]; then

        export UPGRADEBUILD="$u"

        # Checking installation prefix for to be upgraded build.
        if [ -n "$UPGRADEBUILD" ] && [ -z "$CUSTOMDIR" ] && [ -f "$SRB2BLDROOT/installed/$UPGRADEBUILD" ]; then

            SRB2BLDPREFIX="$(gawk 'match($0, /\/usr\/local|\/home\/'$USER'\/.local|\/home\/'$USER'\/Local|\/home\/'$USER'\/SRB2 Games|\/home\/'$USER'\/SRB2 Software/) {print substr($0, RSTART, RLENGTH)}' "$SRB2BLDROOT/installed/$UPGRADEBUILD" | head -n1)"

        elif [ -n "$UPGRADEBUILD" ] && [ -n "$CUSTOMDIR" ] && [ -f "$SRB2BLDROOT/installed/$CUSTOMDIR" ]; then

            SRB2BLDPREFIX="$(gawk 'match($0, /\/usr\/local|\/home\/'$USER'\/.local|\/home\/'$USER'\/Local|\/home\/'$USER'\/SRB2 Games|\/home\/'$USER'\/SRB2 Software/) {print substr($0, RSTART, RLENGTH)}' "$SRB2BLDROOT/installed/$CUSTOMDIR" | head -n1)"

        fi

        if [ -z "$SRB2BLDPREFIX" ]; then

            if [ "$OS" = "Darwin" ]; then

                SRB2BLDPREFIX="/usr/local/opt/srb2-apps"

            else

                SRB2BLDPREFIX="/usr/local"

            fi

        fi

        $PRINTF "\n$PROMPT==> $MESSAGE%s\n\e[0m" "Upgrading $BUILDNAME. Please wait..."

        preparebuild

        setsudo

        settrap

        if [ "$OS" = "Darwin" ]; then

            installtomacos

            installtolist

        else

            preparecontainer

            containerentry

            if [ "$OS" = "Linux" ] && [ -z "$SUDO_PID" ]; then

                sudo_ping

            fi

            containerrun

        fi

        if [ "$?" != "0" ]; then

            $PRINTF "\n\n$PROMPT==> $FAILURE%s\n\e[0m" "ERROR: Build didn't finish due to error or cancelling process. Cleaning up $BUILDNAME's source code. Please wait..."
            cleansource

        else

            if [ "$OS" = "Windows" ] && ([ -f "$(find "$BUILD/bin" -name "*.exe" 2> /dev/null | head -n1)" ] || [ -f "$(find "$BUILD/build" -mindepth 1 -maxdepth 1 -executable -type f 2> /dev/null | head -n1)" ] || [ -f "$(find "$BUILD" -mindepth 1 -maxdepth 1 -executable -type f 2> /dev/null | head -n1)" ]); then

                installtowindows

                installtolist

            elif [ "$OS" = "Linux" ] && ([ -f "$(find "$BUILD/build/AppDir/usr/bin" -mindepth 1 -maxdepth 1 2> /dev/null | head -n1)" ] || [ -f "$(find $BUILD/build -mindepth 1 -maxdepth 1 -executable -type f 2> /dev/null | head -n1)" ] || [ -f "$(find "$BUILD" -mindepth 1 -maxdepth 1 -executable -type f 2> /dev/null | head -n1)" ]); then

                installtolinux

            fi && $PRINTF "\n$PROMPT==> $SUCCESS%s\n\e[0m" "Cleaning up $BUILDNAME's source code. Please wait..." && cleansource

        fi

    fi
}

usage() {
    clear

    $PRINTF "%s\n" "
Build and install SRB2/SRB2Kart from source.

Usage: srb2bld [OPTIONS]
  OPTIONS:
     -h, --help                             Show this help text.
     -ab, --appbundle                       Compile and create distributable App Bundle of SRB2/SRB2Kart build, which is packaged in DMG file (macOS only).
     -ad, --android                         Compile and create distributable APK file of SRB2 build (Linux and Windows only).
     -ai, --appimage                        Compile and create distributable AppImage of SRB2/SRB2Kart build (Linux only).
     -c, --compatibility                    Display compatibility table of compiling SRB2/SRB2Kart builds for each operating system.
     -f, --flatpak                          Compile and create distributable Flatpak of SRB2/SRB2Kart build (Linux only).
     -i, --install                          Compile and install SRB2/SRB2Kart build.
     -la, --listasset                       List downloaded SRB2/SRB2Kart assets.
     -lb, --listbuild                       List downloaded SRB2/SRB2Kart builds.
     -lc, --listconfig                      List compilation flags of installed SRB2/SRB2Kart builds.
     -ld, --listdep                         List compiled and installed dependencies for builds.
     -li, --listinstalled                   List installed SRB2/SRB2Kart builds.
     -ra, --removeasset                     Remove downloaded asset for SRB2/SRB2Kart build.
     -rb, --removebuild                     Remove downloaded source code for SRB2/SRB2Kart build.
     -rd, --removedep                       Remove compiled and installed dependencies for builds.
     -t, --tag                              Compile and install build with chosen tag instead of branch (only works with -i/--install, -ab/--appbundle, -ai/--appimage, -f/--flatpak).
     -u, --user                             Set installation path to user's home directory (only works with -i/--install, -ui/--uninstall, -rd/--removedep).
     -ui, --uninstall                       Uninstall SRB2/SRB2Kart/Software build.
     -up, --upgrade                         Upgrade installed SRB2/SRB2Kart build.

  EXAMPLES:
     1. Compile and install SRB2/SRB2Kart build to system:
            srb2bld --install

     2. Compile and install SRB2/SRB2Kart build to user's home directory:
            srb2bld --install --user

     3. Compile and install SRB2/SRB2Kart build to system with chosen tag:
            srb2bld --install --tag

     4. Compile and create AppImage of SRB2/SRB2Kart build (Linux only):
            srb2bld --appimage

     5. List installed SRB2/SRB2Kart builds:
            srb2bld --listinstalled

     6. Uninstall SRB2/SRB2Kart build:
            srb2bld --uninstall

     7. Display compatibility table of compiling SRB2/SRB2Kart builds for each operating system:
            srb2bld --compatibility

  NOTES:
     1. Old builds like SRB2 v2.0, SRB2 Final Demo, SRB2 JTE may not build/run properly on modern Linux distributions/macOS/Windows.

     2. WARNING for macOS users! This script makes changes from rpath to absolute paths within some libraries installed from Homebrew, MacPorts or compiled (mostly should affects libraries compiled by user), that are associated with SRB2 binary, so installing or making App Bundles would be successful. In the future this could make unexpected results with apps or SRB2 builds, that depend on those libraries.

     3. If you want to compile some builds with DiscordRPC support (SRB2 Uncapped Plus, SRB2 NetPlus, SRB2 Kart, SRB2 Kart Moe Mansion, SRB2 Kart Galaxy and SRB2 Kart VR), then type \"HAVE_DISCORDRPC=1\" (Linux/Windows) or \"-DSRB2_CONFIG_HAVE_DISCORDRPC=ON\" (macOS), when the script asks about optional compilation flags (using \"srb2bld --install\" command).

     4. If on Linux you get error with \"/dev/fuse\" or FUSE when running script, then load fuse module with \"sudo modprobe fuse\". You can write \"fuse\" in configuration file, usually in file \"/etc/modules\" or \"/etc/modules-load.d/fuse.conf\" or \"/etc/conf.d/modules/fuse.conf\", to automatically load this module at boot.

     5. If 64-bit Linux system has issues with creating or loading \"Sonic Robo Blast 2 Final Demo\" (AppImage or installed), make sure you have installed 32-bit versions of FUSE and glibc:

         - Debian/Ubuntu/Debian based/Ubuntu based: \"sudo dpkg --add-architecture i386 && sudo apt update && sudo apt install fuse:i386 libc6:i386 zlib1g:i386\",

         - Arch/Arch based: uncomment the [multilib] section in /etc/pacman.conf and do \"sudo pacman -Syu --needed\" and then use one of the AUR helpers that you have installed - \"pikaur -S --needed lib32-fuse2 lib32-glibc\" or \"paru -S --needed lib32-fuse2 lib32-glibc\" or \"yay -S --needed lib32-fuse2 lib32-glibc\",

         - Gentoo/Gentoo based: \"ABI_X86=32 sudo -E emerge -av sys-fs/fuse sys-libs/glibc\",

         - Fedora/Fedora based: \"sudo dnf install fuse-libs.i686 glibc.i686\" for Fedora Workstation/Server or \"rpm-ostree install -A --allow-inactive fuse-libs.i686 glibc.i686\" for Fedora Silverblue/Kinoite,

         - OpenSUSE/OpenSUSE based: \"sudo zypper in libfuse2-32bit glibc-32bit\",

         - Void: \"sudo xbps-install void-repo-multilib && sudo xbps-install -Su && sudo xbps-install fuse-32bit glibc-32bit\".

     6. If Linux system has issue with running build because of not found compiled libraries, even though they are installed, set: export LD_LIBRARY_PATH=\"/usr/local/lib:\$LD_LIBRARY_PATH\" in \"~/.bash_profile\" or \"~/.zshrc\".

     7. There are couple of patches applied within source code of games. Their purpose is to prevent conflicts of installing/running of multiple builds overlapping each other with the same names of directories for storing assets and configuration/saves. Other patches include fixing compilation for some builds on particular systems.

     8. If you choose branch other than default, configuration directory's name will be changed, for example \".srb2\" will become \".srb2udmf\", if \"udmf\" was chosen. Still remember to make backup of configuration/save files, before upgrading to next release of SRB2/SRB2Kart build, if you chose default branch or kept previously chosen different branch.

     9. If you have error \"invalid file system type on '/sys/fs/cgroup'\", while running script, issue could be with not running cgroups service \"sudo systemctl enable cgconfig && sudo systemctl start cgconfig\" or \"sudo systemctl enable cgmanager && sudo systemctl start cgmanager\" or \"sudo rc-update add cgroups && sudo rc-service cgroups start\" and reboot system.

     10. If you receive permission issues or errors related to /etc/subuid, /etc/subgid, UID and GID, please check if you have set UIDs/GIDs for user in path /etc/subuid and /etc/subgid. For example \"testuser:231072:65536\" will assign 65,536 subordinate UIDs/GIDs (231072-296607) to user called \"testuser\", so configure to user you are logged to. If you still have permission errors, increase range for user you are logged to in files /etc/subuid and /etc/subgid, for example \"testuser:231072:200000\". Additionally, if you have podman installed, enter \"podman system migrate\".

     11. If you get \"unhandled exception\" when running Ultimate Zone Builder or High Voltage Ring, uninstall mono in your system.

     12. To deal with out of memory errors, for example \"g++: fatal error: Killed signal terminated program cc1plus\", decrease number of CPU threads using variable \"SRB2BLDNCPU=[number of CPU threads]\".

     13. Building Android APKs require gradlew script in the path \"[SRB2 build path]/android\".

     14. For built Flatpak bundles for 32-bit builds (SRB2 Final Demo, SRB2 JTE), you need to install Flatpak \"org.freedesktop.Platform.Compat.i386\" with command \"flatpak --user install org.freedesktop.Platform.Compat.i386\".

     15. In order to compile and install custom SRB2/SRB2Kart build (assuming it is not a very old one) from local or remote repository, write environment variables in shell's configuration file, like \".bash_profile\" or \".zshrc\", which are:

          - SRB2BLDGITPATH - path to local or remote repository,

          - SRB2BLDGITVER - chosen branch to download build from remote repository,

          - SRB2BLDASSETPATH - path to assets from local or remote path (supported links/paths:
               - websites with direct link to file, for example, \"https://github.com/STJr/SRB2/releases/download/SRB2_release_2.2.10/SRB2-v2210-Full.zip\",
               - mega.nz,
               - drive.google.com,
               - dropbox.com,
               - full path to downloaded archived file in formats supported by p7zip (https://www.7-zip.org) or full path to directory with build's assets, fo
r example $HOME/Downloads/SRB2.zip for Linux and macOS or C:\Downloads\SRB2.zip for Windows.)

          - SRB2BLDEXTRAASSETPATH - path to extra assets from local or remote path, in case build requires it. The same supported links/paths applies as SRB2BLDASSETPATH.

          EXAMPLES:
               1. export SRB2BLDGITPATH=\"https://github.com/STJr/SRB2\"

               2. export SRB2BLDGITPATH=\"https://git.do.srb2.org/TehRealSalt/SRB2\"

               3. export SRB2BLDGITPATH=\"\$HOME/Builds/SRB2\"

               4. export SRB2BLDGITPATH=\"C:\Builds\SRB2\"

               5. export SRB2BLDGITVER=\"udmf\"

               6. export SRB2BLDGITVER=\"master\"

               7. export SRB2BLDASSETPATH=\"https://github.com/STJr/SRB2/releases/download/SRB2_release_2.2.10/SRB2-v2210-Full.zip\"

               8. export SRB2BLDASSETPATH=\"https://mega.nz/file/JQswBDAA#IPXWeTmrXrI9YZx6zUznJQ2uIAHryv_WP1JxWfnKbts\"

               9. export SRB2BLDASSETPATH=\"https://drive.google.com/file/d/1Vc-lHph8MxlnfaBZnv0NNpoFKhehmce6\"

               10. export SRB2BLDASSETPATH=\"https://www.dropbox.com/s/5neoderzan6mbh3/SRB2PERSONA%20v1.3.3%20Full%20Installer.exe\"

               11. export SRB2BLDASSETPATH=\"\$HOME/Downloads/SRB2-Full.zip\"

               12. export SRB2BLDASSETPATH=\"C:\Downloads\SRB2-Full.zip\"

               13. export SRB2BLDASSETPATH=\"\$HOME/Downloads/SRB2-Full\"

               14. export SRB2BLDASSETPATH=\"C:\Downloads\SRB2-Full\"

          Then choose \"Build SRB2 Custom\", when running script.

     16. Other environment variables to use. To activate them with value \"1\", do for example \"export SRB2BLDDEBUG=1\":

         - SRB2BLDDEBUG - Getting verbose output from script. Useful for reporting issues at https://github.com/bijman/srb2bld/issues.

         - SRB2BLDDEVMODE - For developers, that want to modify build's source code. Disables cleaning and resetting changes to build's source code.

         - SRB2BLDNOCCACHE - Disable ccache.

         - SRB2BLDNOGRADLECACHE - Disable gradle cache, when building Android APK.

         - SRB2BLDNCPU - Determine number of CPU threads to compile build. Useful in case of out of memory errors, for example \"g++: fatal error: Killed signal terminated program cc1plus\".

         - GITHUB_TOKEN - Increase hourly limit of request to GitHub API. Useful, if connecting to SRB2/SRB2Kart assets and downloading is blocked after many attempts. Current default number of requests without GitHub personal access token is 60 requests per hour and with GitHub personal access token - 5000 requests per hour. For more details and how to, please read https://docs.github.com/en/rest/using-the-rest-api/rate-limits-for-the-rest-api and https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens. You need GitHub account to do this.
"
}

case "$1" in

    -h | --help)

        usage

        ;;

    "")

        defaultmessage

        ;;

    -ab | --appbundle)

        appbundle

        ;;

    -ad | --android)

        android

        ;;

    -ai | --appimage)

        appimage

        ;;

    -c | --compatibility)

        compatibility

        ;;

    -f | --flatpak)

        flatpak

        ;;

    -i | --install)

        chooseinstall

        ;;

    -la | --listasset)

        listasset

        ;;

    -lb | --listbuild)

        listbuild

        ;;

    -lc | --listconfig)

        listconfig

        ;;

    -ld | --listdep)

        listdep

        ;;

    -li | --listinstalled)

        listinstalled

        ;;

    -ra | --removeasset)

        chooseremoveasset

        ;;

    -rb | --removebuild)

        chooseremovebuild

        ;;

    -rd | --removedep)

        chooseremovedep

        ;;

    -ui | --uninstall)

        chooseuninstall

        ;;

    -up | --upgrade)

        upgrade

        ;;

esac
